{"version":3,"file":"component---src-pages-recover-index-js-04b311f9c34fa949c028.js","mappings":"4NA2CA,EA9BkB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,KAAYC,EAAW,EAAjBC,KACzB,GAA8BC,EAAAA,EAAAA,WAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KAEA,OACE,gBAACC,EAAA,EAAD,CACEC,WAAW,SACXC,UAAU,YACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,UAEbP,EAMA,gBAACE,EAAA,EAAD,CAAKC,WAAW,SAASC,UAAU,WAAWC,QAAQ,OAAOC,cAAc,UACzE,gBAACE,EAAA,EAAD,CAAYC,QAAQ,MAClB,gBAAC,IAAD,CAAkBC,GAAG,mBAEvB,gBAAC,IAAD,CAAMN,UAAU,YAAYO,GAAG,UAC7B,gBAAC,IAAD,CAAkBD,GAAG,uBAVzB,gCACE,uBAAKE,IAAI,UAAUR,UAAU,OAAOS,IAAKC,EAAAA,IACzC,gBAACjB,EAAD,CAAMD,KAAMA,EAAMK,WAAYA,Q,4UC0NxC,EAjN0B,SAAC,GAA0B,IAAxBL,EAAuB,EAAvBA,KAAMK,EAAiB,EAAjBA,WACjC,GAAgCF,EAAAA,EAAAA,eAASgB,GAAlCC,EAAP,KAAiBC,EAAjB,KACA,GAA8BlB,EAAAA,EAAAA,WAAS,GAAhCmB,EAAP,KAAgBC,EAAhB,KACA,GAAoDpB,EAAAA,EAAAA,WAAS,GAAtDqB,EAAP,KAA2BC,EAA3B,KACA,GAAwCtB,EAAAA,EAAAA,WAAS,GAA1CuB,EAAP,KAAqBC,EAArB,KACA,GAAoDxB,EAAAA,EAAAA,WAAS,GAAtDyB,EAAP,KAA2BC,EAA3B,KACA,GAAgC1B,EAAAA,EAAAA,UAAS,GAAlC2B,EAAP,KAAiBC,EAAjB,KACQC,GAAqBC,EAAAA,EAAAA,MAArBD,iBACR,GAAkEE,EAAAA,EAAAA,MAA1DC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,YAAaC,EAArD,EAAqDA,SAC/CC,GAAWC,EAAAA,EAAAA,MAyDXC,EAAQ,mCAAG,WAAOC,GAAP,8EACXA,EAAKC,WAAaD,EAAKE,eADZ,oBAEbpB,GAAsB,GACtBF,GAAW,GACPuB,EAAqBH,EAAKG,oBAAsB,GAChDC,EAAI,EACsCD,EANjC,iCAOgBd,EAAiB,iBAPjC,OAOXc,EAPW,OAQXC,EAAI,EARO,QAUPC,EAAU,CACdC,MAAOjD,EACP4C,SAAUD,EAAKC,SACfE,mBAAAA,EACAC,EAAAA,GAEFG,EAAAA,EAAAA,oBACuBF,GACpBG,MAAK,WACJX,GACEY,EAAAA,EAAAA,IAAiB,mCAAoC,qCAEvDC,EAAAA,EAAAA,UAAS,aAEVC,OAAM,SAACC,GAMS,KAAXA,EAAEvD,KACJK,GAAW,GAEXmC,GAASgB,EAAAA,EAAAA,IAAeD,OAG3BE,SAAQ,WACPlC,GAAW,MArCF,wBAwCbE,GAAsB,GAxCT,4CAAH,sDAsDd,OACE,wBAAMiC,OAAO,OAAOhB,SAAUN,EAAaM,IACzC,gBAACpC,EAAA,EAAD,CACEC,WAAW,SACXC,UAAU,oBACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,UAEf,gBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBACA,gBAAC8C,EAAA,EAAD,CACEvC,SAAUA,EACVZ,UAAU,sBACVoD,OAAQxC,EACRyC,UAAU,OACVC,YAAU,GAEV,gBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAAM3C,OAAYF,IAAYW,SAAUA,KAErE,gBAACxB,EAAA,EAAD,CACEC,WAAW,QACXC,UAAU,WACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,SAEf,yBAAOH,UAAU,eAAjB,gBACA,gBAACyD,EAAA,EAAD,CAAazD,UAAU,cAAcK,QAAQ,YAC3C,gBAACqD,EAAA,EAAD,CACEC,aACE,gBAACC,EAAA,EAAD,CAAgBC,SAAS,OACvB,gBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM5C,GAAiBD,KACzCA,EAAe,gBAAC8C,EAAA,EAAD,MAAiB,gBAACC,EAAA,EAAD,QAIvCC,QAASvC,EAAOS,SAChB+B,SAAUtC,EAAS,CAAEuC,UAAU,IAC/BC,KAAK,WACLC,OAAQ,kBAAMzD,OAAYF,IAC1B4D,SA7IiB,SAACC,GAC5BvD,GAAsB,GACtB,IAAMwD,EAAiDD,EAAME,OACzDC,GAAYC,EAAAA,EAAAA,IAAiBH,EAAcI,OAC/CtD,EAAYoD,GACRA,GAAa,EACf7C,EAAY,YAEZC,EAAS,WAAY,CAAE+C,KAAM,YAAaC,QAAS,2BAsI3CC,QAAS,SAACjC,GAAD,OAAOlC,EAAYkC,EAAEkC,gBAC9BH,KAAM5D,EAAe,OAAS,eAKpC,gBAACpB,EAAA,EAAD,CACEC,WAAW,QACXC,UAAU,WACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,SAEf,yBAAOH,UAAU,eAAjB,mBACA,gBAACyD,EAAA,EAAD,CAAazD,UAAU,cAAcK,QAAQ,YAC3C,gBAACqD,EAAA,EAAD,CACEC,aACE,gBAACC,EAAA,EAAD,CAAgBC,SAAS,OACvB,gBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM1C,GAAuBD,KAC/CA,EAAqB,gBAAC4C,EAAA,EAAD,MAAiB,gBAACC,EAAA,EAAD,QAI7CC,QAASvC,EAAOU,eAChB8B,SAAUtC,EAAS,CAAEuC,UAAU,IAC/BC,KAAK,iBACLE,SArJuB,SAACC,GAClCvD,GAAsB,GACtB,IAAMwD,EAAiDD,EAAME,OACzDC,GAAYC,EAAAA,EAAAA,IAAiBH,EAAcI,OAC/CtD,EAAYoD,GACRA,GAAa,EACf7C,EAAY,kBAEZC,EAAS,iBAAkB,CACzB+C,KAAM,YACNC,QAAS,uCA4IHD,KAAM1D,EAAqB,OAAS,cAGvCJ,GAAsB,wBAAMhB,UAAU,aAAhB,2BAGzB,gBAACF,EAAA,EAAD,CAAKE,UAAU,YACb,gBAACkF,EAAA,EAAD,CACElF,UAAW,oBACXc,QAASA,EACTiD,QAlFgB,WACxBnC,EAAaM,IAkFL4C,KAAK,UAEL,gBAAC,IAAD,CAAkBxE,GAAG,sB,iCC3MjC,EAjBwB,SAAC,GAAe,IAAbmC,EAAY,EAAZA,MACnB0C,GAAOC,EAAAA,EAAAA,KAEb,OACE,gCACE,gBAACC,EAAA,EAAD,KACE,6BACMF,EAAKG,cAAc,CAAEhF,GAAI,kBAD/B,MACuD6E,EAAKG,cAAc,CACtEhF,GAAI,cAIV,gBAACiF,EAAA,EAAD,CAAW/F,KAAMiD,EAAO/C,KAAM8F","sources":["webpack://zignaly-webapp/./src/components/Forms/ResetForm/ResetForm.js","webpack://zignaly-webapp/./src/components/Forms/ResetPasswordForm/ResetPasswordForm.js","webpack://zignaly-webapp/./src/pages/recover/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ResetForm.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport Logo from \"images/logo/logoNW.svg\";\nimport { FormattedMessage } from \"react-intl\";\nimport Link from \"components/LocalizedLink\";\n\n/**\n * @param {Object} props Props.\n * @param {string} props.code Reset Code.\n * @param {function} props.form Form component to embed.\n * @returns {JSX.Element} JSx component.\n */\nconst ResetForm = ({ code, form: Form }) => {\n  const [expired, setExpired] = useState(false);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"resetForm\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n    >\n      {!expired ? (\n        <>\n          <img alt=\"TheBull\" className=\"logo\" src={Logo} />\n          <Form code={code} setExpired={setExpired} />\n        </>\n      ) : (\n        <Box alignItems=\"center\" className=\"errorBox\" display=\"flex\" flexDirection=\"column\">\n          <Typography variant=\"h3\">\n            <FormattedMessage id=\"recover.error\" />\n          </Typography>\n          <Link className=\"loginLink\" to=\"/login\">\n            <FormattedMessage id=\"backtologin.text\" />\n          </Link>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ResetForm;\n","import React, { useState } from \"react\";\nimport \"./ResetPasswordForm.scss\";\nimport {\n  Box,\n  InputAdornment,\n  IconButton,\n  FormControl,\n  OutlinedInput,\n  Popper,\n  Typography,\n} from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { validatePassword } from \"../../../utils/validators\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport PasswordStrength from \"../../Passwords/PasswordStrength\";\nimport { useForm } from \"react-hook-form\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../../store/actions/ui\";\nimport { navigate } from \"gatsby\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} code Token aquired by the recover request.\n * @property {React.SetStateAction<*>} setExpired\n */\n\n/**\n * Reset Password form component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Reset Password element.\n */\nconst ResetPasswordForm = ({ code, setExpired }) => {\n  const [anchorEl, setAnchorEl] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [passwordDoNotMatch, setPasswordDoNotMatch] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRepeatPassword, setShowRepeatPassword] = useState(false);\n  const [strength, setStrength] = useState(0);\n  const { executeRecaptcha } = useGoogleReCaptcha();\n  const { errors, handleSubmit, register, clearErrors, setError } = useForm();\n  const dispatch = useDispatch();\n  // const captchaFallback = useRef(null);\n\n  /**\n   * Main password change state handling.\n   *\n   * @param {React.ChangeEvent} event Observed event.\n   * @return {void}\n   */\n\n  const handlePasswordChange = (event) => {\n    setPasswordDoNotMatch(false);\n    const targetElement = /** @type {HTMLInputElement} */ (event.target);\n    let howStrong = validatePassword(targetElement.value);\n    setStrength(howStrong);\n    if (howStrong >= 4) {\n      clearErrors(\"password\");\n    } else {\n      setError(\"password\", { type: \"notStrong\", message: \"The password is weak.\" });\n    }\n  };\n\n  /**\n   * Main password change state handling.\n   *\n   * @param {React.ChangeEvent} event Observed event.\n   * @return {void}\n   */\n\n  const handleRepeatPasswordChange = (event) => {\n    setPasswordDoNotMatch(false);\n    const targetElement = /** @type {HTMLInputElement} */ (event.target);\n    let howStrong = validatePassword(targetElement.value);\n    setStrength(howStrong);\n    if (howStrong >= 4) {\n      clearErrors(\"repeatPassword\");\n    } else {\n      setError(\"repeatPassword\", {\n        type: \"notStrong\",\n        message: \"The repeat password is very weak.\",\n      });\n    }\n  };\n\n  /**\n   * @typedef {Object} DataObject\n   * @property {String} password\n   * @property {String} repeatPassword\n   * @property {string} [gRecaptchaResponse] Captcha token fallback\n   */\n\n  /**\n   * Data returned at form submition.\n   *\n   * @param {DataObject} data form data received by the submit method.\n   * @returns {Promise<void>} Promise\n   */\n  const onSubmit = async (data) => {\n    if (data.password === data.repeatPassword) {\n      setPasswordDoNotMatch(false);\n      setLoading(true);\n      let gRecaptchaResponse = data.gRecaptchaResponse || \"\";\n      let c = 2;\n      if (process.env.NODE_ENV === \"production\" && !gRecaptchaResponse) {\n        gRecaptchaResponse = await executeRecaptcha(\"resetPassword\");\n        c = 3;\n      }\n      const payload = {\n        token: code,\n        password: data.password,\n        gRecaptchaResponse,\n        c,\n      };\n      tradeApi\n        .forgotPasswordStep3(payload)\n        .then(() => {\n          dispatch(\n            showSuccessAlert(\"alert.forgotpassword.step1.title\", \"alert.forgotpassword.step3.body\"),\n          );\n          navigate(\"/login\");\n        })\n        .catch((e) => {\n          // if (e.code === 76) {\n          //   // Use old captcha as fallback\n          //   captchaFallback.current = (/** @type {string} */ captcha) =>\n          //     onSubmit({ ...data, gRecaptchaResponse: captcha });\n          // } else\n          if (e.code === 48) {\n            setExpired(false);\n          } else {\n            dispatch(showErrorAlert(e));\n          }\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    } else {\n      setPasswordDoNotMatch(true);\n    }\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"resetPasswordForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">Reset Password</Typography>\n        <Popper\n          anchorEl={anchorEl}\n          className=\"passwordStrengthBox\"\n          open={!!anchorEl}\n          placement=\"left\"\n          transition\n        >\n          <PasswordStrength onClose={() => setAnchorEl(undefined)} strength={strength} />\n        </Popper>\n        <Box\n          alignItems=\"start\"\n          className=\"inputBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"start\"\n        >\n          <label className=\"customLabel\">New Password</label>\n          <FormControl className=\"customInput\" variant=\"outlined\">\n            <OutlinedInput\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={() => setShowPassword(!showPassword)}>\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              error={!!errors.password}\n              inputRef={register({ required: true })}\n              name=\"password\"\n              onBlur={() => setAnchorEl(undefined)}\n              onChange={handlePasswordChange}\n              onFocus={(e) => setAnchorEl(e.currentTarget)}\n              type={showPassword ? \"text\" : \"password\"}\n            />\n          </FormControl>\n        </Box>\n\n        <Box\n          alignItems=\"start\"\n          className=\"inputBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"start\"\n        >\n          <label className=\"customLabel\">Repeat Password</label>\n          <FormControl className=\"customInput\" variant=\"outlined\">\n            <OutlinedInput\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={() => setShowRepeatPassword(!showRepeatPassword)}>\n                    {showRepeatPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              error={!!errors.repeatPassword}\n              inputRef={register({ required: true })}\n              name=\"repeatPassword\"\n              onChange={handleRepeatPasswordChange}\n              type={showRepeatPassword ? \"text\" : \"password\"}\n            />\n          </FormControl>\n          {passwordDoNotMatch && <span className=\"errorText\">Passwords do not match</span>}\n        </Box>\n\n        <Box className=\"inputBox\">\n          <CustomButton\n            className={\"full submitButton\"}\n            loading={loading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            <FormattedMessage id=\"action.reset\" />\n          </CustomButton>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nexport default ResetPasswordForm;\n","import React from \"react\";\nimport ResetPasswordForm from \"../../components/Forms/ResetPasswordForm\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport ResetForm from \"components/Forms/ResetForm\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} token Token aquired by the recover request.\n */\n\n/**\n * Recover Password page component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Recover Password element.\n */\nconst RecoverPassword = ({ token }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({ id: \"recover.title\" })} | ${intl.formatMessage({\n            id: \"product\",\n          })}`}\n        </title>\n      </Helmet>\n      <ResetForm code={token} form={ResetPasswordForm} />\n    </>\n  );\n};\n\nexport default RecoverPassword;\n"],"names":["code","Form","form","useState","expired","setExpired","Box","alignItems","className","display","flexDirection","justifyContent","Typography","variant","id","to","alt","src","Logo","undefined","anchorEl","setAnchorEl","loading","setLoading","passwordDoNotMatch","setPasswordDoNotMatch","showPassword","setShowPassword","showRepeatPassword","setShowRepeatPassword","strength","setStrength","executeRecaptcha","useGoogleReCaptcha","useForm","errors","handleSubmit","register","clearErrors","setError","dispatch","useDispatch","onSubmit","data","password","repeatPassword","gRecaptchaResponse","c","payload","token","tradeApi","then","showSuccessAlert","navigate","catch","e","showErrorAlert","finally","method","Popper","open","placement","transition","PasswordStrength","onClose","FormControl","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","Visibility","VisibilityOff","error","inputRef","required","name","onBlur","onChange","event","targetElement","target","howStrong","validatePassword","value","type","message","onFocus","currentTarget","CustomButton","intl","useIntl","Helmet","formatMessage","ResetForm","ResetPasswordForm"],"sourceRoot":""}