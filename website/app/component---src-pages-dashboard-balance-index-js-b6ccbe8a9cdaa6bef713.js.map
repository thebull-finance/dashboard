{"version":3,"file":"component---src-pages-dashboard-balance-index-js-b6ccbe8a9cdaa6bef713.js","mappings":"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","sources":["webpack://zignaly-webapp/./node_modules/@material-ui/icons/Sync.js","webpack://zignaly-webapp/./src/components/Balance/Coins/CoinsFilter/CoinsFilter.js","webpack://zignaly-webapp/./src/hooks/useDebounce.ts","webpack://zignaly-webapp/./src/components/Forms/ConvertCoinForm.tsx","webpack://zignaly-webapp/./src/components/Balance/Coins/CoinsTable/CoinsTable.tsx","webpack://zignaly-webapp/./src/components/Dashboard/DashboardHeader/DashboardHeader.js","webpack://zignaly-webapp/./src/components/Dashboard/NoExchanges/NoExchanges.js","webpack://zignaly-webapp/./src/layouts/dashboardLayout/withDashboardLayout.jsx","webpack://zignaly-webapp/./src/components/Balance/History/SpotHistoryTable.js","webpack://zignaly-webapp/./src/components/Balance/History/FuturesHistoryTable.js","webpack://zignaly-webapp/./src/components/Balance/History/History.js","webpack://zignaly-webapp/./src/hooks/useUserExchangeAssets.js","webpack://zignaly-webapp/./src/components/Balance/Coins/Coins.js","webpack://zignaly-webapp/./src/components/Balance/SyncBalanceButton/SyncBalanceButton.js","webpack://zignaly-webapp/./src/components/Balance/BalanceTabs/BalanceTabs.js","webpack://zignaly-webapp/./src/pages/dashboard/balance/index.js","webpack://zignaly-webapp/./src/utils/getDisplayName.js","webpack://zignaly-webapp/./src/utils/routesMapping.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"\n}), 'Sync');\n\nexports.default = _default;","import React, { useEffect, useState } from \"react\";\nimport \"./CoinsFilter.scss\";\nimport { Box, Checkbox } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n/**\n *\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ExchangeAsset} ExchangeAsset\n */\n\n/**\n *\n * @typedef {Object} DefaultProps\n * @property {Boolean} checked\n * @property {function(React.ChangeEvent<HTMLInputElement>):void} onChange\n */\n\n/**\n *\n * @param {DefaultProps} props Default props.\n */\n\nconst CoinsFilter = ({ checked, onChange }) => {\n  return (\n    <Box alignItems=\"center\" className=\"coinsFilter\" display=\"flex\" flexDirection=\"row\">\n      <Checkbox\n        checked={checked}\n        inputProps={{ \"aria-label\": \"Hide low value\" }}\n        onChange={onChange}\n      />\n      <FormattedMessage id=\"coins.filter.title\" />\n    </Box>\n  );\n};\n\nexport default CoinsFilter;\n","import { useEffect, useState } from \"react\";\n\nconst useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import React, { useEffect, useState } from \"react\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport tradeApi from \"../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../store/actions/ui\";\nimport { Typography, Box, CircularProgress } from \"@material-ui/core\";\nimport CustomButton from \"components/CustomButton\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport CustomSelect from \"components/CustomSelect\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { StyledCustomSelect } from \"../WalletView/styles\";\nimport AmountControl from \"components/WalletView/AmountControl\";\nimport useDebounce from \"hooks/useDebounce\";\nimport NumberFormat from \"react-number-format\";\n\ninterface ConvertCoinFormProps {\n  balance: string;\n  bases: string[];\n  base: string;\n  onClose: () => void;\n  onRefreshCoins: () => void;\n}\n\nconst ConvertCoinForm = ({\n  bases,\n  base,\n  balance,\n  onClose,\n  onRefreshCoins,\n}: ConvertCoinFormProps) => {\n  const balanceData: BalanceData = {\n    availableBalance: parseFloat(balance),\n    balance: parseFloat(balance),\n  };\n  const [loading, setLoading] = useState(false);\n  const [quotes, setQuotes] = useState([]);\n  const {\n    handleSubmit,\n    control,\n    errors,\n    formState: { isValid },\n    setValue,\n    watch,\n    trigger,\n  } = useForm({ mode: \"onChange\" });\n  const selectedBase = watch(\"base\", base);\n  const selectedQuote = watch(\"quote\");\n  const amount = watch(\"amount\");\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [previewConversion, setPreviewConversion] = useState<ConvertCoinPreviewRes>(null);\n  const selectedExchange = useSelectedExchange();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const debouncedAmount = useDebounce(amount, 1500);\n\n  useEffect(() => {\n    tradeApi\n      .getQuoteAssetFromBase({\n        base: selectedBase,\n        internalExchangeId: selectedExchange.internalId,\n      })\n      .then((response) => {\n        setQuotes(response.sort((a, b) => a.localeCompare(b)));\n        if (selectedQuote && !response.includes(selectedQuote)) {\n          // Selected quote not valid for new base\n          setValue(\"quote\", \"\");\n        } else if (isFilled()) {\n          // Selected base changed, force update preview.\n          loadPreview();\n        }\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      });\n  }, [selectedBase]);\n\n  const loadPreview = () => {\n    setPreviewConversion(null);\n    setPreviewLoading(true);\n\n    tradeApi\n      .convertCoinPreview({\n        from: selectedBase,\n        to: selectedQuote,\n        qty: amount,\n      })\n      .then((response) => {\n        setPreviewConversion(response);\n        // Update amount verification check. Without timeout, ROF doesn't check against updated minAmount...\n        setTimeout(() => {\n          trigger(\"amount\");\n        }, 0);\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setPreviewLoading(false);\n      });\n  };\n\n  const isFilled = () => selectedQuote && selectedBase && debouncedAmount;\n\n  // Update preview on change\n  useEffect(() => {\n    if (isFilled()) {\n      loadPreview();\n    }\n  }, [debouncedAmount, selectedQuote]);\n\n  const submitForm = () => {\n    setLoading(true);\n    tradeApi\n      .convertCoin({\n        internalExchangeId: selectedExchange.internalId,\n        from: selectedBase,\n        to: selectedQuote,\n        qty: amount,\n      })\n      .then(() => {\n        dispatch(showSuccessAlert(\"\", \"convert.success\"));\n        onRefreshCoins();\n        onClose();\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  const setBalanceMax = () => {\n    setValue(\"amount\", balance);\n    trigger(\"amount\");\n  };\n\n  return (\n    <Box alignItems=\"center\" display=\"flex\" flex={1} padding={4} flexDirection=\"column\">\n      <Typography align=\"center\" variant=\"h3\">\n        <FormattedMessage id=\"convert.title\" />\n      </Typography>\n      <form onSubmit={handleSubmit(submitForm)} style={{ width: \"100%\" }}>\n        <Box mt={5} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <StyledCustomSelect>\n            <Controller\n              control={control}\n              defaultValue={base}\n              name=\"base\"\n              render={({ onChange, value }) => (\n                <CustomSelect\n                  label={intl.formatMessage({ id: \"transfer.internal.form.from\" })}\n                  labelPlacement=\"top\"\n                  onChange={onChange}\n                  options={bases}\n                  placeholder={intl.formatMessage({ id: \"deposit.selectcoin\" })}\n                  search={true}\n                  value={value}\n                />\n              )}\n            />\n          </StyledCustomSelect>\n\n          <Box my={2} style={{ width: \"100%\" }}>\n            <StyledCustomSelect>\n              <Controller\n                defaultValue=\"\"\n                control={control}\n                name=\"quote\"\n                rules={{ required: true }}\n                render={({ onChange, value }) => (\n                  <CustomSelect\n                    label={intl.formatMessage({ id: \"transfer.internal.form.to\" })}\n                    labelPlacement=\"top\"\n                    options={quotes}\n                    placeholder={intl.formatMessage({ id: \"deposit.selectcoin\" })}\n                    search={true}\n                    value={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </StyledCustomSelect>\n          </Box>\n\n          <AmountControl\n            balance={balanceData}\n            setBalanceMax={setBalanceMax}\n            errors={errors}\n            control={control}\n            coin={base}\n            minAmount={previewConversion?.min}\n            decimals={8}\n          />\n\n          <Box display=\"flex\" alignItems=\"center\" height=\"100px\" justifyContent=\"center\">\n            {previewLoading ? (\n              <CircularProgress />\n            ) : (\n              previewConversion &&\n              parseFloat(amount) >= previewConversion.min && (\n                <>\n                  <Typography>\n                    <FormattedMessage id=\"convert.preview\" />\n                    &nbsp;\n                    <NumberFormat\n                      value={previewConversion.estimatedAmount}\n                      displayType=\"text\"\n                      suffix={` ${selectedQuote}`}\n                    />\n                  </Typography>\n                </>\n              )\n            )}\n          </Box>\n\n          <Box mt={2}>\n            <CustomButton\n              className=\"submitButton\"\n              loading={loading}\n              type=\"submit\"\n              disabled={!isValid || !previewConversion}\n            >\n              <FormattedMessage id=\"accounts.convert\" />\n            </CustomButton>\n          </Box>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default ConvertCoinForm;\n","import React, { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { formatFloat } from \"../../../../utils/format\";\nimport Table from \"../../../Table\";\nimport CustomButton from \"components/CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport Modal from \"components/Modal\";\nimport ConvertCoinForm from \"components/Forms/ConvertCoinForm\";\nimport { ExchangeAsset } from \"services/tradeApiClient.types\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { MUIDataTableColumn } from \"components/Table/Table\";\nimport { MUIDataTableOptions } from \"mui-datatables\";\n\ninterface CoinData {\n  coin: string;\n  balance: string;\n}\n\ninterface CoinsTableProps {\n  title: string | React.ReactNode;\n  /* Key to save display columns settings. **/\n  persistKey: string;\n  list: ExchangeAsset[];\n  onRefreshCoins?: () => void;\n}\n\nconst CoinsTable = ({ title, persistKey, list, onRefreshCoins }: CoinsTableProps) => {\n  const [convertCoin, setConvertCoin] = useState<CoinData>(null);\n  const coinsOptions = list\n    .filter((c) => parseFloat(c.balanceFree))\n    .map((c) => c.coin)\n    .sort((a, b) => a.localeCompare(b));\n  const selectedExchange = useSelectedExchange();\n\n  let columns: MUIDataTableColumn[] = [\n    {\n      name: \"coin\",\n      label: \"col.coins.coin\",\n    },\n    {\n      name: \"name\",\n      label: \"col.coins.name\",\n    },\n    {\n      name: \"balanceTotal\",\n      label: \"col.coins.total\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceFree\",\n      label: \"col.coins.available\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceLocked\",\n      label: \"col.coins.locked\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceTotalBTC\",\n      label: \"col.coins.btcvalue\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceTotalUSDT\",\n      label: \"col.coins.usdtvalue\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n  ];\n\n  if (\n    selectedExchange.exchangeName.toLowerCase() === \"zignaly\" &&\n    selectedExchange.exchangeType === \"spot\" &&\n    onRefreshCoins\n  ) {\n    columns.push({\n      name: \"coin\",\n      label: \"col.actions\",\n      options: {\n        customBodyRender: (coin: string) => {\n          const balance = list.find((c) => c.coin === coin)?.balanceFree;\n\n          return (\n            <>\n              <CustomButton\n                className=\"textPurple\"\n                onClick={() => setConvertCoin({ coin, balance })}\n                style={{ padding: 0, minWidth: \"auto\" }}\n                disabled={!parseFloat(balance)}\n              >\n                <FormattedMessage id=\"accounts.convert\" />\n              </CustomButton>\n            </>\n          );\n        },\n      },\n    });\n  }\n\n  const options: MUIDataTableOptions = {\n    sortOrder: {\n      name: \"balanceTotalBTC\",\n      direction: \"desc\",\n    },\n  };\n\n  return (\n    <Box className=\"coinsTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n      {onRefreshCoins && convertCoin && (\n        <Modal\n          onClose={() => {\n            setConvertCoin(null);\n          }}\n          size=\"small\"\n          state={true}\n        >\n          <ConvertCoinForm\n            bases={coinsOptions}\n            base={convertCoin.coin}\n            balance={convertCoin.balance}\n            onClose={() => {\n              setConvertCoin(null);\n            }}\n            onRefreshCoins={onRefreshCoins}\n          />\n        </Modal>\n      )}\n      <Table\n        columns={columns}\n        data={list}\n        options={options}\n        persistKey={persistKey}\n        title={title}\n      />\n    </Box>\n  );\n};\n\nexport default CoinsTable;\n","import React, { useContext } from \"react\";\nimport \"./DashboardHeader.scss\";\nimport { Box, Typography, Tooltip } from \"@material-ui/core\";\nimport SubNavHeader from \"../../SubNavHeader\";\nimport { routesMapping } from \"../../../utils/routesMapping\";\nimport { FormattedMessage } from \"react-intl\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport LinkOffIcon from \"@material-ui/icons/LinkOff\";\nimport PrivateAreaContext from \"context/PrivateAreaContext\";\n\n/**\n *\n * @typedef {Object} DefaultProps\n * @property {String} path\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst DashboardHeader = ({ path }) => {\n  const selectedExchange = useSelectedExchange();\n  let links = routesMapping(path).links;\n  const { connectedProviders } = useContext(PrivateAreaContext);\n  const providerCount = connectedProviders?.filter(\n    (p) => p.exchangeInternalId === selectedExchange.internalId && p.type === \"signalProvider\",\n  ).length;\n\n  if (providerCount > 0) {\n    links.push({\n      id: \"dashboard.providers\",\n      to: \"/dashboard/connectedProviders\",\n    });\n  } else {\n    links = links.filter((item) => item.id !== \"dashboard.providers\");\n  }\n\n  return (\n    <Box className=\"dashboardHeader\">\n      <Box\n        alignItems=\"center\"\n        className=\"titleBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"flex-start\"\n      >\n        <Typography variant=\"h1\">\n          <FormattedMessage id=\"dashboard\" />\n        </Typography>\n        <span className=\"exchangeTitle\">\n          <span className=\"name\"> {selectedExchange.internalName} </span>\n          {selectedExchange.paperTrading && (\n            <span className=\"tag\">\n              (<FormattedMessage id=\"menu.demo\" />){\" \"}\n            </span>\n          )}\n          {selectedExchange.isTestnet && (\n            <span className=\"tag\">\n              (<FormattedMessage id=\"menu.testnet\" />){\" \"}\n            </span>\n          )}\n          {selectedExchange.areKeysValid ? (\n            <Tooltip placement=\"top\" title={<FormattedMessage id=\"accounts.exchangeconnected\" />}>\n              <LinkIcon className=\"linkOn\" />\n            </Tooltip>\n          ) : (\n            <Tooltip\n              placement=\"top\"\n              title={<FormattedMessage id=\"accounts.exchangedisconnected\" />}\n            >\n              <LinkOffIcon className=\"linkOff\" />\n            </Tooltip>\n          )}\n        </span>\n      </Box>\n      <SubNavHeader links={links} />\n    </Box>\n  );\n};\n\nexport default DashboardHeader;\n","import React from \"react\";\nimport \"./NoExchanges.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport ExchangeIcon from \"../../ExchangeIcon\";\nimport { navigate as navigateReach } from \"@reach/router\";\nimport useExchangeList from \"../../../hooks/useExchangeList\";\nimport { getExchangeNamesCombined } from \"../../../utils/helpers\";\n\nconst NoExchanges = () => {\n  const { exchanges } = useExchangeList();\n\n  const handleClickEvent = () => {\n    navigateReach(\"#exchangeAccounts\");\n  };\n\n  return (\n    <Box\n      className=\"noExchangeBox\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n    >\n      <Typography variant=\"h1\">\n        <FormattedMessage id=\"dashboard\" />\n      </Typography>\n      <span className=\"title\">\n        <FormattedMessage id=\"dashboard.connectexchange.preText\" />\n        <b onClick={handleClickEvent}>\n          <FormattedMessage id=\"dashboard.connectexchange.bold.title\" />\n        </b>\n        <FormattedMessage id=\"dashboard.connectexchange.postText\" />\n      </span>\n      <span className=\"subtitle\">\n        <FormattedMessage id=\"dashboard.connectexchange.subtitle\" />\n        <br />\n        <span>{getExchangeNamesCombined(exchanges, \"or\")}</span>\n      </span>\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-start\">\n        {exchanges &&\n          exchanges.map(\n            (item, index) =>\n              item.enabled &&\n              item.name.toLowerCase() !== \"zignaly\" && (\n                <ExchangeIcon exchange={item.name.toLowerCase()} key={index} size=\"xlarge\" />\n              ),\n          )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default NoExchanges;\n","import React from \"react\";\nimport \"./DashboardLayout.scss\";\nimport getDisplayName from \"../../utils/getDisplayName\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport FAQ from \"../../components/FAQ\";\nimport DashboardHeader from \"../../components/Dashboard/DashboardHeader\";\nimport {\n  useStoreUserExchangeConnections,\n  useStoreUserSelector,\n} from \"../../hooks/useStoreUserSelector\";\nimport NoExchanges from \"../../components/Dashboard/NoExchanges\";\n\n/**\n * HOC wrap component with dashboard layout.\n *\n * App layout is defined here, the placement of header, sidebar, mobile appbar.\n *\n * @param {React.ComponentType<any>} Component The component to wrap.\n *\n * @returns {Function} Wrap component function.\n */\nconst withDashboardLayout = (Component) => {\n  /**\n   *\n   * @typedef {Object} DefaultProps\n   * @property {String} path\n   */\n\n  /**\n   * @param {DefaultProps} props Default params.\n   * @returns {JSX.Element} Component JSX.\n   */\n  const WrapperComponent = (props) => {\n    const storeUser = useStoreUserSelector();\n    const exchangeConnections = useStoreUserExchangeConnections();\n\n    return (\n      <Box\n        alignItems=\"flex-start\"\n        className=\"dashboardLayout\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        {!storeUser.loaded ? (\n          <Box\n            alignItems=\"center\"\n            className=\"loadingBox\"\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"center\"\n          >\n            <CircularProgress color=\"primary\" size={50} />\n          </Box>\n        ) : exchangeConnections.length > 0 ? (\n          <>\n            <DashboardHeader path={props.path} />\n            <Box className=\"pageContent\">\n              <Component {...props} />\n            </Box>\n            <Box className=\"faq\">\n              <FAQ />\n            </Box>\n          </>\n        ) : (\n          <NoExchanges />\n        )}\n      </Box>\n    );\n  };\n\n  WrapperComponent.displayName = `Layout(${getDisplayName(Component)})`;\n\n  return WrapperComponent;\n};\n\nexport default withDashboardLayout;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { formatFloat } from \"../../../utils/format\";\nimport Table from \"../../Table\";\nimport { formatNumber } from \"../../../utils/formatters\";\n\n/**\n * @typedef {import(\"../../../store/initialState\").DefaultState} DefaultStateType\n * @typedef {import(\"../../../store/initialState\").DefaultStateSession} StateSessionType\n * @typedef {import(\"mui-datatables\").MUIDataTableColumn} MUIDataTableColumn\n * @typedef {import(\"mui-datatables\").MUIDataTableMeta} MUIDataTableMeta\n * @typedef {import(\"mui-datatables\").MUIDataTableOptions} MUIDataTableOptions\n * @typedef {import(\"../../../store/initialState\").UserEquityEntity} UserEquityEntity\n */\n\n/**\n * Provides a table to display providers' profits stats.\n *\n * @typedef {Object} DefaultProps\n * @property {string | React.ReactNode} title Table title.\n * @property {'dailyBalance'} persistKey Key to save display columns settings.\n * @property {Array<UserEquityEntity>} list\n * @property {Array<String>} quotes\n *\n * @param {DefaultProps} props Component props.\n * @returns {JSX.Element} Component JSX.\n */\nconst HistoryTable = ({ title, persistKey, list, quotes }) => {\n  let data = [...list].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n  /**\n   * Format Yes/No value.\n   * @param {Number} val Val.\n   * @returns {React.ReactNode} Formatted node.\n   */\n  const renderPercentage = (val) => <span>{formatNumber(val, 2)}%</span>;\n  /**\n   * @type {Array<MUIDataTableColumn>} Table columns\n   */\n  let columns = [\n    {\n      name: \"date\",\n      label: \"col.date\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n      },\n    },\n    {\n      name: \"totalUSDT\",\n      label: \"col.totalUSDT\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalBTC\",\n      label: \"col.totalBTC\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalFreeUSDT\",\n      label: \"col.totalUSDTfree\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalFreeBTC\",\n      label: \"col.totalBTCfree\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalLockedUSDT\",\n      label: \"col.totalUSDTalloc\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalLockedBTC\",\n      label: \"col.totalBTCalloc\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"availablePercentage\",\n      label: \"col.availablePercentage\",\n      options: {\n        customBodyRender: renderPercentage,\n      },\n    },\n    {\n      name: \"investedPercentage\",\n      label: \"col.investedPercentage\",\n      options: {\n        customBodyRender: renderPercentage,\n      },\n    },\n    {\n      name: \"freeBNB\",\n      /* @ts-ignore */\n      label: { id: \"col.freequote\", quote: \"BNB\" },\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"freeETH\",\n      /* @ts-ignore */\n      label: { id: \"col.freequote\", quote: \"ETH\" },\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n  ];\n\n  /**\n   * @type {MUIDataTableOptions}\n   */\n  const options = {\n    sortOrder: { name: \"date\", direction: \"desc\" },\n  };\n\n  const dynamicColumns = () => {\n    for (let a = 0; a < quotes.length; a++) {\n      let obj = {\n        name: \"\",\n        label: { id: \"\", quote: \"\" },\n        options: {\n          customBodyRender: formatFloat,\n        },\n      };\n      if (quotes[a] !== \"ETH\" && quotes[a] !== \"BNB\") {\n        obj.name = \"free\" + quotes[a];\n        obj.label.id = \"col.freequote\";\n        /* @ts-ignore */\n        obj.label.quote = quotes[a];\n        /* @ts-ignore */\n        columns.push(obj);\n      }\n    }\n    for (let a = 0; a < quotes.length; a++) {\n      let obj = {\n        name: \"\",\n        label: { id: \"\", quote: \"\" },\n        options: {\n          customBodyRender: formatFloat,\n        },\n      };\n\n      obj.name = \"locked\" + quotes[a];\n      obj.label.id = \"col.lockedquote\";\n      /* @ts-ignore */\n      obj.label.quote = quotes[a];\n      /* @ts-ignore */\n      columns.push(obj);\n    }\n  };\n\n  dynamicColumns();\n\n  return (\n    <Box className=\"historyTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n      <Table\n        columns={columns}\n        data={data}\n        options={options}\n        persistKey={persistKey}\n        title={title}\n      />\n    </Box>\n  );\n};\n\nexport default HistoryTable;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { formatFloat } from \"../../../utils/format\";\nimport Table from \"../../Table\";\n// import { formatNumber } from \"../../../utils/formatters\";\n\n/**\n * @typedef {import(\"../../../store/initialState\").DefaultState} DefaultStateType\n * @typedef {import(\"../../../store/initialState\").DefaultStateSession} StateSessionType\n * @typedef {import(\"mui-datatables\").MUIDataTableColumn} MUIDataTableColumn\n * @typedef {import(\"mui-datatables\").MUIDataTableMeta} MUIDataTableMeta\n * @typedef {import(\"mui-datatables\").MUIDataTableOptions} MUIDataTableOptions\n * @typedef {import(\"../../../store/initialState\").UserEquityEntity} UserEquityEntity\n */\n\n/**\n * Provides a table to display providers' profits stats.\n *\n * @typedef {Object} DefaultProps\n * @property {string | React.ReactNode} title Table title.\n * @property {'futuresDailyBalance'} persistKey Key to save display columns settings.\n * @property {Array<UserEquityEntity>} list\n * @property {Array<String>} quotes\n *\n * @param {DefaultProps} props Component props.\n * @returns {JSX.Element} Component JSX.\n */\nconst FuturesHistoryTable = ({ title, persistKey, list, quotes }) => {\n  let data = [...list].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n  // /**\n  //  * Format Yes/No value.\n  //  * @param {Number} val Val.\n  //  * @returns {React.ReactNode} Formatted node.\n  //  */\n  // const renderPercentage = (val) => <span>{formatNumber(val, 2)}%</span>;\n\n  /**\n   * @type {Array<MUIDataTableColumn>} Table columns\n   */\n  let columns = [\n    {\n      name: \"date\",\n      label: \"col.date\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n      },\n    },\n    {\n      name: \"pnlUSDT\",\n      label: \"col.dailyprofitlossUSDT\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"pnlBTC\",\n      label: \"col.dailyprofitlossBTC\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"sumPnlUSDT\",\n      label: \"col.cumprofitlossUSDT\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"sumPnlBTC\",\n      label: \"col.cumprofitlossBTC\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"netTransferUSDT\",\n      label: \"col.nettransferUSDT\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"netTransferBTC\",\n      label: \"col.nettransferBTC\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalWalletUSDT\",\n      label: \"col.walletbalanceUSDT\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"totalWalletBTC\",\n      label: \"col.walletbalanceBTC\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n  ];\n\n  /**\n   * @type {MUIDataTableOptions}\n   */\n  const options = {\n    sortOrder: { name: \"date\", direction: \"desc\" },\n  };\n\n  const dynamicColumns = () => {\n    for (let i = 0; i < quotes.length; i++) {\n      let obj = {\n        name: \"\",\n        label: { id: \"\", quote: \"\" },\n        options: {\n          customBodyRender: formatFloat,\n        },\n      };\n      if (quotes[i] !== \"ETH\" && quotes[i] !== \"BNB\") {\n        obj.name = \"free\" + quotes[i];\n        obj.label.id = \"col.freequote\";\n        obj.label.quote = quotes[i];\n        /* @ts-ignore */\n        columns.push(obj);\n      }\n    }\n    for (let i = 0; i < quotes.length; i++) {\n      let obj = {\n        name: \"\",\n        label: { id: \"\", quote: \"\" },\n        options: {\n          customBodyRender: formatFloat,\n        },\n      };\n\n      obj.name = \"locked\" + quotes[i];\n      obj.label.id = \"col.lockedquote\";\n      obj.label.quote = quotes[i];\n      /* @ts-ignore */\n      columns.push(obj);\n    }\n  };\n\n  dynamicColumns();\n\n  return (\n    <Box className=\"futuresHistoryTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n      <Table\n        columns={columns}\n        data={data}\n        options={options}\n        persistKey={persistKey}\n        title={title}\n      />\n    </Box>\n  );\n};\n\nexport default FuturesHistoryTable;\n","import React, { useState, useEffect } from \"react\";\nimport \"./History.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport SpotHistoryTable from \"./SpotHistoryTable\";\nimport EquityFilter from \"../TotalEquity/EquityFilter\";\nimport FuturesHistoryTable from \"./FuturesHistoryTable\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").DefaultDailyBalanceEntity} DefaultDailyBalanceEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {Object} DefaultProps\n * @property {DefaultDailyBalanceEntity} dailyBalance Daily balance.\n * @property {ExchangeConnectionEntity} selectedExchange Selected Exchange.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst History = ({ dailyBalance, selectedExchange }) => {\n  const [list, setList] = useState(dailyBalance.balances);\n\n  const initData = () => {\n    setList(dailyBalance.balances);\n  };\n\n  useEffect(initData, [dailyBalance]);\n  /**\n   *\n   * @typedef {import(\"../../../store/initialState\").UserEquityEntity} UserEquityEntity\n   */\n\n  /**\n   * @param {Array<UserEquityEntity>} data Filtered equity data.\n   * @returns {void}\n   */\n  const handleChange = (data) => {\n    setList(data);\n  };\n\n  const embedFilter = <EquityFilter list={dailyBalance.balances} onChange={handleChange} />;\n\n  return (\n    <>\n      {dailyBalance.loading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!dailyBalance.loading && (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"history\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n        >\n          {selectedExchange.exchangeType === \"futures\" ? (\n            <FuturesHistoryTable\n              list={list}\n              persistKey=\"futuresDailyBalance\"\n              quotes={dailyBalance.quotes}\n              title={embedFilter}\n            />\n          ) : (\n            <SpotHistoryTable\n              list={list}\n              persistKey=\"dailyBalance\"\n              quotes={dailyBalance.quotes}\n              title={embedFilter}\n            />\n          )}\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default History;\n","import { useState, useEffect } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\n\n/**\n * @typedef {import(\"../services/tradeApiClient.types\").ExchangeAssetsDict} ExchangeAssetsDict\n */\n\n/**\n * Provides balance summary for exchange.\n *\n * @param {string} internalId ID of the exchange.\n * @param {Date} [updatedAt] Last updated date to force data refresh.\n * @returns {ExchangeAssetsDict} Balance.\n */\nconst useUserExchangeAssets = (internalId, updatedAt) => {\n  const [assets, setAssets] = useState(null);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    if (internalId) {\n      const payload = {\n        internalId: internalId,\n      };\n\n      tradeApi\n        .exchangeAssetsGet(payload)\n        .then((response) => {\n          setAssets(response);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n  };\n\n  useEffect(loadData, [internalId, updatedAt]);\n\n  return assets;\n};\n\nexport default useUserExchangeAssets;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Coins.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport CoinsTable from \"./CoinsTable\";\nimport useUserExchangeAssets from \"../../../hooks/useUserExchangeAssets\";\nimport CoinsFilter from \"./CoinsFilter\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n *\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeAsset} ExchangeAsset\n */\n\nconst Coins = () => {\n  const [filteredCoins, setFilteredCoins] = useState(/** @type {Array<ExchangeAsset>} */ (null));\n  const selectedExchange = useSelectedExchange();\n  const [updatedAt, setUpdatedAt] = useState(null);\n  const assets = useUserExchangeAssets(selectedExchange.internalId, updatedAt);\n  const coins = assets ? Object.values(assets) : null;\n  const [filterChecked, setFilterChecked] = useState(false);\n\n  const initData = () => {\n    if (assets) {\n      filterCoins(filterChecked);\n    }\n  };\n  useEffect(initData, [assets]);\n\n  /**\n   * @param {boolean} checked\n   * @returns {void}\n   */\n  const filterCoins = (checked) => {\n    if (coins) {\n      setFilteredCoins(\n        checked ? coins.filter((item) => parseFloat(item.balanceTotalUSDT) > 1) : coins,\n      );\n    }\n  };\n\n  /**\n   * @param {React.ChangeEvent<HTMLInputElement>} e event\n   */\n  const handleFilterChecked = (e) => {\n    setFilterChecked(e.target.checked);\n    filterCoins(e.target.checked);\n  };\n\n  const embedFilter = <CoinsFilter checked={filterChecked} onChange={handleFilterChecked} />;\n\n  return (\n    <>\n      {!filteredCoins ? (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      ) : (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"coins\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n        >\n          <CoinsTable\n            onRefreshCoins={() => setUpdatedAt(new Date())}\n            list={filteredCoins}\n            persistKey=\"exchangeAssets\"\n            title={embedFilter}\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Coins;\n","import React, { useState } from \"react\";\nimport \"./SyncBalanceButton.scss\";\nimport { Box } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../store/actions/ui\";\nimport SyncIcon from \"@material-ui/icons/Sync\";\nimport { getDailyUserBalance } from \"store/actions/user\";\n\n/**\n * @typedef {import('../../../services/tradeApiClient.types').ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {Object} DefaultProps\n * @property {ExchangeConnectionEntity} selectedExchange\n * @property {Function} refreshBalance Function to refresh balance summary.\n */\n/**\n * Component to sync balance with exchange.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst SyncBalanceButton = ({ selectedExchange, refreshBalance }) => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  const syncBalance = () => {\n    if (selectedExchange.internalId) {\n      setLoading(true);\n      const payload = {\n        exchangeInternalId: selectedExchange.internalId,\n        force: true,\n      };\n\n      tradeApi\n        .userBalanceGet(payload)\n        .then(() => {\n          refreshBalance();\n          dispatch(getDailyUserBalance(selectedExchange.internalId));\n          dispatch(showSuccessAlert(\"\", \"dashboard.balance.sync.alert\"));\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"syncBalanceButton\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <CustomButton className=\"textPurple\" loading={loading} onClick={syncBalance}>\n        <SyncIcon className=\"icon\" />\n        <FormattedMessage id=\"dashboard.balance.sync\" />\n      </CustomButton>\n    </Box>\n  );\n};\n\nexport default SyncBalanceButton;\n","import React, { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport TabsMenu from \"../../TabsMenu\";\nimport \"./BalanceTabs.scss\";\nimport History from \"../History\";\nimport Coins from \"../Coins\";\nimport { FormattedMessage } from \"react-intl\";\nimport SyncBalanceButton from \"../SyncBalanceButton\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").DefaultDailyBalanceEntity} DefaultDailyBalanceEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {Object} DefaultProps\n * @property {DefaultDailyBalanceEntity} dailyBalance Daily balance.\n * @property {ExchangeConnectionEntity} selectedExchange Daily balance.\n * @property {Function} refreshBalance Function to refresh balance summary.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst BalanceTabs = ({ dailyBalance, selectedExchange, refreshBalance }) => {\n  const [tabValue, setTabValue] = useState(0);\n\n  /**\n   * Event handler to change tab value.\n   *\n   * @param {React.ChangeEvent<{checked: boolean}>} event Tab index to set active.\n   * @param {Number} val Tab index to set active.\n   * @returns {void}\n   */\n  const changeTab = (event, val) => {\n    setTabValue(val);\n  };\n\n  const checkCoinsDisplay = () => {\n    if (\n      selectedExchange.exchangeName &&\n      selectedExchange.exchangeName.toLowerCase() === \"zignaly\"\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const tabsList = [\n    {\n      display: true,\n      label: <FormattedMessage id=\"dashboard.balance.historical\" />,\n    },\n    {\n      display: checkCoinsDisplay(),\n      label: <FormattedMessage id=\"dashboard.balance.coins\" />,\n    },\n  ];\n\n  return (\n    <Box bgcolor=\"grid.content\" className=\"balanceTabs\">\n      <Box\n        alignItems=\"flex-start\"\n        className=\"tabsBox\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        <Box\n          alignItems=\"center\"\n          className=\"topBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"space-between\"\n        >\n          <TabsMenu changeTab={changeTab} tabValue={tabValue} tabs={tabsList} />\n          <SyncBalanceButton refreshBalance={refreshBalance} selectedExchange={selectedExchange} />\n        </Box>\n        {tabValue === 0 && (\n          <Box className=\"tabPanel\">\n            <History dailyBalance={dailyBalance} selectedExchange={selectedExchange} />\n          </Box>\n        )}\n        {tabValue === 1 && (\n          <Box className=\"tabPanel\">\n            <Coins />\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default BalanceTabs;\n","import React from \"react\";\nimport \"./balance.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport withDashboardLayout from \"../../../layouts/dashboardLayout\";\nimport { Helmet } from \"react-helmet\";\nimport TotalEquity from \"../../../components/Balance/TotalEquity\";\nimport CryptoComposition from \"../../../components/Balance/CryptoComposition\";\nimport {\n  SpotAvailableBalance,\n  FuturesAvailableBalance,\n} from \"../../../components/Balance/AvailableBalance\";\nimport { useStoreUserDailyBalance } from \"../../../hooks/useStoreUserSelector\";\nimport useBalance from \"../../../hooks/useBalance\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { useIntl } from \"react-intl\";\nimport BalanceTabs from \"../../../components/Balance/BalanceTabs\";\nimport ProfitLossAnalysis from \"../../../components/Balance/ProfitLossAnalysis\";\n\nconst Balance = () => {\n  const dailyBalance = useStoreUserDailyBalance();\n  const selectedExchange = useSelectedExchange();\n  const { balance, balanceLoading, refreshBalance } = useBalance(selectedExchange.internalId);\n  const intl = useIntl();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({\n            id: \"dashboard\",\n          })} - ${intl.formatMessage({\n            id: \"dashboard.balance\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Box\n        className=\"balancePage\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n      >\n        <Box className=\"equityBox\">\n          <TotalEquity\n            dailyBalance={dailyBalance}\n            modal={false}\n            selectedExchange={selectedExchange}\n          />\n        </Box>\n        <Box className=\"cryptoBox\">\n          {selectedExchange.exchangeType === \"futures\" ? (\n            <ProfitLossAnalysis dailyBalance={dailyBalance} />\n          ) : (\n            <CryptoComposition dailyBalance={dailyBalance} />\n          )}\n        </Box>\n        <Box\n          alignItems=\"center\"\n          className=\"balanceBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          {balanceLoading ? (\n            <CircularProgress color=\"primary\" size={40} />\n          ) : selectedExchange.exchangeType === \"futures\" ? (\n            <FuturesAvailableBalance balance={balance} selectedExchange={selectedExchange} />\n          ) : (\n            <SpotAvailableBalance balance={balance} selectedExchange={selectedExchange} />\n          )}\n        </Box>\n        <Box className=\"historyBox\">\n          <BalanceTabs\n            dailyBalance={dailyBalance}\n            refreshBalance={refreshBalance}\n            selectedExchange={selectedExchange}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default withDashboardLayout(Balance);\n","/**\n * Extract display name from wrapped component.\n *\n * @param {React.ComponentType} WrappedComponent Wrapped component.\n *\n * @returns {String} Wrapped component name.\n */\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport default getDisplayName;\n","/**\n *\n * @typedef {import('../services/tradeApiClient.types').DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import('../services/tradeApiClient.types').ExchangeConnectionEntity} ExchangeConnectionEntity\n */\n/**\n * @typedef {Object} NavigationLink Navigation link object.\n * @property {string} id Link ID.\n * @property {string} to Link path.\n * @property {string|JSX.Element} [tooltip] Notification flag for user about something.\n */\n\n/**\n * @typedef {Object} SectionNavigation Section navigation object.\n * @property {string} id Section ID.\n * @property {string} subtitleId Section subtitle.\n * @property {string} subtitle2Id Section subtitle 2.\n * @property {Array<NavigationLink>} links Section navigation links.\n */\n\n/**\n * Map path to section navigation object.\n *\n * @param {string} path Path to map section links for.\n * @returns {SectionNavigation} A section navigation object.\n */\nexport const routesMapping = (path) => {\n  let id = path.split(\"/\")[1];\n\n  switch (id) {\n    case \"dashboard\":\n      return {\n        id: id,\n        subtitleId: \"\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"dashboard.positions\",\n            to: \"/dashboard\",\n          },\n          {\n            id: \"dashboard.balance\",\n            to: \"/dashboard/balance\",\n          },\n          {\n            id: \"srv.analytics\",\n            to: \"/dashboard/analytics\",\n          },\n          {\n            id: \"dashboard.traders\",\n            to: \"/dashboard/connectedTraders\",\n          },\n        ],\n      };\n    case \"copyTraders\":\n      return {\n        id: \"menu.copytraders\",\n        subtitleId: \"copyt.subtitle\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"srv.marketplace\",\n            to: \"/copyTraders\",\n          },\n          {\n            id: \"srv.myservices\",\n            to: \"/copyTraders/my\",\n          },\n        ],\n      };\n    case \"profitSharing\":\n      return {\n        id: \"menu.profitSharing\",\n        subtitleId: \"profit.subtitle\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"srv.marketplace\",\n            to: \"/profitSharing\",\n          },\n          {\n            id: \"srv.myservices\",\n            to: \"/profitSharing/my\",\n          },\n        ],\n      };\n    case \"signalProviders\":\n      return {\n        id: \"menu.signalproviders\",\n        subtitleId: \"signalp.subtitle\",\n        subtitle2Id: \"signalp.subtitle2\",\n        links: [\n          {\n            id: \"srv.marketplace\",\n            to: \"/signalProviders\",\n          },\n          {\n            id: \"srv.myservices\",\n            to: \"/signalProviders/my\",\n          },\n        ],\n      };\n    case \"copyTrader\":\n      return {\n        id: \"\",\n        subtitleId: \"\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"srv.profile\",\n            to: \"/copyTrader\",\n          },\n          {\n            id: \"srv.analytics\",\n            to: \"/copyTrader/analytics\",\n          },\n          {\n            id: \"srv.positions\",\n            to: \"/copyTrader/positions\",\n          },\n        ],\n      };\n    case \"signalProvider\":\n      return {\n        id: \"\",\n        subtitleId: \"\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"srv.profile\",\n            to: \"/signalProvider/positions\",\n          },\n          {\n            id: \"srv.analytics\",\n            to: \"/signalProvider/positions\",\n          },\n          {\n            id: \"srv.positions\",\n            to: \"/signalProvider/positions\",\n          },\n        ],\n      };\n    default:\n      return {\n        id: \"dashboard\",\n        subtitleId: \"\",\n        subtitle2Id: \"\",\n        links: [\n          {\n            id: \"dashboard.positions\",\n            to: \"/dashboard\",\n          },\n          {\n            id: \"dashboard.balance\",\n            to: \"/dashboard/balance\",\n          },\n          {\n            id: \"dashboard.traders\",\n            to: \"/dashboard/connectedTraders\",\n          },\n        ],\n      };\n  }\n};\n\n/**\n * Map path to section navigation object.\n *\n * @param {String} providerId Id of the opened copyTrader.\n * @param {DefaultProviderGetObject} provider Path to map section links for.\n * @returns {SectionNavigation} A section navigation object.\n */\nexport const createTraderRoutes = (providerId, provider) => {\n  if (providerId) {\n    let data = {\n      id: \"providerProfile\",\n      subtitleId: \"\",\n      subtitle2Id: \"\",\n      links: [\n        {\n          id: \"srv.profile\",\n          to: `/copyTraders/${provider.id}`,\n        },\n        {\n          id: \"srv.analytics\",\n          to: `/copyTraders/${provider.id}/analytics`,\n        },\n        {\n          id: \"srv.positions\",\n          to: `/copyTraders/${provider.id}/positions`,\n        },\n      ],\n    };\n\n    data.links.push({\n      id: \"srv.newsfeed\",\n      to: `/copyTraders/${provider.id}/feed`,\n    });\n\n    if (provider.isAdmin) {\n      if (!provider.isClone) {\n        data.links.push({\n          id: \"srv.edit\",\n          to: `/copyTraders/${provider.id}/edit`,\n        });\n        data.links.push({\n          id: \"srv.users\",\n          to: `/copyTraders/${provider.id}/users`,\n        });\n        data.links.push({\n          id: \"srv.management\",\n          to: `/copyTraders/${provider.id}/management`,\n        });\n      }\n    }\n    return data;\n  }\n  return {\n    id: \"providerProfile\",\n    subtitleId: \"\",\n    subtitle2Id: \"\",\n    links: [\n      {\n        id: \"srv.profile\",\n        to: `/copyTraders/${provider.id}`,\n      },\n      {\n        id: \"srv.analytics\",\n        to: `/copyTraders/${provider.id}/analytics`,\n      },\n      {\n        id: \"srv.positions\",\n        to: `/copyTraders/${provider.id}/positions`,\n      },\n    ],\n  };\n};\n\n/**\n * Map path to section navigation object.\n *\n * @param {String} providerId Id of the opened copyTrader.\n * @param {DefaultProviderGetObject} provider Path to map section links for.\n * @returns {SectionNavigation} A section navigation object.\n */\nexport const createProfitSharingRoutes = (providerId, provider) => {\n  if (providerId) {\n    let data = {\n      id: \"providerProfile\",\n      subtitleId: \"\",\n      subtitle2Id: \"\",\n      links: [\n        {\n          id: \"srv.profile\",\n          to: `/profitSharing/${provider.id}`,\n        },\n        {\n          id: \"srv.analytics\",\n          to: `/profitSharing/${provider.id}/analytics`,\n        },\n        {\n          id: \"srv.positions\",\n          to: `/profitSharing/${provider.id}/positions`,\n        },\n      ],\n    };\n\n    data.links.push({\n      id: \"srv.newsfeed\",\n      to: `/profitSharing/${provider.id}/feed`,\n    });\n\n    if (provider.isAdmin) {\n      if (!provider.isClone) {\n        data.links.push({\n          id: \"srv.edit\",\n          to: `/profitSharing/${provider.id}/edit`,\n        });\n        data.links.push({\n          id: \"srv.users\",\n          to: `/profitSharing/${provider.id}/users`,\n        });\n        data.links.push({\n          id: \"srv.management\",\n          to: `/profitSharing/${provider.id}/management`,\n        });\n      }\n    }\n    return data;\n  }\n  return {\n    id: \"providerProfile\",\n    subtitleId: \"\",\n    subtitle2Id: \"\",\n    links: [\n      {\n        id: \"srv.profile\",\n        to: `/profitSharing/${provider.id}`,\n      },\n      {\n        id: \"srv.analytics\",\n        to: `/profitSharing/${provider.id}/analytics`,\n      },\n      {\n        id: \"srv.positions\",\n        to: `/profitSharing/${provider.id}/positions`,\n      },\n    ],\n  };\n};\n\n/**\n * Map path to section navigation object.\n *\n * @param {String} providerId ID of the opened signalProvider.\n * @param {DefaultProviderGetObject} provider Provider entity.\n * @param {ExchangeConnectionEntity} selectedExchange Selected exchange account.\n * @returns {SectionNavigation} A section navigation object.\n */\nexport const createProviderRoutes = (providerId, provider, selectedExchange) => {\n  if (providerId) {\n    let data = {\n      id: \"providerProfile\",\n      subtitleId: \"\",\n      subtitle2Id: \"\",\n      links: [\n        {\n          id: \"srv.profile\",\n          to: `/signalProviders/${provider.id}`,\n        },\n        {\n          id: \"srv.analytics\",\n          to: `/signalProviders/${provider.id}/analytics`,\n        },\n      ],\n    };\n\n    if (!provider.isClone) {\n      data.links.push({\n        id: \"srv.newsfeed\",\n        to: `/signalProviders/${provider.id}/feed`,\n      });\n    }\n\n    if (!provider.disable && provider.exchangeInternalId === selectedExchange.internalId) {\n      data.links.push({\n        id: \"srv.settings\",\n        to: `/signalProviders/${provider.id}/settings`,\n      });\n    }\n\n    if (provider.isAdmin) {\n      if (!provider.isClone) {\n        data.links.push({\n          id: \"srv.edit\",\n          to: `/signalProviders/${provider.id}/edit`,\n        });\n        data.links.push({\n          id: \"srv.users\",\n          to: `/signalProviders/${provider.id}/users`,\n        });\n      }\n    }\n    return data;\n  }\n\n  return {\n    id: \"providerProfile\",\n    subtitleId: \"\",\n    subtitle2Id: \"\",\n    links: [\n      {\n        id: \"srv.profile\",\n        to: `/signalProviders/${provider.id}`,\n      },\n      {\n        id: \"srv.analytics\",\n        to: `/signalProviders/${provider.id}/analytics`,\n      },\n      {\n        id: \"srv.settings\",\n        to: `/signalProviders/${provider.id}/settings`,\n      },\n    ],\n  };\n};\n"],"names":["_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","checked","onChange","Box","alignItems","className","display","flexDirection","Checkbox","inputProps","id","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","bases","base","balance","onClose","onRefreshCoins","balanceData","availableBalance","parseFloat","loading","setLoading","quotes","setQuotes","useForm","mode","handleSubmit","control","errors","isValid","formState","setValue","watch","trigger","selectedBase","selectedQuote","amount","previewLoading","setPreviewLoading","previewConversion","setPreviewConversion","selectedExchange","useSelectedExchange","dispatch","useDispatch","intl","useIntl","debouncedAmount","useDebounce","tradeApi","internalExchangeId","internalId","then","response","sort","a","b","localeCompare","includes","isFilled","loadPreview","catch","e","showErrorAlert","from","to","qty","finally","flex","padding","Typography","align","variant","onSubmit","showSuccessAlert","style","width","mt","defaultValue","name","render","CustomSelect","label","formatMessage","labelPlacement","options","placeholder","search","my","rules","required","AmountControl","setBalanceMax","coin","minAmount","min","decimals","height","justifyContent","CircularProgress","estimatedAmount","displayType","suffix","CustomButton","type","disabled","title","persistKey","list","convertCoin","setConvertCoin","coinsOptions","filter","c","balanceFree","map","columns","customBodyRender","formatFloat","exchangeName","toLowerCase","exchangeType","push","find","onClick","minWidth","Modal","size","state","Table","data","sortOrder","direction","path","links","routesMapping","connectedProviders","useContext","PrivateAreaContext","p","exchangeInternalId","length","item","internalName","paperTrading","isTestnet","areKeysValid","Tooltip","placement","Link","LinkOff","SubNavHeader","exchanges","useExchangeList","navigateReach","getExchangeNamesCombined","index","enabled","ExchangeIcon","exchange","key","Component","WrapperComponent","props","storeUser","useStoreUserSelector","exchangeConnections","useStoreUserExchangeConnections","loaded","FAQ","color","displayName","getDisplayName","Date","date","getTime","renderPercentage","val","formatNumber","viewColumns","quote","obj","dynamicColumns","i","dailyBalance","balances","setList","embedFilter","EquityFilter","SpotHistoryTable","updatedAt","assets","setAssets","payload","filteredCoins","setFilteredCoins","setUpdatedAt","useUserExchangeAssets","coins","Object","values","filterChecked","setFilterChecked","filterCoins","balanceTotalUSDT","CoinsFilter","target","CoinsTable","refreshBalance","force","getDailyUserBalance","Sync","tabValue","setTabValue","tabsList","bgcolor","TabsMenu","changeTab","event","tabs","withDashboardLayout","useStoreUserDailyBalance","useBalance","balanceLoading","Helmet","flexWrap","TotalEquity","modal","ProfitLossAnalysis","CryptoComposition","WrappedComponent","split","subtitleId","subtitle2Id","createTraderRoutes","providerId","provider","isAdmin","isClone","createProfitSharingRoutes","createProviderRoutes","disable"],"sourceRoot":""}