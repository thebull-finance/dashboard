{"version":3,"file":"component---src-pages-signup-index-js-68d92845c84e2584457e.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Forms/SignupForm/SignupForm.js","webpack://zignaly-webapp/./src/utils/defaultConfigs.js","webpack://zignaly-webapp/./src/pages/signup/index.js"],"sourcesContent":["// @ts-nocheck\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./SignupForm.scss\";\nimport { Box, TextField, Checkbox } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Passwords from \"../../Passwords\";\nimport { projectId } from \"../../../utils/defaultConfigs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport useHasMounted from \"../../../hooks/useHasMounted\";\nimport { emailRegex } from \"utils/validators\";\nimport useStoreSettingsSelector from \"hooks/useStoreSettingsSelector\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\nimport CaptchaTerms from \"components/Captcha/CaptchaTerms\";\n// import Captcha from \"../../Captcha\";\nimport { showErrorAlert } from \"store/actions/ui\";\nimport tradeApi from \"services/tradeApiClient\";\nimport { startTradeApiSession } from \"store/actions/session\";\nimport Modal from \"../../Modal\";\nimport VerifyEmailForm from \"../VerifyEmailForm\";\nimport { setUserId } from \"store/actions/user\";\n\n//import { connect } from \"../../../store/blockchain/blockchainActions\";\n//import { fetchData } from \"../../../store/data/dataActions\";\n\nconst SignupForm = () => {\n  const [loading, setLoading] = useState(false);\n  const { locale } = useStoreSettingsSelector();\n  const [ref] = useState(\"\");\n  const formMethods = useForm();\n  const { errors, handleSubmit, register, clearErrors, control } = formMethods;\n  const dispatch = useDispatch();\n  const hasMounted = useHasMounted();\n  const intl = useIntl();\n  const { executeRecaptcha } = useGoogleReCaptcha();\n  const captchaFallback = useRef(null);\n  const isCheckly =\n    typeof window !== \"undefined\" && window.navigator.userAgent.toLowerCase().includes(\"checkly\");\n  const [loginResponse, setLoginResponse] = useState(null);\n\n  ////////////////////////////////////\n  // const blockchain = useSelector((state) => state.blockchain);\n  // const data = useSelector((state) => state.data);\n  // const [claimingNft, setClaimingNft] = useState(false);\n  // const [feedback, setFeedback] = useState(`Click buy to mint your NFT.`);\n  // const [mintAmount, setMintAmount] = useState(1);\n  // const [CONFIG, SET_CONFIG] = useState({\n  //   CONTRACT_ADDRESS: \"0x77ba7ad358f7251feac94e105e3adf64053e80e9\",\n  //   SCAN_LINK: \"https://bscscan.com/token/0x77ba7ad358f7251feac94e105e3adf64053e80e9#balances\",\n  //   NETWORK: {\n  //     NAME: \"Binance Smart Chain\",\n  //     SYMBOL: \"BNB\",\n  //     ID: 56,\n  //   },\n  //   NFT_NAME: \"Zeon land\",\n  //   SYMBOL: \"LAND\",\n  //   MAX_SUPPLY: 3000,\n  //   WEI_COST: 1000000000000000000,\n  //   DISPLAY_COST: 1,\n  //   GAS_LIMIT: 90000,\n  //   MARKETPLACE: \"OpenSea\",\n  //   MARKETPLACE_LINK: \"https://zeon.world\",\n  //   SHOW_BACKGROUND: true,\n  // });\n  // const claimNFTs = () => {\n  //   let cost = CONFIG.WEI_COST;\n  //   let gasLimit = CONFIG.GAS_LIMIT;\n  //   let totalCostWei = String(cost * mintAmount);\n  //   let totalGasLimit = String(gasLimit * mintAmount);\n  //   console.log(\"Cost: \", totalCostWei);\n  //   console.log(\"Gas limit: \", totalGasLimit);\n  //   setFeedback(`Minting your ${CONFIG.NFT_NAME}...`);\n  //   setClaimingNft(true);\n  //   blockchain.smartContract.methods\n  //     .mint(mintAmount)\n  //     .send({\n  //       gasLimit: String(totalGasLimit),\n  //       to: CONFIG.CONTRACT_ADDRESS,\n  //       from: blockchain.account,\n  //       value: totalCostWei,\n  //     })\n  //     .once(\"error\", (err) => {\n  //       console.log(err);\n  //       setFeedback(\"Sorry, something went wrong please try again later.\");\n  //       setClaimingNft(false);\n  //     })\n  //     .then((receipt) => {\n  //       console.log(receipt);\n  //       setFeedback(\n  //         `WOW, the ${CONFIG.NFT_NAME} is yours! go visit Opensea.io to view it.`\n  //       );\n  //       setClaimingNft(false);\n  //       dispatch(fetchData(blockchain.account));\n  //     });\n  // };\n\n  // const getData = () => {\n  //   if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n  //     dispatch(fetchData(blockchain.account));\n  //   }\n  // };\n\n  // const getConfig = async () => {\n  //   const configResponse = await fetch(\"/config/config.json\", {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   });\n  //   const config = await configResponse.json();\n  //   SET_CONFIG(config);\n  // };\n\n  // useEffect(() => {\n  //   getConfig();\n  // }, []);\n\n  // useEffect(() => {\n  //   getData();\n  // }, [blockchain.account]);\n\n  ////////////////////////////////////\n\n  if (!hasMounted) {\n    // Don't render form statically\n    return null;\n  }\n\n  /**\n   *\n   * @typedef {Object} DataObject\n   * @property {String} password\n   * @property {String} repeatPassword\n   * @property {String} firstName\n   * @property {String} email\n   * @property {Boolean} subscribe\n   * @property {Boolean} terms\n   * @property {string} [gRecaptchaResponse] Captcha token fallback\n   */\n\n  /**\n   *\n   * @param {DataObject} data Data object received byt submitting the form.\n   * @returns {Promise<void>} None.\n   */\n  const onSubmit = async (data) => {\n    setLoading(true);\n    let gRecaptchaResponse = data.gRecaptchaResponse || \"\";\n    let c = 2;\n    if (!isCheckly && process.env.NODE_ENV === \"production\" && !gRecaptchaResponse) {\n      gRecaptchaResponse = await executeRecaptcha(\"signup\");\n      c = 3;\n    }\n    const payload = {\n      projectId: projectId,\n      firstName: data.firstName,\n      email: data.email,\n      password: data.password,\n      subscribe: data.subscribe,\n      ref: ref,\n      array: true,\n      terms: data.terms,\n      locale,\n      gRecaptchaResponse,\n      c,\n    };\n\n    tradeApi\n      .userRegister(payload)\n      .then((response) => {\n        // Store userId for tracking purposes\n        dispatch(setUserId(response.userId));\n        // Store login response and show verification modal\n        setLoginResponse(response);\n        captchaFallback.current = null;\n      })\n      .catch((e) => {\n        // if (e.code === 76) {\n        //   // Use old captcha as fallback\n        //   captchaFallback.current = (/** @type {string} */ captcha) =>\n        //     onSubmit({ ...data, gRecaptchaResponse: captcha });\n        // } else {\n        dispatch(showErrorAlert(e));\n        // }\n        setLoading(false);\n      });\n  };\n\n  const onVerified = () => {\n    dispatch(startTradeApiSession(loginResponse, \"signup\"));\n  };\n\n  return (\n    <>\n      <form method=\"post\" noValidate onSubmit={handleSubmit(onSubmit)}>\n        {/* <Captcha onSuccess={captchaFallback.current} /> */}\n        <Modal\n          onClose={() => {}}\n          persist={true}\n          showCloseIcon={false}\n          size=\"small\"\n          state={Boolean(loginResponse)}\n        >\n          <VerifyEmailForm onComplete={onVerified} token={loginResponse?.token} />\n        </Modal>\n        <Box\n          alignItems=\"center\"\n          className=\"signupForm\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n        >\n          <Box\n            alignItems=\"start\"\n            className=\"inputBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"start\"\n          >\n            <label className=\"customLabel\">\n              <FormattedMessage id=\"security.name\" />\n            </label>\n            <TextField\n              className=\"customInput\"\n              error={!!errors.firstName}\n              fullWidth\n              inputRef={register({\n                required: intl.formatMessage({ id: \"form.error.firstname\" }),\n                minLength: {\n                  value: 3,\n                  message: intl.formatMessage({ id: \"form.error.firstname.length\" }),\n                },\n                maxLength: {\n                  value: 20,\n                  message: intl.formatMessage({ id: \"form.error.firstname.maxlength\" }),\n                },\n              })}\n              name=\"firstName\"\n              type=\"text\"\n              variant=\"outlined\"\n            />\n            {errors.firstName && <span className=\"errorText\">{errors.firstName.message}</span>}\n          </Box>\n          <Box\n            alignItems=\"start\"\n            className=\"inputBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"start\"\n          >\n            <label className=\"customLabel\">\n              <FormattedMessage id=\"security.email\" />\n            </label>\n            <TextField\n              className=\"customInput\"\n              error={!!errors.email}\n              fullWidth\n              inputRef={register({\n                required: intl.formatMessage({ id: \"security.email.error.empty\" }),\n                pattern: {\n                  value: emailRegex,\n                  message: intl.formatMessage({ id: \"security.email.error.invalid\" }),\n                },\n              })}\n              name=\"email\"\n              type=\"email\"\n              variant=\"outlined\"\n            />\n            {errors.email && <span className=\"errorText\">{errors.email.message}</span>}\n          </Box>\n\n          <Passwords edit={false} formMethods={formMethods} />\n\n          <Box className=\"inputBox checkbox\">\n            <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\" justifyContent=\"start\">\n              <Checkbox\n                className=\"checkboxInput\"\n                defaultChecked={true}\n                inputRef={register({ required: true })}\n                name=\"terms\"\n                onChange={() => clearErrors(\"terms\")}\n              />\n              <Box\n                className={\"termsBox \" + (errors.terms ? \" error\" : \"\")}\n                display=\"flex\"\n                flexDirection=\"row\"\n                flexWrap=\"wrap\"\n                justifyContent=\"start\"\n              >\n                <FormattedMessage\n                  id=\"signup.agreement\"\n                  values={{\n                    terms: (\n                      <a\n                        className=\"link\"\n                        href=\"https://zignaly.com/legal/terms\"\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                      >\n                        <FormattedMessage id=\"signup.terms\" />\n                      </a>\n                    ),\n                    privacy: (\n                      <a\n                        className=\"link\"\n                        href=\"https://zignaly.com/legal/privacy\"\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                      >\n                        <FormattedMessage id=\"signup.privacy\" />\n                      </a>\n                    ),\n                  }}\n                />\n              </Box>\n            </Box>\n          </Box>\n\n          <Box className=\"inputBox checkbox\">\n            <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\" justifyContent=\"start\">\n              <Controller\n                control={control}\n                defaultValue={true}\n                name=\"subscribe\"\n                render={({ onChange, value }) => (\n                  <Checkbox\n                    checked={value}\n                    className=\"checkboxInput\"\n                    onChange={(e) => onChange(e.target.checked)}\n                  />\n                )}\n              />\n              <span className=\"termsText\">Subscribe to notifications</span>\n            </Box>\n          </Box>\n\n          <Box className=\"inputBox buttonBox\">\n            <CustomButton className={\"full submitButton\"} loading={loading} type=\"submit\">\n             Connect to Metamask\n            </CustomButton>\n          </Box>\n        </Box>\n      </form>\n      {/* <>\n      {blockchain.account === \"\" ||\n        blockchain.smartContract === null ? (\n        <>\n          <button\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n              getData();\n            }}\n          >\n            CONNECT\n          </button>\n          {blockchain.errorMsg !== \"\" ? (\n            <>\n              {blockchain.errorMsg}\n            </>\n          ) : null}\n        </>\n      ) : (\n        <>\n          <button\n            disabled={claimingNft ? true : false}\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs();\n              getData();\n            }}\n          >\n            {claimingNft ? \"BUSY\" : \"BUY\"}\n          </button>\n        </>\n      )}\n    </> */}\n      <CaptchaTerms />\n    </>\n  );\n};\n\nexport default SignupForm;\n","export const projectId = \"z01\";\n","import React from \"react\";\nimport \"./signup.scss\";\nimport LoginTabs from \"../../components/Login/LoginTabs\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport SignupForm from \"../../components/Forms/SignupForm\";\nimport useRedirectUponSessionValid from \"../../hooks/useRedirectUponSessionValid\";\nimport Login from \"../../components/Login/Login\";\nimport useHasMounted from \"hooks/useHasMounted\";\n\nconst SignupPage = () => {\n  const intl = useIntl();\n  useRedirectUponSessionValid(\"/profitSharing\");\n\n  const hasMounted = useHasMounted();\n  if (!hasMounted) {\n    // Don't render statically due to split test\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({\n            id: \"action.signup\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Login>\n        <LoginTabs>\n          <SignupForm />\n        </LoginTabs>\n      </Login>\n    </>\n  );\n};\n\nexport default SignupPage;\n"],"names":["useState","loading","setLoading","locale","useStoreSettingsSelector","ref","formMethods","useForm","errors","handleSubmit","register","clearErrors","control","dispatch","useDispatch","hasMounted","useHasMounted","intl","useIntl","executeRecaptcha","useGoogleReCaptcha","captchaFallback","useRef","isCheckly","window","navigator","userAgent","toLowerCase","includes","loginResponse","setLoginResponse","onSubmit","data","gRecaptchaResponse","c","payload","projectId","firstName","email","password","subscribe","array","terms","tradeApi","then","response","setUserId","userId","current","catch","e","showErrorAlert","method","noValidate","Modal","onClose","persist","showCloseIcon","size","state","Boolean","VerifyEmailForm","onComplete","startTradeApiSession","token","Box","alignItems","className","display","flexDirection","justifyContent","id","TextField","error","fullWidth","inputRef","required","formatMessage","minLength","value","message","maxLength","name","type","variant","pattern","emailRegex","Passwords","edit","Checkbox","defaultChecked","onChange","flexWrap","values","href","rel","target","privacy","defaultValue","render","checked","CustomButton","CaptchaTerms","useRedirectUponSessionValid","Helmet","Login","LoginTabs"],"sourceRoot":""}