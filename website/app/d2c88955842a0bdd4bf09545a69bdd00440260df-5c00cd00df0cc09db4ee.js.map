{"version":3,"file":"d2c88955842a0bdd4bf09545a69bdd00440260df-5c00cd00df0cc09db4ee.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ToggleInput/ToggleInput.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ToggleDoubleInput/ToggleDoubleInput.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/SelectInput/SelectInput.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/TargetFields/TargetFields.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ToggleTargetFields/ToggleTargetFields.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ToggleTextarea/ToggleTextarea.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ToggleRadioInput/ToggleRadioInput.js","webpack://zignaly-webapp/./src/components/Forms/ProviderSettingsForm/ProviderSettingsForm.js","webpack://zignaly-webapp/./src/components/Provider/Settings/NoSettingsView/NoSettingsView.js","webpack://zignaly-webapp/./src/pages/signalProviders/settings/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ToggleInput.scss\";\nimport { Box, Typography, TextField, Tooltip, Switch, InputAdornment } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport useStoreSettingsSelector from \"../../../../hooks/useStoreSettingsSelector\";\n\n/**\n * @typedef {import('react-hook-form').UseFormMethods<Record<string, any>>} FormMethods\n * @typedef {Object} DefaultProps\n * @property {FormMethods} formMethods\n * @property {String} label\n * @property {String|Number} value\n * @property {String} name\n * @property {String} tooltip\n * @property {String} unit\n */\n\n/**\n * Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ToggleInput = ({ formMethods, value, label, name, tooltip, unit }) => {\n  const storeSettings = useStoreSettingsSelector();\n  const [toggle, setToggle] = useState(!!value);\n  const [val, setVal] = useState(value ? value : \"\");\n  const { register } = formMethods;\n\n  const initData = () => {\n    setToggle(!!value);\n  };\n\n  useEffect(initData, [value]);\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change event.\n   * @returns {Void} None.\n   */\n  const handleChange = (e) => {\n    let targetValue = e.target.value;\n    if (name === \"stopLoss\") {\n      if (\n        targetValue.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) ||\n        targetValue === \"\" ||\n        targetValue.includes(\"-\")\n      ) {\n        targetValue = targetValue.replace(\",\", \".\");\n        setVal(Math.sign(targetValue) === 1 ? targetValue * -1 : targetValue);\n      }\n    } else if (name === \"maxPositions\" || name === \"positionsPerMarket\" || name === \"leverage\") {\n      if (targetValue.match(/^\\d+$/) || targetValue === \"\") {\n        setVal(targetValue);\n      }\n    } else if (\n      targetValue.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) ||\n      targetValue === \"\" ||\n      targetValue.includes(\"-\")\n    ) {\n      targetValue = targetValue.replace(\",\", \".\");\n      setVal(targetValue);\n    }\n  };\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"toggleInput\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">\n          <FormattedMessage id={label} />\n        </label>\n        <Tooltip\n          placement=\"top\"\n          title={\n            <Typography variant=\"h5\">\n              <FormattedMessage id={tooltip} />\n            </Typography>\n          }\n        >\n          <HelpIcon className=\"icon\" />\n        </Tooltip>\n        <Switch checked={toggle} onChange={(e) => setToggle(e.target.checked)} />\n      </Box>\n\n      {toggle && (\n        <Box className=\"fieldInputBox\" display=\"flex\" flexDirection=\"row\">\n          <TextField\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">{unit}</InputAdornment>,\n            }}\n            className={\"customInput \" + (storeSettings.darkStyle ? \" dark \" : \" light \")}\n            fullWidth\n            inputRef={register}\n            name={name}\n            onChange={handleChange}\n            type=\"text\"\n            value={val}\n            variant=\"outlined\"\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ToggleInput;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ToggleDoubleInput.scss\";\nimport { Box, Typography, TextField, Tooltip, Switch, InputAdornment } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport useStoreSettingsSelector from \"../../../../hooks/useStoreSettingsSelector\";\n\n/**\n *\n * @typedef {import('react-hook-form').UseFormMethods<Record<string, any>>} FormMethods\n * @typedef {Object} DefaultProps\n * @property {FormMethods} formMethods\n * @property {String} label\n * @property {String|Number} value1\n * @property {String} name1\n * @property {String|Number} value2\n * @property {String} name2\n * @property {String} tooltip\n * @property {String} unitLeft1\n * @property {String} unitLeft2\n * @property {String} unitRight1\n * @property {String} unitRight2\n */\n\n/**\n * Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ToggleInput = ({\n  value1,\n  value2,\n  formMethods,\n  label,\n  name1,\n  name2,\n  tooltip,\n  unitLeft1,\n  unitLeft2,\n  unitRight1,\n  unitRight2,\n}) => {\n  const storeSettings = useStoreSettingsSelector();\n  const [toggle, setToggle] = useState(!!(value1 || value2));\n  const [data1, setData1] = useState(value1 ? value1 : \"\");\n  const [data2, setData2] = useState(value2 ? value2 : \"\");\n  const { register } = formMethods;\n\n  const initData = () => {\n    setToggle(!!(value1 || value2));\n  };\n\n  useEffect(initData, [value1, value2]);\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change event.\n   * @returns {void} None.\n   */\n  const handleData1Change = (e) => {\n    let targetValue = e.target.value;\n    if (\n      targetValue.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) ||\n      targetValue === \"\" ||\n      targetValue.includes(\"-\")\n    ) {\n      targetValue = targetValue.replace(\",\", \".\");\n      setData1(Math.sign(targetValue) === -1 ? targetValue * -1 : targetValue);\n    }\n  };\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change event.\n   * @returns {void} None.\n   */\n  const handleData2Change = (e) => {\n    let targetValue = e.target.value;\n    if (\n      targetValue.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) ||\n      targetValue === \"\" ||\n      targetValue.includes(\"-\")\n    ) {\n      targetValue = targetValue.replace(\",\", \".\");\n      setData2(Math.sign(targetValue) === 1 ? targetValue * -1 : targetValue);\n    }\n  };\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"toggleDoubleInput\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">\n          <FormattedMessage id={label} />\n        </label>\n        <Tooltip\n          placement=\"top\"\n          title={<Typography variant=\"h5\">{<FormattedMessage id={tooltip} />}</Typography>}\n        >\n          <HelpIcon className=\"icon\" />\n        </Tooltip>\n        <Switch checked={toggle} onChange={(e) => setToggle(e.target.checked)} />\n      </Box>\n\n      {toggle && (\n        <Box className=\"multiInputBox\" display=\"flex\" flexDirection=\"column\">\n          <TextField\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">{unitLeft1}</InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{unitRight1}</InputAdornment>,\n            }}\n            className={\"customInput \" + (storeSettings.darkStyle ? \" dark \" : \" light \")}\n            fullWidth\n            inputRef={register({ max: 100 })}\n            name={name1}\n            onChange={handleData1Change}\n            type=\"text\"\n            value={data1}\n            variant=\"outlined\"\n          />\n          <TextField\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">{unitLeft2}</InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{unitRight2}</InputAdornment>,\n            }}\n            className={\"customInput \" + (storeSettings.darkStyle ? \" dark \" : \" light \")}\n            fullWidth\n            inputRef={register({ max: 100 })}\n            name={name2}\n            onChange={handleData2Change}\n            type=\"text\"\n            value={data2}\n            variant=\"outlined\"\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ToggleInput;\n","import React, { useState } from \"react\";\nimport \"./SelectInput.scss\";\nimport { Box, Typography, TextField, Select, MenuItem, Tooltip } from \"@material-ui/core\";\nimport { Controller } from \"react-hook-form\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport useStoreSettingsSelector from \"../../../../hooks/useStoreSettingsSelector\";\n\n/**\n *\n * @typedef {import('react-hook-form').UseFormMethods<Record<string, any>>} FormMethods\n * @typedef {Object} DefaultProps\n * @property {FormMethods} formMethods\n * @property {JSX.Element} label\n * @property {String} value1\n * @property {String} value2\n * @property {String} name1\n * @property {String} name2\n * @property {JSX.Element} tooltip\n */\n\n/**\n * Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst SelectInput = ({ value1, value2, formMethods, label, name1, name2, tooltip }) => {\n  const storeSettings = useStoreSettingsSelector();\n  const [val1, setVal1] = useState(value1 ? value1.toString().replace(\",\", \".\") : \"\");\n  const { control, register } = formMethods;\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change event.\n   * @returns {Void} None.\n   */\n  const handleChange1 = (e) => {\n    let data = e.target.value;\n    if (data.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) || data === \"\") {\n      data = data.replace(\",\", \".\");\n      setVal1(data);\n    }\n  };\n\n  return (\n    <Box alignItems=\"center\" className=\"selectInputBox\" display=\"flex\" flexDirection=\"row\">\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">{label}</label>\n        <Tooltip placement=\"top\" title={<Typography variant=\"h5\">{tooltip}</Typography>}>\n          <HelpIcon className=\"icon\" />\n        </Tooltip>\n      </Box>\n\n      <Box className=\"fieldInputBox\" display=\"flex\" flexDirection=\"row\">\n        <TextField\n          className={\"customInput \" + (storeSettings.darkStyle ? \" dark \" : \" light \")}\n          fullWidth\n          inputRef={register}\n          name={name1}\n          onChange={handleChange1}\n          type=\"text\"\n          value={val1}\n          variant=\"outlined\"\n        />\n\n        <Controller\n          as={\n            <Select className=\"selectInput\" variant=\"outlined\">\n              <MenuItem value=\"#\">#</MenuItem>\n              <MenuItem value=\"%\">%</MenuItem>\n            </Select>\n          }\n          control={control}\n          defaultValue={value2}\n          name={name2}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default SelectInput;\n","import React, { useState, useEffect } from \"react\";\nimport \"./TargetFields.scss\";\nimport { Box, TextField, InputAdornment } from \"@material-ui/core\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\n\n/**\n * @typedef {Object} TargetObject\n * @property {Number} targetId\n * @property {String} amountPercentage\n * @property {String} priceTargetPercentage\n * @property {Number} amountError\n * @property {Boolean} priceError\n * @property {Boolean} delete\n */\n\n/**\n * Target Fields component to add dynamic fields.\n *\n * @typedef {Object} DefaultProps Default props.\n * @property {Function} onChange Change event.\n * @property {Array<TargetObject>} defaultValue\n * @property {String} type\n */\n\n/**\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} Component JSX.\n */\nconst TargetFields = ({ onChange, defaultValue, type }) => {\n  /**\n   * @type {TargetObject}\n   */\n  const targetFieldObject = {\n    targetId: 1,\n    amountPercentage: \"\",\n    priceTargetPercentage: \"\",\n    amountError: 0,\n    priceError: false,\n    delete: true,\n  };\n\n  const [values, setValues] = useState([targetFieldObject]);\n\n  const initData = () => {\n    if (defaultValue && defaultValue.length) {\n      let count = 1;\n      for (let a = 0; a < defaultValue.length; a++) {\n        defaultValue[a].targetId = count;\n        defaultValue[a].delete = true;\n        defaultValue[a].priceTargetPercentage = defaultValue[a].priceTargetPercentage\n          ? defaultValue[a].priceTargetPercentage\n          : \"\";\n        defaultValue[a].amountPercentage = defaultValue[a].amountPercentage\n          ? defaultValue[a].amountPercentage\n          : \"\";\n        count++;\n      }\n      defaultValue[0].delete = false;\n      setValues(defaultValue);\n    }\n  };\n\n  useEffect(initData, [defaultValue]);\n\n  const updateParent = () => {\n    onChange(values);\n  };\n\n  /**\n   * Function to handle input changes for fields.\n   *\n   * @param {React.ChangeEvent<*>} e Change event.\n   * @param {Number|String} id ID of the dynamic field object.\n   * @returns {void} None.\n   */\n  const handleChange = (e, id) => {\n    let targetValue = e.target.value;\n    let list = [...values];\n    list = clearErrors(list);\n    let index = list.findIndex((item) => item.targetId === id);\n    let field = list.find((item) => item.targetId === id);\n    if (\n      targetValue.match(/^[0-9]\\d*(?:[.,]\\d{0,8})?$/) ||\n      targetValue === \"\" ||\n      targetValue.includes(\"-\")\n    ) {\n      targetValue = targetValue.replace(\",\", \".\");\n      if (e.target.name === \"amount\") {\n        // convert amount to positive for both dca and take profit targets.\n        field.amountPercentage = Math.sign(targetValue) === -1 ? targetValue * -1 : targetValue;\n        if (type === \"takeprofit\") {\n          let previousFieldsSum = 0;\n          list.forEach((item) => {\n            if (item.targetId !== field.targetId) {\n              previousFieldsSum += parseFloat(item.amountPercentage);\n            }\n          });\n          if (previousFieldsSum + parseFloat(field.amountPercentage) > 100) {\n            field.amountError = 100 - previousFieldsSum;\n          } else {\n            field.amountError = 0;\n          }\n        }\n      } else if (type === \"dca\") {\n        // convert value to negative for price targets of dca targets.\n        field.priceTargetPercentage = Math.sign(targetValue) === 1 ? targetValue * -1 : targetValue;\n      } else {\n        // convert value to negative for price targets of take profits targets.\n        field.priceTargetPercentage =\n          Math.sign(targetValue) === -1 ? targetValue * -1 : targetValue;\n      }\n    }\n    list[index] = field;\n    setValues(list);\n  };\n\n  const addField = () => {\n    let field = { ...targetFieldObject };\n    let list = [...values];\n    field.targetId = list.length ? list[list.length - 1].targetId + 1 : 0;\n    list.push(field);\n    setValues(list);\n  };\n\n  const removeField = () => {\n    let list = [...values];\n    list.splice(list.length - 1, 1);\n    setValues(list);\n    onChange(list);\n  };\n\n  /**\n   *\n   * @param {Array<TargetObject>} list Target object collection.\n   * @returns {Array<TargetObject>} Target object collection.\n   */\n  const clearErrors = (list) => {\n    list.forEach((item) => {\n      item.amountError = 0;\n    });\n    return list;\n  };\n\n  return (\n    <Box className=\"targetFields\">\n      {values.map((obj, index) => (\n        <Box\n          alignItems=\"center\"\n          className=\"fieldBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"space-between\"\n          key={index}\n        >\n          <TextField\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">Price Target</InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n            className=\"customInput\"\n            name=\"price\"\n            onBlur={updateParent}\n            onChange={(e) => handleChange(e, obj.targetId)}\n            type=\"text\"\n            value={obj.priceTargetPercentage}\n            variant=\"outlined\"\n          />\n\n          <TextField\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">Qty</InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n            className=\"customInput\"\n            name=\"amount\"\n            onChange={(e) => handleChange(e, obj.targetId)}\n            type=\"text\"\n            value={obj.amountPercentage}\n            variant=\"outlined\"\n          />\n          {!!obj.amountError && (\n            <span className=\"errorText\">{`Amount cannot be greater than ${obj.amountError}`}</span>\n          )}\n        </Box>\n      ))}\n      <AddCircleOutlineIcon className=\"icon add\" onClick={addField} />\n      <HighlightOffIcon className=\"icon delete\" onClick={removeField} />\n    </Box>\n  );\n};\n\nexport default TargetFields;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ToggleTargetFields.scss\";\nimport { Box, Switch } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport TargetFields from \"../TargetFields\";\n\n/**\n *\n * @typedef {Object} DefaultProps\n * @property {String} label\n * @property {Array<*>} value\n * @property {Function} onChange\n * @property {String} type\n */\n\n/**\n * Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ToggleInput = ({ value, label, onChange, type }) => {\n  const [toggle, setToggle] = useState(!!(value && value.length));\n  const [data, setData] = useState(value);\n\n  const initData = () => {\n    setToggle(!!(value && value.length));\n    setData(value);\n  };\n\n  useEffect(initData, [value]);\n\n  const clearValues = () => {\n    if (!toggle) {\n      onChange([]);\n      setData([]);\n    }\n  };\n\n  useEffect(clearValues, [toggle]);\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"toggleTargetFields\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">\n          <FormattedMessage id={label} />\n        </label>\n        <Switch checked={toggle} onChange={(e) => setToggle(e.target.checked)} />\n      </Box>\n\n      {toggle && <TargetFields defaultValue={data} onChange={onChange} type={type} />}\n    </Box>\n  );\n};\n\nexport default ToggleInput;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ToggleTextarea.scss\";\nimport { Box, Typography, TextField, Tooltip, Switch } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Controller } from \"react-hook-form\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport useStoreSettingsSelector from \"../../../../hooks/useStoreSettingsSelector\";\n\n/**\n *\n * @typedef {import('react-hook-form').UseFormMethods<Record<string, any>>} FormMethods\n * @typedef {Object} DefaultProps\n * @property {FormMethods} formMethods\n * @property {String} label\n * @property {String|Number|Boolean} value\n * @property {String} name\n * @property {String} tooltip\n */\n\n/**\n * Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ToggleTextarea = ({ value, formMethods, label, name, tooltip }) => {\n  const storeSettings = useStoreSettingsSelector();\n  const [toggle, setToggle] = useState(!!value);\n  const { control } = formMethods;\n\n  const initData = () => {\n    setToggle(!!value);\n  };\n\n  useEffect(initData, [value]);\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"toggleTextarea\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">\n          <FormattedMessage id={label} />\n        </label>\n        <Tooltip\n          placement=\"top\"\n          title={\n            <Typography variant=\"h5\">\n              <FormattedMessage id={tooltip} />\n            </Typography>\n          }\n        >\n          <HelpIcon className=\"icon\" />\n        </Tooltip>\n        <Switch checked={toggle} onChange={(e) => setToggle(e.target.checked)} />\n      </Box>\n\n      {toggle && (\n        <Box className=\"fieldInputBox\" display=\"flex\" flexDirection=\"row\">\n          <Controller\n            as={\n              <TextField\n                className={\"customTextarea \" + (storeSettings.darkStyle ? \" dark \" : \" light \")}\n                fullWidth\n                multiline\n                rows={5}\n                variant=\"outlined\"\n              />\n            }\n            control={control}\n            defaultValue={value ? value : \"\"}\n            name={name}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ToggleTextarea;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ToggleRadioInput.scss\";\nimport {\n  Box,\n  Typography,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Tooltip,\n  Switch,\n} from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\n/**\n * @typedef {Object} OptionType\n * @property {string} label Option label.\n * @property {string|number} value Option value.\n */\n\n/**\n * @typedef {import('react-hook-form').UseFormMethods<Record<string, any>>} FormMethods\n * @typedef {Object} DefaultProps\n * @property {FormMethods} formMethods\n * @property {String} label\n * @property {String|Number} value\n * @property {String} name\n * @property {String} tooltip\n * @property {Array<OptionType>} options\n */\n\n/**\n * Radio Input toggle component.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ToggleRadioInput = ({ formMethods, value, label, name, tooltip, options }) => {\n  const [toggle, setToggle] = useState(!!value);\n  const { register } = formMethods;\n\n  const initData = () => {\n    setToggle(!!value);\n  };\n\n  useEffect(initData, [value]);\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"toggleInput\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"labelBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <label className=\"customLabel\">\n          <FormattedMessage id={label} />\n        </label>\n        <Tooltip\n          placement=\"top\"\n          title={\n            <Typography variant=\"h5\">\n              <FormattedMessage id={tooltip} />\n            </Typography>\n          }\n        >\n          <HelpIcon className=\"icon\" />\n        </Tooltip>\n        <Switch checked={toggle} onChange={(e) => setToggle(e.target.checked)} />\n      </Box>\n\n      {toggle && (\n        <Box className=\"fieldInputBox\" display=\"flex\" flexDirection=\"row\">\n          <RadioGroup className=\"radioBox\" defaultValue={value}>\n            {options &&\n              options.map((item, index) => (\n                <FormControlLabel\n                  control={<Radio />}\n                  inputRef={register}\n                  key={index}\n                  label={item.label}\n                  name={name}\n                  value={item.value}\n                />\n              ))}\n          </RadioGroup>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ToggleRadioInput;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"./ProviderSettingsForm.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../store/actions/ui\";\nimport { FormattedMessage } from \"react-intl\";\nimport ToggleInput from \"./ToggleInput\";\nimport ToggleDoubleInput from \"./ToggleDoubleInput\";\nimport ToggleSelectInput from \"./SelectInput\";\nimport ToggleTargetFields from \"./ToggleTargetFields\";\nimport { creatEmptySettingsEntity } from \"../../../services/tradeApiClient.types\";\nimport { assign } from \"lodash\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport ToggleTextarea from \"./ToggleTextarea\";\nimport ProviderContext from \"../../../context/ProviderContext\";\nimport { checkAllocated } from \"utils/helpers\";\nimport ToggleRadioInput from \"./ToggleRadioInput\";\n\n/**\n *\n * @typedef {import('../../../services/tradeApiClient.types').ProviderExchangeSettingsObject} ProviderExchangeSettingsObject\n * @typedef {import('../../../services/tradeApiClient.types').QuoteAssetsDict} QuoteAssetsDict\n */\n\n/**\n * @typedef {Object} DefaultProps\n * @property {ProviderExchangeSettingsObject} settings\n * @property {import('../../../services/tradeApiClient.types').QuoteAssetsDict} quotes\n * @property {Function} onUpdate Callback to trigger when settings have updated.\n */\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\n\nconst ProviderSettingsForm = ({ settings, quotes, onUpdate }) => {\n  const storeViews = useStoreViewsSelector();\n  const selectedExchange = useSelectedExchange();\n  const [loading, setLoading] = useState(false);\n  const [takeProfitTargets, setProfitTargets] = useState([]);\n  const [reBuyTargets, setBuyTargets] = useState([]);\n  const formMethods = useForm();\n  const { handleSubmit } = formMethods;\n  const dispatch = useDispatch();\n  const emptySettings = creatEmptySettingsEntity();\n  const { setHasAllocated } = useContext(ProviderContext);\n\n  const allowedSideOptions = [\n    { label: \"Long\", value: \"long\" },\n    { label: \"Short\", value: \"short\" },\n    { label: \"Both\", value: \"both\" },\n  ];\n\n  const initTargets = () => {\n    setProfitTargets(settings.takeProfitTargets);\n    setBuyTargets(settings.reBuyTargets);\n  };\n\n  useEffect(initTargets, [settings]);\n\n  /**\n   * Function to handle profit target changes.\n   *\n   * @param {*} data Data from fields.\n   * @returns {void} None.\n   */\n  const handleProfitTargetsChange = (data) => {\n    setProfitTargets(data);\n  };\n\n  /**\n   * Function to handle re buy target changes.\n   *\n   * @param {*} data Data from fields.\n   * @returns {void} None.\n   */\n  const handleBuyTargetsChange = (data) => {\n    setBuyTargets(data);\n  };\n\n  /**\n   * Function to generate the amount field names.\n   *\n   * @param {String} key Cuotes object key.\n   * @param {Number} [num] Conditional value.\n   * @returns {String} Label for input.\n   */\n  const getFieldName = (key, num) => {\n    if (num === 1) {\n      return \"positionSize\" + key + \"Value\";\n    }\n    if (num === 2) {\n      return \"positionSize\" + key + \"Unit\";\n    }\n\n    return \"positionSize\" + key;\n  };\n\n  /**\n   *\n   * @param {ProviderExchangeSettingsObject} data Form data.\n   * @returns {void} None.\n   */\n  const onSubmit = (data) => {\n    setLoading(true);\n    const payload = assign(emptySettings, data, {\n      takeProfitTargets: prepareProfitTargetsPayload(),\n      reBuyTargets: prepareBuyTargetsPayload(),\n      providerId: storeViews.provider.id,\n      internalExchangeId: selectedExchange.internalId,\n      exchangeId: selectedExchange.id,\n      version: 2,\n      buyTTL: data.buyTTL ? data.buyTTL * 60 : false,\n      sellByTTL: data.sellByTTL ? data.sellByTTL * 3600 : false,\n    });\n    tradeApi\n      .providerExchangeSettingsUpdate(payload)\n      .then((response) => {\n        checkAllocated(quotes, response, setHasAllocated);\n        onUpdate();\n        dispatch(showSuccessAlert(\"\", \"srv.settings.update.alert\"));\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  const prepareProfitTargetsPayload = () => {\n    if (takeProfitTargets.length) {\n      takeProfitTargets.forEach((item) => {\n        delete item.amountError;\n        delete item.priceError;\n      });\n      return takeProfitTargets;\n    }\n    return false;\n  };\n\n  const prepareBuyTargetsPayload = () => {\n    if (reBuyTargets.length) {\n      return reBuyTargets;\n    }\n    return false;\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  return (\n    <Box bgcolor=\"grid.content\" className=\"settingsFormWrapper\" flexWrap=\"wrap\">\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        <Box className=\"formBox\" display=\"flex\" flexDirection=\"row\">\n          <Box\n            alignItems=\"flex-start\"\n            className=\"amountsFormBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n          >\n            <Typography variant=\"h3\">\n              <FormattedMessage id=\"srv.settings.amounts\" />\n            </Typography>\n\n            {quotes &&\n              Object.keys(quotes).map((item, index) => (\n                <ToggleSelectInput\n                  formMethods={formMethods}\n                  key={index}\n                  label={\n                    <FormattedMessage id=\"signalp.settings.amounts\" values={{ quote: item }} />\n                  }\n                  /* @ts-ignore */\n                  name1={getFieldName(item, 1)}\n                  /* @ts-ignore */\n                  name2={getFieldName(item, 2)}\n                  tooltip={\n                    <FormattedMessage\n                      id=\"signalp.settings.amounts.help\"\n                      values={{ quote: item, notional: quotes[item].minNotional }}\n                    />\n                  }\n                  /* @ts-ignore */\n                  value1={settings[getFieldName(item, 1)]}\n                  /* @ts-ignore */\n                  value2={settings[getFieldName(item, 2)] ? settings[getFieldName(item, 2)] : \"#\"}\n                />\n              ))}\n          </Box>\n\n          <Box\n            alignItems=\"flex-start\"\n            className=\"strategyFormBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n          >\n            <Typography variant=\"h3\">\n              <FormattedMessage id=\"srv.settings.strategy\" />\n            </Typography>\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.pricedeviation.entry\"\n              name=\"priceDeviation\"\n              tooltip=\"signalp.settings.pricedeviation.entry.help\"\n              unit=\"%\"\n              value={settings.priceDeviation}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.pricedeviation.exit\"\n              name=\"sellPriceDeviation\"\n              tooltip=\"signalp.settings.pricedeviation.exit.help\"\n              unit=\"%\"\n              value={settings.sellPriceDeviation}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.entryexpiration\"\n              name=\"buyTTL\"\n              tooltip=\"signalp.settings.entryexpiration.help\"\n              unit=\"Min\"\n              value={settings.buyTTL}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.timeautoclose\"\n              name=\"sellByTTL\"\n              tooltip=\"signalp.settings.timeautoclose.help\"\n              unit=\"Hours\"\n              value={settings.sellByTTL}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.stoploss\"\n              name=\"stopLoss\"\n              tooltip=\"signalp.settings.stoploss.help\"\n              unit=\"%\"\n              value={settings.stopLoss}\n            />\n\n            <ToggleDoubleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.trailingstop\"\n              name1=\"trailingStopTrigger\"\n              name2=\"trailingStop\"\n              tooltip=\"signalp.settings.trailingstop.help\"\n              unitLeft1=\"Trigger\"\n              unitLeft2=\"Distance\"\n              unitRight1=\"%\"\n              unitRight2=\"%\"\n              value1={settings.trailingStopTrigger}\n              value2={settings.trailingStop}\n            />\n\n            <ToggleTargetFields\n              label=\"signalp.settings.takeprofit\"\n              onChange={handleProfitTargetsChange}\n              type=\"takeprofit\"\n              value={settings.takeProfitTargets}\n            />\n\n            <ToggleTargetFields\n              label=\"signalp.settings.dca\"\n              onChange={handleBuyTargetsChange}\n              type=\"dca\"\n              value={settings.reBuyTargets}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.maxconcurrent\"\n              name=\"maxPositions\"\n              tooltip=\"signalp.settings.maxconcurrent.help\"\n              unit=\"#\"\n              value={settings.maxPositions}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.minvolume\"\n              name=\"minVolume\"\n              tooltip=\"signalp.settings.minvolume.help\"\n              unit=\"BTC\"\n              value={settings.minVolume}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.limitpositions\"\n              name=\"positionsPerMarket\"\n              tooltip=\"signalp.settings.limitpositions.help\"\n              unit=\"#\"\n              value={settings.positionsPerMarket}\n            />\n\n            <ToggleRadioInput\n              formMethods={formMethods}\n              label=\"signalp.settings.allowedside\"\n              name=\"allowedSide\"\n              options={allowedSideOptions}\n              tooltip=\"signalp.settings.allowedside.help\"\n              value={settings.allowedSide}\n            />\n\n            <ToggleInput\n              formMethods={formMethods}\n              label=\"signalp.settings.leverage\"\n              name=\"leverage\"\n              tooltip=\"signalp.settings.leverage.help\"\n              unit=\"#\"\n              value={settings.leverage}\n            />\n\n            <ToggleTextarea\n              formMethods={formMethods}\n              label=\"signalp.settings.blacklist\"\n              name=\"blacklist\"\n              tooltip=\"signalp.settings.blacklist.help\"\n              value={settings.blacklist}\n            />\n\n            <ToggleTextarea\n              formMethods={formMethods}\n              label=\"signalp.settings.whitelist\"\n              name=\"whitelist\"\n              tooltip=\"signalp.settings.whitelist.help\"\n              value={settings.whitelist}\n            />\n          </Box>\n        </Box>\n\n        <Box className=\"formAction\" display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-end\">\n          <CustomButton\n            className=\"submitButton\"\n            loading={loading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            <FormattedMessage id=\"action.saveSettings\" />\n          </CustomButton>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default ProviderSettingsForm;\n","import React, { useEffect, useState } from \"react\";\nimport \"./NoSettingsView.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useStoreUserExchangeConnections } from \"../../../../hooks/useStoreUserSelector\";\nimport useStoreViewsSelector from \"../../../../hooks/useStoreViewsSelector\";\nimport ExchangeIcon from \"../../../ExchangeIcon\";\nimport { createExchangeConnectionEmptyEntity } from \"../../../../services/tradeApiClient.types\";\nimport CloneProviderButton from \"../../ProviderHeader/CloneProviderButton\";\n\nconst NoSettingsView = () => {\n  const exchangeConnections = useStoreUserExchangeConnections();\n  const storeViews = useStoreViewsSelector();\n  const [exchange, setExchange] = useState(createExchangeConnectionEmptyEntity());\n\n  const filterExchange = () => {\n    let found = exchangeConnections.find(\n      (item) => item.internalId === storeViews.provider.exchangeInternalId,\n    );\n    if (found) {\n      setExchange(found);\n    }\n  };\n\n  useEffect(filterExchange, []);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"noSettingsView\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"exchangeBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"srv.settings.empty.1\" />\n        </Typography>\n        <Typography className=\"exchangeName\" variant=\"h3\">\n          <ExchangeIcon exchange={exchange.name} size=\"medium\" />\n          <span>{exchange.internalName}</span>\n        </Typography>\n      </Box>\n\n      <Box\n        alignItems=\"center\"\n        className=\"cloneBox\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"srv.settings.empty.2\" />\n        </Typography>\n        <CloneProviderButton provider={storeViews.provider} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default NoSettingsView;\n","import React, { useState, useEffect } from \"react\";\nimport \"./settings.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport ProviderSettingsForm from \"../../../components/Forms/ProviderSettingsForm\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport NoSettingsView from \"../../../components/Provider/Settings/NoSettingsView\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").ProviderExchangeSettingsObject} ProviderExchangeSettingsObject\n * @typedef {import(\"../../../services/tradeApiClient.types\").QuoteAssetsDict} QuoteAssetsDict\n */\n\n/**\n * @typedef {Object} ProviderProps\n * @property {QuoteAssetsDict} quotes quotes\n * @property {ProviderExchangeSettingsObject} settings settings\n * @property {Function} loadData load data method\n */\n\n/**\n * Position detail page component.\n *\n * @param {ProviderProps} props Component properties.\n * @returns {JSX.Element} Position page element.\n */\nconst SignalProvidersSettings = ({ quotes, settings, loadData }) => {\n  const selectedExchange = useSelectedExchange();\n  const { provider } = useStoreViewsSelector();\n  const [settingsView, setSettingsView] = useState(true);\n  const loading = !quotes || Object.keys(quotes).length === 0;\n  const intl = useIntl();\n  const matchExchange = () => {\n    if (provider.exchangeInternalId === selectedExchange.internalId) {\n      setSettingsView(true);\n    } else {\n      setSettingsView(false);\n    }\n  };\n\n  useEffect(matchExchange, [selectedExchange.internalId]);\n\n  return (\n    <Box className=\"profileSettingsPage\">\n      <Helmet>\n        <title>\n          {`${provider.name} - ${intl.formatMessage({\n            id: \"srv.settings\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      {(loading || !settings) && (\n        <Box\n          alignItems=\"center\"\n          bgcolor=\"grid.content\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!loading && settings && settingsView && (\n        <ProviderSettingsForm onUpdate={loadData} quotes={quotes} settings={settings} />\n      )}\n\n      {!loading && !settingsView && <NoSettingsView />}\n    </Box>\n  );\n};\n\nexport default SignalProvidersSettings;\n"],"names":["formMethods","value","label","name","tooltip","unit","storeSettings","useStoreSettingsSelector","useState","toggle","setToggle","val","setVal","register","useEffect","Box","alignItems","className","display","flexDirection","justifyContent","id","Tooltip","placement","title","Typography","variant","Help","Switch","checked","onChange","e","target","TextField","InputProps","endAdornment","InputAdornment","position","darkStyle","fullWidth","inputRef","targetValue","match","includes","replace","Math","sign","type","value1","value2","name1","name2","unitLeft1","unitLeft2","unitRight1","unitRight2","data1","setData1","data2","setData2","startAdornment","max","toString","val1","setVal1","control","data","as","Select","MenuItem","defaultValue","targetFieldObject","targetId","amountPercentage","priceTargetPercentage","amountError","priceError","delete","values","setValues","length","count","a","updateParent","handleChange","list","index","clearErrors","findIndex","item","field","find","previousFieldsSum","forEach","parseFloat","map","obj","key","onBlur","AddCircleOutline","onClick","push","HighlightOff","splice","setData","multiline","rows","options","RadioGroup","FormControlLabel","Radio","settings","quotes","onUpdate","storeViews","useStoreViewsSelector","selectedExchange","useSelectedExchange","loading","setLoading","takeProfitTargets","setProfitTargets","reBuyTargets","setBuyTargets","useForm","handleSubmit","dispatch","useDispatch","emptySettings","creatEmptySettingsEntity","setHasAllocated","useContext","ProviderContext","getFieldName","num","onSubmit","payload","prepareProfitTargetsPayload","prepareBuyTargetsPayload","providerId","provider","internalExchangeId","internalId","exchangeId","version","buyTTL","sellByTTL","tradeApi","then","response","checkAllocated","showSuccessAlert","catch","showErrorAlert","finally","bgcolor","flexWrap","autoComplete","Object","keys","quote","notional","minNotional","priceDeviation","sellPriceDeviation","stopLoss","ToggleDoubleInput","trailingStopTrigger","trailingStop","ToggleTargetFields","maxPositions","minVolume","positionsPerMarket","allowedSide","leverage","blacklist","whitelist","CustomButton","exchangeConnections","useStoreUserExchangeConnections","createExchangeConnectionEmptyEntity","exchange","setExchange","found","exchangeInternalId","ExchangeIcon","size","internalName","CloneProviderButton","loadData","settingsView","setSettingsView","intl","useIntl","Helmet","formatMessage","CircularProgress","color"],"sourceRoot":""}