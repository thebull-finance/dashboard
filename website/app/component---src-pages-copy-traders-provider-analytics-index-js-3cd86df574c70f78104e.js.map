{"version":3,"file":"component---src-pages-copy-traders-provider-analytics-index-js-3cd86df574c70f78104e.js","mappings":"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","sources":["webpack://zignaly-webapp/./node_modules/dayjs/plugin/quarterOfYear.js","webpack://zignaly-webapp/./src/hooks/useExchangeQuotes.js","webpack://zignaly-webapp/./src/hooks/useExchangesOptions.js","webpack://zignaly-webapp/./src/hooks/useStoreViewsSelector.js","webpack://zignaly-webapp/./src/pages/copyTraders/providerAnalytics/index.js","webpack://zignaly-webapp/./src/utils/stats.js"],"sourcesContent":["require(\"core-js/modules/esnext.global-this.js\");\n\n!function (t, n) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = n() : \"function\" == typeof define && define.amd ? define(n) : (t = \"undefined\" != typeof globalThis ? globalThis : t || self).dayjs_plugin_quarterOfYear = n();\n}(this, function () {\n  \"use strict\";\n\n  var t = \"month\",\n      n = \"quarter\";\n  return function (e, i) {\n    var r = i.prototype;\n\n    r.quarter = function (t) {\n      return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));\n    };\n\n    var s = r.add;\n\n    r.add = function (e, i) {\n      return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);\n    };\n\n    var u = r.startOf;\n\n    r.startOf = function (e, i) {\n      var r = this.$utils(),\n          s = !!r.u(i) || i;\n\n      if (r.p(e) === n) {\n        var o = this.quarter() - 1;\n        return s ? this.month(3 * o).startOf(t).startOf(\"day\") : this.month(3 * o + 2).endOf(t).endOf(\"day\");\n      }\n\n      return u.bind(this)(e, i);\n    };\n  };\n});","import { useState, useEffect, useContext } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\nimport PrivateAreaContext from \"context/PrivateAreaContext\";\n\n/**\n * @typedef {import(\"../services/tradeApiClient.types\").QuoteAssetsDict} QuoteAssetsDict\n * @typedef {Object} ExchangeData\n * @property {string} exchangeId\n * @property {string} exchangeType\n */\n\n/**\n * @typedef {Object} ExchangeQuotesHookData\n * @property {QuoteAssetsDict} quoteAssets\n * @property {Boolean} quotesLoading\n */\n\n/**\n * Provides quotes assets.\n * @param {ExchangeData} exchangeData Exchange internal id.\n * @param {boolean} [shouldExecute] Flag to indicate if we should execute the request.\n * @returns {ExchangeQuotesHookData} Quote Assets.\n */\nconst useExchangeQuotes = (exchangeData, shouldExecute = true) => {\n  const [quoteAssets, setQuotes] = useState({});\n  const [quotesLoading, setLoading] = useState(false);\n  const { quotesMap, setQuotesMapData } = useContext(PrivateAreaContext);\n  const mapKey = `${exchangeData.exchangeId}-${exchangeData.exchangeType}`;\n\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    if (shouldExecute && exchangeData.exchangeId && exchangeData.exchangeType) {\n      if (quotesMap[mapKey]) {\n        setQuotes(quotesMap[mapKey]);\n        return;\n      }\n      setLoading(true);\n      let payload = {\n        exchangeId: exchangeData.exchangeId,\n        exchangeType: exchangeData.exchangeType,\n      };\n\n      tradeApi\n        .quotesAssetsGet(payload)\n        .then((data) => {\n          setQuotes(data);\n          const map = { ...quotesMap };\n          map[mapKey] = data;\n          setQuotesMapData(map);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useEffect(loadData, [exchangeData.exchangeId, exchangeData.exchangeType, shouldExecute]);\n\n  return {\n    quoteAssets: quoteAssets,\n    quotesLoading: quotesLoading,\n  };\n};\n\nexport default useExchangeQuotes;\n","import { useIntl } from \"react-intl\";\nimport useExchangeList from \"./useExchangeList\";\n\n/**\n * @typedef {import(\"../components/CustomSelect/CustomSelect\").OptionType} OptionType\n */\n\n/**\n * Provides exchanges options.\n * @param {boolean} allOption Flag to indicate wether to add All Exchanges option.\n * @returns {Array<OptionType>} Exchanges\n */\nconst useExchangesOptions = (allOption) => {\n  const intl = useIntl();\n  const { exchanges } = useExchangeList();\n  let exchangeOptions = allOption\n    ? [\n        {\n          val: \"ALL\",\n          label: intl.formatMessage({ id: \"fil.allexchanges\" }),\n        },\n      ]\n    : [];\n\n  exchangeOptions = exchangeOptions.concat(\n    exchanges &&\n      exchanges.map(\n        (item) =>\n          item.enabled && {\n            val: item.name.toLowerCase(),\n            label: item.name,\n          },\n      ),\n  );\n\n  return exchangeOptions;\n};\n\nexport default useExchangesOptions;\n","import { useSelector } from \"react-redux\";\n\n/**\n * @typedef {import(\"../store/initialState\").DefaultState} DefaultStateType\n * @typedef {import(\"../store/initialState\").DefaultViewsObject} DefaultViewsObject\n */\n\n/**\n * Select Redux store views data.\n *\n * @returns {DefaultViewsObject} Views object from redux store.\n */\nconst useStoreViewsSelector = () => {\n  /**\n   * Select store views data.\n   *\n   * @param {DefaultStateType} state Application store data.\n   * @returns {DefaultViewsObject} Store views data.\n   */\n  const selectStoreViews = (state) => state.views;\n\n  return useSelector(selectStoreViews);\n};\n\nexport default useStoreViewsSelector;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { Helmet } from \"react-helmet\";\nimport Analytics from \"../../../components/Provider/Analytics\";\n\nconst CopyTradersAnalytics = () => {\n  const storeViews = useStoreViewsSelector();\n  const intl = useIntl();\n\n  return (\n    <Box className=\"profileAnalyticsPage\">\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.analytics\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Analytics provider={storeViews.provider} />\n    </Box>\n  );\n};\n\nexport default CopyTradersAnalytics;\n","import dayjs from \"dayjs\";\nimport quarterOfYear from \"dayjs/plugin/quarterOfYear\";\ndayjs.extend(quarterOfYear);\n\n/**\n * @typedef {import('dayjs').OpUnitType} OpUnitType\n */\n\n/**\n * @typedef {Object} StatsOptions\n * @property {OpUnitType} [unit]\n * @property {string} [dateKey]\n * @property {string|Date|dayjs.Dayjs} [startDate]\n * @property {string|Date|dayjs.Dayjs} [endDate]\n */\n\n/** @type {StatsOptions} */\nconst defaultOptions = {\n  unit: \"d\",\n  startDate: null,\n  endDate: null,\n  dateKey: \"date\",\n};\n\n/**\n * Generate stats\n *\n * @template {Object.<string, *>} T\n * @param {Array<T>} data Array of weekly stats data.\n * @param {StatsOptions} options Options\n * @param {function(dayjs.Dayjs, T): *} makeStats Callback to add the stats data\n * @returns {void}\n */\nexport const generateStats = (data, options, makeStats) => {\n  if (!data.length) return;\n  const opts = { ...defaultOptions, ...options };\n\n  // Start at passed startDate or first date\n  let startDate = opts.startDate ? dayjs(opts.startDate) : dayjs(data[0][opts.dateKey]);\n  startDate = startDate.startOf(\"d\");\n\n  // End at passed date or today\n  let endDate = opts.endDate ? dayjs(opts.endDate) : dayjs();\n  endDate = endDate.startOf(\"d\");\n\n  const diff = endDate.diff(startDate, opts.unit);\n  let currentDate = startDate;\n  let lastIndex = 0;\n\n  /**\n   * Optimized method to find all data matching date in array\n   * @return {Array<T>} Matched results\n   */\n  const findAllData = () => {\n    /** @type {typeof data} */\n    let matches = [];\n    for (let i = lastIndex; i < data.length; i++) {\n      const d = data[i];\n      lastIndex = i;\n\n      if (dayjs(d[opts.dateKey]).isSame(currentDate, opts.unit)) {\n        // Found a match\n        matches.push(d);\n      } else {\n        // Stop looking for a match if we already passed a date with no result.\n        break;\n      }\n    }\n\n    return matches;\n  };\n\n  for (let i = 0; i <= diff; i++) {\n    const matchingData = findAllData();\n    if (!matchingData.length) {\n      // Add stats for empty days\n      makeStats(currentDate, null);\n    } else {\n      // eslint-disable-next-line no-loop-func\n      matchingData.forEach((d) => makeStats(currentDate, d));\n    }\n    currentDate = currentDate.add(1, opts.unit);\n  }\n};\n\n/**\n//  * Function to generate a new array that contains weekly stats data.\n//  * (Currently only used for the trader performance stats)\n//  *\n//  * @param {Array<WeeklyData>} weeklyData Array of weekly stats data.\n//  * @param {function(Date, number): *} formatStats Callback to format the stats data\n//  * @returns {Array<*>} Result\n//  */\n// export const generateWeeklyStats = (weeklyData, formatStats) => {\n//   /**\n//    * @type {Array<*>}\n//    */\n//   let stats = [];\n//   const generateMissingWeeks = generateMissingStats(stats, formatStats, \"w\");\n\n//   if (weeklyData.length) {\n//     // Adding missing weeks until start date\n//     const firstDate = dayjs(weeklyData[0].day);\n//     const quarterStart = firstDate.startOf(\"quarter\");\n//     // First week day of the first week of the quarter\n//     if (quarterStart.day() > 0) {\n//       quarterStart.add(1, \"w\").startOf(\"w\");\n//     }\n//     const firstWeekDate = firstDate.startOf(\"week\");\n//     const daysDiff = firstWeekDate.diff(quarterStart, \"w\");\n//     if (daysDiff > 0) {\n//       // Adding missing weeks\n//       generateMissingWeeks(quarterStart.toDate(), daysDiff, 0);\n//     }\n//   }\n\n//   const lastAggregatedData = weeklyData.reduce((aggregatedData, currentData) => {\n//     let amount = currentData.return;\n//     const currentDate = dayjs(currentData.day).startOf(\"d\");\n\n//     if (aggregatedData) {\n//       const lastDate = dayjs(aggregatedData.day).startOf(\"d\");\n//       const weeksDiff = currentDate.diff(lastDate, \"week\");\n//       if (weeksDiff > 1) {\n//         // Adding missing weeks\n//         generateMissingWeeks(dayjs(aggregatedData.day).add(1, \"w\").toDate(), weeksDiff - 1, 0);\n//       }\n//     }\n//     // const watermark = amount + totalLosses;\n//     // const profitPercentage = (lastWeekBalance * profits) / 100;\n\n//     // Add calculated weekly amount\n//     stats.push(formatStats(currentDate.toDate(), amount));\n\n//     // Return last aggregated data\n//     return {\n//       day: currentDate.toDate(),\n//       return: amount,\n//     };\n//   }, null);\n\n//   if (lastAggregatedData) {\n//     // Adding missing weeks until today\n//     const weeksDiff = dayjs()\n//       .endOf(\"quarter\")\n//       .startOf(\"d\")\n//       .diff(dayjs(lastAggregatedData.day).startOf(\"d\"), \"week\");\n//     if (weeksDiff > 1) {\n//       generateMissingWeeks(dayjs(lastAggregatedData.day).add(1, \"w\").toDate(), weeksDiff, 0);\n//     }\n//   }\n\n//   return stats;\n// };\n"],"names":["module","exports","t","n","e","i","r","prototype","quarter","this","$utils","u","Math","ceil","month","s","add","Number","p","bind","startOf","o","endOf","exchangeData","shouldExecute","useState","quoteAssets","setQuotes","quotesLoading","setLoading","useContext","PrivateAreaContext","quotesMap","setQuotesMapData","mapKey","exchangeId","exchangeType","dispatch","useDispatch","useEffect","payload","tradeApi","then","data","map","catch","showErrorAlert","finally","allOption","intl","useIntl","exchanges","useExchangeList","exchangeOptions","val","label","formatMessage","id","concat","item","enabled","name","toLowerCase","useSelector","state","views","storeViews","useStoreViewsSelector","className","provider","dayjs","quarterOfYear","defaultOptions","unit","startDate","endDate","dateKey","generateStats","options","makeStats","length","opts","diff","currentDate","lastIndex","findAllData","matches","d","isSame","push","matchingData","forEach"],"sourceRoot":""}