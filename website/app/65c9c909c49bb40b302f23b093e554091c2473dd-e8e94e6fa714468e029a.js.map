{"version":3,"file":"65c9c909c49bb40b302f23b093e554091c2473dd-e8e94e6fa714468e029a.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Modal/ConnectExchange/ConnectExchange.js","webpack://zignaly-webapp/./src/components/RouteComponent/RouteComponent.js","webpack://zignaly-webapp/./src/context/ProviderContext.js","webpack://zignaly-webapp/./src/hooks/useAvailableBalance.js","webpack://zignaly-webapp/./src/components/Forms/NumberInput/NumberInput.js","webpack://zignaly-webapp/./src/components/Forms/CopyTraderForm/CopyTraderForm.js","webpack://zignaly-webapp/./src/components/Forms/CopyPSForm/CopyPSForm.js","webpack://zignaly-webapp/./src/components/Forms/ConnectTraderForm/ConnectTraderForm.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/CopyTraderButton/SuccessBox/SuccessBox.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/CopyTraderButton/CopyTraderButton.js","webpack://zignaly-webapp/./src/components/Forms/PaymentForm/PaymentForm.js","webpack://zignaly-webapp/./src/components/Provider/Profile/Disclaimer/Disclaimer.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/PaymentButton/PaymentButton.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/TraderHeaderActions/TrialPeriod.js","webpack://zignaly-webapp/./src/components/Forms/ClonedProviderEditForm/ClonedProviderEditForm.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/CloneEdit/CloneEdit.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/FollowProviderButton/FollowProviderButton.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/TraderHeaderActions/TraderHeaderActions.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/BaseCurrency.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/TraderHeaderInfo/TraderHeaderInfo.js","webpack://zignaly-webapp/./src/components/Provider/ProviderHeader/ProviderHeader.js","webpack://zignaly-webapp/./src/layouts/ProviderLayout/ProviderLayout.jsx"],"sourcesContent":["import React from \"react\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport \"./ConnectExchange.scss\";\nimport { navigate as navigateReach } from \"@reach/router\";\nimport useExchangeList from \"../../../hooks/useExchangeList\";\nimport { getExchangeNamesCombined } from \"../../../utils/helpers\";\n\n/**\n * @typedef {Object} ConnectExchangePropTypes\n * @property {function} [onClose] Close function.\n */\n\n/**\n * Ask to connect an exchange account.\n *\n * @param {ConnectExchangePropTypes} props Component properties.\n * @returns {JSX.Element} Component JSX.\n */\nconst ConnectExchange = ({ onClose }) => {\n  const { exchanges } = useExchangeList();\n  const navigate = () => {\n    if (onClose) onClose();\n    navigateReach(\"#exchangeAccounts\");\n  };\n\n  return (\n    <Box alignItems=\"center\" className=\"connectExchangeModal\" display=\"flex\" flexDirection=\"column\">\n      <Typography variant=\"h3\">\n        <FormattedMessage id=\"accounts.connect\" />\n      </Typography>\n      <Typography variant=\"body1\">\n        <FormattedMessage\n          id=\"accounts.connect.first\"\n          values={{ exchanges: getExchangeNamesCombined(exchanges, \"or\") }}\n        />\n      </Typography>\n      <Box className=\"real\" display=\"flex\" flexDirection=\"column\">\n        <Typography variant=\"h4\">\n          <FormattedMessage id=\"accounts.create.or\" />\n        </Typography>\n        <CustomButton className=\"body2 bgPurple exchangeButton\" onClick={navigate}>\n          <FormattedMessage id=\"accounts.connect.go\" />\n        </CustomButton>\n      </Box>\n      {/* <Box className=\"demo\" display=\"flex\" flexDirection=\"column\">\n        <Typography variant=\"h4\">\n          <FormattedMessage id=\"accounts.connect.experiment\" />\n        </Typography>\n        <CustomButton className=\"body2 textPurple exchangeButton\" onClick={navigate}>\n          <FormattedMessage id=\"accounts.create.demo\" />\n        </CustomButton>\n      </Box> */}\n    </Box>\n  );\n};\nexport default ConnectExchange;\n","import React from \"react\";\n\n/**\n * @typedef {import(\"@reach/router\").RouteComponentProps} RouteComponentProps\n * @typedef {import(\"react\").FunctionComponent} FunctionComponent\n * @typedef {import('../../services/tradeApiClient.types').ProviderExchangeSettingsObject} ProviderExchangeSettingsObject\n * @typedef {import('../../services/tradeApiClient.types').QuoteAssetsDict} QuoteAssetsDict\n *\n */\n\n/**\n * @typedef {Object} RouteCustomProps\n * @property {FunctionComponent} component\n * @property {string} providerId\n * @property {QuoteAssetsDict} [quotes]\n * @property {ProviderExchangeSettingsObject} [settings]\n * @property {Function} [loadData]\n */\n\n/**\n * @typedef {RouteCustomProps & RouteComponentProps} ExtendedRouteComponentProps\n */\n\n/**\n * @param {ExtendedRouteComponentProps} props Route props.\n * @returns {JSX.Element} Component element.\n */\nexport function ProviderRoute(props) {\n  const { /** @type {FunctionComponent} */ component, ...others } = props;\n  return <>{component(others)}</>;\n}\n","import React from \"react\";\n\n/**\n * @typedef {Object} ProviderContextObject\n * @property {boolean} hasAllocated\n * @property {React.SetStateAction<*>} setHasAllocated\n */\n\nexport default React.createContext(/** @type {Partial<ProviderContextObject>} **/ ({}));\n","import { useState, useEffect } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\n\n/**\n * @typedef {import(\"services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {Object} HookData\n * @property {*} balance\n * @property {Boolean} loading\n */\n\n/**\n * Provides balance summary for exchange.\n * @param {ExchangeConnectionEntity} selectedExchange Exchange account object.\n * @param {boolean} [shouldExecute] Flag to indicate if we should execute the request, demo accounts are bypassed.\n * @returns {HookData} Balance.\n */\nconst useAvailableBalance = (selectedExchange, shouldExecute = true) => {\n  const [balance, setBalance] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    // Skip balance fetch for paper trading exchanges.\n    if (selectedExchange.internalId && !selectedExchange.paperTrading && shouldExecute) {\n      setLoading(true);\n\n      tradeApi\n        .userAvailableBalanceGet(selectedExchange.internalId)\n        .then((data) => {\n          setBalance(data);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useEffect(loadData, [selectedExchange.internalId]);\n\n  return { balance, loading };\n};\n\nexport default useAvailableBalance;\n","import React, { useState } from \"react\";\nimport { Controller } from \"react-hook-form\";\nimport { TextField, InputAdornment } from \"@material-ui/core\";\n/**\n * @typedef {import('react-hook-form').Control} Control\n */\n\n/**\n * Control to input numbers, replacing commas by dots.\n * @param {Object} props Props\n * @param {Control} props.control React Hook Form control\n * @param {string} props.quote Quote\n * @param {string|number} props.defaultValue Default Value\n * @param {string} props.placeholder Placeholder\n * @param {boolean} props.error Error\n * @param {string} props.name Name\n * @param {Object} props.rules Rules\n * @returns {JSX.Element} JSX\n */\nconst NumberInput = ({ control, quote, defaultValue, placeholder, error, name, rules }) => {\n  const [allocated, setAllocated] = useState(defaultValue);\n\n  return (\n    <Controller\n      control={control}\n      defaultValue={allocated}\n      name={name}\n      render={(props) => (\n        <TextField\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">{quote}</InputAdornment>,\n          }}\n          className=\"customInput\"\n          error={error}\n          fullWidth\n          onBlur={props.onBlur}\n          onChange={(e) => {\n            let data = e.target.value;\n            if (data.match(/^$|^[0-9]\\d*(?:[.,]\\d{0,8})?$/)) {\n              data = data.replace(\",\", \".\");\n              setAllocated(data);\n              props.onChange(data);\n            }\n          }}\n          placeholder={placeholder}\n          value={allocated}\n          variant=\"outlined\"\n        />\n      )}\n      rules={rules}\n    />\n  );\n};\n\nexport default NumberInput;\n","import React, { useState } from \"react\";\nimport \"./CopyTraderForm.scss\";\nimport { Box, TextField, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { getProvider } from \"../../../store/actions/views\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../store/actions/ui\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useIntl } from \"react-intl\";\nimport useAvailableBalance from \"../../../hooks/useAvailableBalance\";\nimport NumberInput from \"../NumberInput\";\nimport { Help } from \"@material-ui/icons\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n * @property {Function} onClose\n * @property {Function} onSuccess\n *\n */\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst CopyTraderForm = ({ provider, onClose, onSuccess }) => {\n  const selectedExchange = useSelectedExchange();\n  const [actionLoading, setActionLoading] = useState(false);\n  const [profitsMode, setProfitsMode] = useState(\n    provider.profitsMode ? provider.profitsMode : \"reinvest\",\n  );\n  const [alert, setAlert] = useState(undefined);\n  const { errors, handleSubmit, setError, control } = useForm();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { balance } = useAvailableBalance(selectedExchange, provider.profitSharing);\n\n  /**\n   *\n   * @param {String} val Change event.\n   * @returns {Void} None.\n   */\n  const handleShareingModeChange = (val) => {\n    setProfitsMode(val);\n  };\n\n  /**\n   *\n   * @typedef {Object} SubmitObject\n   * @property {String} allocatedBalance\n   * @property {String} transfer\n   */\n\n  /**\n   *\n   * @param {SubmitObject} data Form data.\n   * @returns {void} None.\n   */\n  const onSubmit = (data) => {\n    if (!data.transfer || data.transfer.toLowerCase() === \"transfer\") {\n      if (validateAllocated(data.allocatedBalance) && validateBalance(data.allocatedBalance)) {\n        setActionLoading(true);\n        const payload = {\n          allocatedBalance: data.allocatedBalance,\n          balanceFilter: true,\n          connected: provider.connected ? provider.connected : false,\n          providerId: provider.id,\n          exchangeInternalId: selectedExchange.internalId,\n          ...(provider.profitSharing && {\n            profitsMode: profitsMode,\n          }),\n        };\n        tradeApi\n          .traderConnect(payload)\n          .then(() => {\n            const payload2 = {\n              providerId: provider.id,\n              exchangeInternalId: selectedExchange.internalId,\n            };\n            dispatch(getProvider(payload2, !provider.profitSharing));\n            // mixpanelProviderEnabled();\n            // userPilotProviderEnabled();\n            dispatch(showSuccessAlert(\"copyt.follow.alert.title\", \"copyt.follow.alert.body\"));\n            onClose();\n            if (provider.profitSharing) {\n              onSuccess();\n            }\n          })\n          .catch((e) => {\n            dispatch(showErrorAlert(e));\n          })\n          .finally(() => {\n            setActionLoading(false);\n          });\n      }\n    } else {\n      setError(\"transfer\", { type: \"patter\", message: \"\" });\n    }\n  };\n\n  /**\n   *\n   * @param {String} allocatedBalance balance inout from user.\n   * @returns {Boolean} whether the input value is valid or not.\n   */\n  const validateBalance = (allocatedBalance) => {\n    if (!provider.profitSharing) {\n      return true;\n    }\n\n    const added = parseFloat(allocatedBalance);\n    const alreadyAllocated = provider.allocatedBalance;\n    const neededQuote = provider.copyTradingQuote;\n    const userBalance = balance[neededQuote] || 0;\n    const noBalanceMsg = intl.formatMessage({ id: \"copyt.copy.error3\" }, { quote: neededQuote });\n    const noBalanceToIncreaseMsg = intl.formatMessage(\n      { id: \"copyt.copy.error5\" },\n      { quote: neededQuote },\n    );\n\n    if (provider.disable) {\n      if (userBalance >= added) {\n        return true;\n      }\n      setAlert(noBalanceMsg);\n      return false;\n    }\n\n    if (userBalance >= added - alreadyAllocated) {\n      return true;\n    }\n    setAlert(noBalanceToIncreaseMsg);\n    return false;\n  };\n\n  /**\n   *\n   * @param {String} allocatedBalance balance inout from user.\n   * @returns {Boolean} whether the input value is valid or not.\n   */\n  const validateAllocated = (allocatedBalance) => {\n    const added = parseFloat(allocatedBalance);\n    const needed = provider.minAllocatedBalance;\n    const alreadyAllocated = provider.allocatedBalance;\n\n    const validateNeeded = () => {\n      if (added >= needed) {\n        return true;\n      }\n      setError(\"allocatedBalance\", {\n        type: \"manual\",\n        message: intl.formatMessage(\n          { id: \"trader.amount.error\" },\n          {\n            quote: provider.copyTradingQuote,\n            amount: provider.minAllocatedBalance,\n          },\n        ),\n      });\n      return false;\n    };\n\n    const validateAlreadyAllocated = () => {\n      if (added >= alreadyAllocated) {\n        return true;\n      }\n      setError(\"allocatedBalance\", {\n        type: \"manual\",\n        message: intl.formatMessage({ id: \"form.error.allocatedBalance.reduce\" }),\n      });\n      return false;\n    };\n\n    if (provider.disable) {\n      if (provider.profitSharing) {\n        return true;\n      }\n      return validateNeeded();\n    }\n    if (provider.profitSharing) {\n      return validateAlreadyAllocated();\n    }\n    return validateNeeded();\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  const redirectToHelp = () => {\n    if (typeof window !== \"undefined\") {\n      const link =\n        \"https://help.zignaly.com/hc/en-us/articles/360019579879-I-have-an-error-of-incorrect-exchange-account-when-trying-to-connect-to-a-Profit-Sharing-service-\";\n      window.open(link, \"_blank\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"copyTraderForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        {Boolean(alert) && (\n          <Alert className=\"alert\" classes={{ icon: \"alertIcon\" }} severity=\"error\">\n            <Typography className=\"message\" variant=\"body1\">\n              {alert}\n              {provider.profitSharing && <Help className=\"helpIcon\" onClick={redirectToHelp} />}\n            </Typography>\n          </Alert>\n        )}\n        <Typography className={\"formTitle \" + (alert ? \"noMargin\" : \"\")} variant=\"h3\">\n          {provider.profitSharing ? (\n            <FormattedMessage id=\"trader.howmuch.1\" values={{ quote: provider.copyTradingQuote }} />\n          ) : (\n            <FormattedMessage id=\"trader.howmuch.2\" values={{ quote: provider.copyTradingQuote }} />\n          )}\n        </Typography>\n        {!provider.profitSharing && (\n          <Typography className=\"para\" variant=\"body1\">\n            <FormattedMessage id=\"trader.everymove\" />\n          </Typography>\n        )}\n        <Box\n          alignItems=\"center\"\n          className=\"fieldBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <Box\n            alignItems=\"start\"\n            className=\"inputBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"start\"\n          >\n            <NumberInput\n              control={control}\n              defaultValue={!provider.disable ? provider.allocatedBalance : \"\"}\n              error={!!errors.allocatedBalance}\n              name=\"allocatedBalance\"\n              placeholder={intl.formatMessage({\n                id: provider.profitSharing\n                  ? \"trader.amount.placeholder.1\"\n                  : \"trader.amount.placeholder.2\",\n              })}\n              quote={provider.copyTradingQuote}\n              rules={{ required: true }}\n            />\n            {provider.profitSharing && errors.allocatedBalance && (\n              <span className={\"text red\"}>{errors.allocatedBalance.message}</span>\n            )}\n            {!provider.profitSharing && (\n              <span className={\"text \" + (errors.allocatedBalance ? \"red\" : \"\")}>\n                <FormattedMessage\n                  id=\"trader.amount.error\"\n                  values={{\n                    quote: provider.copyTradingQuote,\n                    amount: provider.minAllocatedBalance,\n                  }}\n                />\n              </span>\n            )}\n          </Box>\n        </Box>\n\n        {provider.profitSharing && (\n          <>\n            <Typography variant=\"h4\">\n              <FormattedMessage id=\"trader.locked\" /> <FormattedMessage id=\"trader.moreinfo\" />\n            </Typography>\n\n            <label className=\"customLabel\">\n              <FormattedMessage id=\"trader.profitaction\" />\n            </label>\n\n            <Box className=\"labeledInputsBox\">\n              <span\n                className={profitsMode === \"reinvest\" ? \"checked\" : \"\"}\n                onClick={() => handleShareingModeChange(\"reinvest\")}\n              >\n                <FormattedMessage id=\"trader.reinvest\" />\n              </span>\n              <span\n                className={profitsMode === \"withdraw\" ? \"checked\" : \"\"}\n                onClick={() => handleShareingModeChange(\"withdraw\")}\n              >\n                <FormattedMessage id=\"trader.withdraw\" />\n              </span>\n            </Box>\n\n            <label className={\"customLabel \" + (errors.transfer ? \"red\" : \"\")}>\n              <FormattedMessage id=\"trader.copy.confirm\" />\n            </label>\n\n            <Box\n              alignItems=\"start\"\n              className=\"inputBox\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"start\"\n            >\n              <Controller\n                control={control}\n                defaultValue=\"\"\n                name=\"transfer\"\n                render={(props) => (\n                  <TextField\n                    className=\"customTextarea\"\n                    error={!!errors.transfer}\n                    fullWidth\n                    multiline\n                    onChange={(e) => {\n                      let value = e.target.value;\n                      props.onChange(value);\n                    }}\n                    placeholder={intl.formatMessage({ id: \"trader.ack.placeholder\" })}\n                    rows={2}\n                    variant=\"outlined\"\n                  />\n                )}\n                rules={{ required: true }}\n              />\n            </Box>\n          </>\n        )}\n\n        <Box className=\"inputBox\">\n          <CustomButton\n            className=\"full submitButton\"\n            loading={actionLoading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            {provider.profitSharing ? (\n              <FormattedMessage id=\"trader.transferfunds\" />\n            ) : (\n              <FormattedMessage id=\"trader.start\" />\n            )}\n          </CustomButton>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nexport default CopyTraderForm;\n","import React, { useState, useEffect } from \"react\";\nimport \"./CopyPSForm.scss\";\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  FormHelperText,\n  Checkbox,\n  OutlinedInput,\n} from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { getProvider } from \"../../../store/actions/views\";\nimport { showErrorAlert } from \"../../../store/actions/ui\";\nimport { useIntl } from \"react-intl\";\nimport useAvailableBalance from \"../../../hooks/useAvailableBalance\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport { formatNumber } from \"utils/formatters\";\nimport NumberInput from \"../NumberInput\";\nimport { isNil } from \"lodash\";\nimport { Help } from \"@material-ui/icons\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n * @property {Function} onClose\n * @property {Function} onSuccess\n */\n\n/**\n * Form to copy a PS service.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst CopyPSForm = ({ provider, onClose, onSuccess }) => {\n  const selectedExchange = useSelectedExchange();\n  const [loading, setLoading] = useState(false);\n  const [profitsMode, setProfitsMode] = useState(provider.profitsMode || \"reinvest\");\n  const {\n    errors,\n    handleSubmit,\n    control,\n    formState: { isValid },\n    register,\n    watch,\n    trigger,\n  } = useForm({\n    mode: \"onChange\",\n    shouldUnregister: false,\n  });\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { balance, loading: balanceLoading } = useAvailableBalance(selectedExchange, true);\n  const quoteBalance = (balance && balance[provider.copyTradingQuote]) || 0;\n  const [step, setStep] = useState(1);\n  const allocatedBalance = watch(\n    \"allocatedBalance\",\n    !provider.disable ? provider.allocatedBalance : \"\",\n  );\n\n  // Update validation when we receive quote balance\n  useEffect(() => {\n    if (allocatedBalance && quoteBalance) {\n      trigger();\n    }\n  }, [quoteBalance]);\n\n  /**\n   * Check allocated amount is correct\n   * @param {string} val Value.\n   * @returns {boolean|string} Result or error message.\n   */\n  const validateAmount = (val) => {\n    const newAllocated = parseFloat(val);\n\n    if (!newAllocated) {\n      return false;\n    }\n\n    if (!provider.disable && newAllocated < provider.allocatedBalance) {\n      return intl.formatMessage({ id: \"form.error.allocatedBalance.reduce\" });\n    }\n\n    // Check maxAllocated\n    if (\n      !isNil(provider.maxAllocatedBalance) &&\n      newAllocated + provider.allocatedBalance > provider.maxAllocatedBalance\n    ) {\n      return intl.formatMessage(\n        { id: \"copyt.copy.error.max\" },\n        { max: provider.maxAllocatedBalance, quote: provider.copyTradingQuote },\n      );\n    }\n\n    if (!balanceLoading) {\n      // Balance checks\n      if (provider.disable && quoteBalance < newAllocated) {\n        return intl.formatMessage(\n          { id: \"copyt.copy.error3\" },\n          { quote: provider.copyTradingQuote },\n        );\n      } else if (quoteBalance < newAllocated - provider.allocatedBalance) {\n        return intl.formatMessage(\n          { id: \"copyt.copy.error5\" },\n          { quote: provider.copyTradingQuote },\n        );\n      }\n    }\n    return true;\n  };\n\n  /**\n   *\n   * @typedef {Object} FormData\n   * @property {String} allocatedBalance\n   * @property {String} transfer\n   */\n\n  /**\n   * Submit form callback.\n   * @param {FormData} data Form data.\n   * @returns {void}\n   */\n  const onSubmit = (data) => {\n    if (step === 1 && provider.disable) {\n      setStep(2);\n    } else {\n      setLoading(true);\n      const payload = {\n        allocatedBalance: data.allocatedBalance,\n        balanceFilter: true,\n        connected: provider.connected ? provider.connected : false,\n        providerId: provider.id,\n        exchangeInternalId: selectedExchange.internalId,\n        profitsMode: profitsMode,\n      };\n      tradeApi\n        .traderConnect(payload)\n        .then(() => {\n          const payloadProvider = {\n            providerId: provider.id,\n            exchangeInternalId: selectedExchange.internalId,\n          };\n          dispatch(getProvider(payloadProvider, false));\n          onClose();\n          onSuccess();\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  let terms = [\"ack2\", \"ack3\"];\n  if (provider.exchangeType === \"futures\") {\n    // Add terms for futures PS\n    terms.unshift(\"ack1\");\n  }\n  if (provider.privacy !== \"listed_marketplace\") {\n    // Risky service\n    terms.push(\"ack4\");\n  }\n\n  const helpUrls = {\n    ack1: \"https://help.zignaly.com/hc/en-us/articles/360017357399#h_01FTBM69RSNKRQHD7F22PFWAHJ\",\n    ack2: \"https://help.zignaly.com/hc/en-us/articles/360017357399#h_01FD8B8FG4PBGHM4FASXFGWEBX\",\n    ack3: \"https://help.zignaly.com/hc/en-us/articles/360017357399#h_01FN1G0MEVR75AK8M0P92NJPV1\",\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"copyPSForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        {step === 1 ? (\n          <>\n            <Typography variant=\"h3\">\n              <FormattedMessage id=\"profitsharing.start\" />\n            </Typography>\n\n            <Box\n              alignItems=\"start\"\n              className=\"allocatedBox\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"start\"\n            >\n              <Typography>\n                <FormattedMessage id=\"profitsharing.howmuch\" />\n              </Typography>\n              <NumberInput\n                control={control}\n                defaultValue={allocatedBalance}\n                error={!!errors.allocatedBalance}\n                name=\"allocatedBalance\"\n                placeholder={intl.formatMessage({\n                  id: \"trader.amount.placeholder.1\",\n                })}\n                quote={provider.copyTradingQuote}\n                rules={{\n                  required: true,\n                  validate: (/** @type {string} */ val) => validateAmount(val),\n                }}\n              />\n              {errors.allocatedBalance && (\n                <span className={\"text red\"}>{errors.allocatedBalance.message}</span>\n              )}\n              <FormHelperText component=\"div\">\n                <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n                  <FormattedMessage id=\"deposit.available\" />\n                  {balanceLoading ? (\n                    <CircularProgress color=\"primary\" size={15} />\n                  ) : (\n                    <>\n                      {provider.copyTradingQuote}&nbsp;\n                      <span className=\"balance\">{formatNumber(quoteBalance)}</span>\n                    </>\n                  )}\n                </Box>\n              </FormHelperText>\n            </Box>\n\n            <Typography className=\"modeTitle\">\n              <FormattedMessage id=\"profitsharing.profitsmode\" />\n            </Typography>\n\n            <ToggleButtonGroup\n              className=\"modeButtons\"\n              exclusive\n              onChange={(e, val) => val && setProfitsMode(val)}\n              value={profitsMode}\n            >\n              <ToggleButton value=\"reinvest\">\n                <FormattedMessage id=\"trader.reinvest\" />\n              </ToggleButton>\n              <ToggleButton value=\"withdraw\">\n                <FormattedMessage id=\"trader.withdraw\" />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h3\">\n              <FormattedMessage id=\"profitsharing.confirm\" />\n            </Typography>\n\n            <Typography className=\"summaryTitle\">\n              <FormattedMessage id=\"profitsharing.investing\" />\n              :&nbsp;\n              <b>\n                {allocatedBalance} {provider.copyTradingQuote}\n              </b>\n            </Typography>\n            <Typography>\n              <FormattedMessage id=\"profitsharing.profitswillbe\" />\n              :&nbsp;\n              <b>\n                <FormattedMessage\n                  id={\n                    profitsMode === \"reinvest\"\n                      ? \"profitsharing.reinvested\"\n                      : \"profitsharing.withdrawn\"\n                  }\n                />\n              </b>\n            </Typography>\n            <Box className=\"acks\" display=\"flex\" flexDirection=\"column\">\n              {terms.map((ack) => (\n                <Box className=\"ack\" key={ack}>\n                  <label className=\"customLabel\">\n                    <Controller\n                      control={control}\n                      defaultValue={false}\n                      name={ack}\n                      render={({ onChange, value }) => (\n                        <Checkbox\n                          checked={value}\n                          className=\"checkboxInput\"\n                          onChange={(e) => onChange(e.target.checked)}\n                        />\n                      )}\n                      rules={{\n                        required: true,\n                      }}\n                    />\n                    <FormattedMessage\n                      id={`profitsharing.${ack}`}\n                      values={{ quote: provider.copyTradingQuote }}\n                    />\n                    {helpUrls[ack] && (\n                      <a\n                        style={{\n                          color: \"currentcolor\",\n                          verticalAlign: \"middle\",\n                          display: \"inline\",\n                          marginLeft: \"2px\",\n                        }}\n                        title=\"More Info\"\n                        href={helpUrls[ack]}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Help style={{ fontSize: \"22px\" }} />\n                      </a>\n                    )}\n                  </label>\n                </Box>\n              ))}\n            </Box>\n            <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\">\n              <Typography>\n                <FormattedMessage id=\"profitsharing.confirmtransfer\" />\n              </Typography>\n              <OutlinedInput\n                className=\"customInput transferInput\"\n                error={!!errors.transfer}\n                inputRef={register({\n                  validate: (val) => val.toLowerCase() === \"transfer\",\n                })}\n                name=\"transfer\"\n                placeholder={intl.formatMessage({\n                  id: \"trader.ack.placeholder\",\n                })}\n              />\n            </Box>\n          </>\n        )}\n        <CustomButton\n          className=\"full submitButton\"\n          disabled={balanceLoading || !isValid}\n          loading={loading}\n          type=\"submit\"\n        >\n          {step === 1 && provider.disable ? (\n            <FormattedMessage id=\"action.next\" />\n          ) : (\n            <>\n              <FormattedMessage id=\"trader.ack.placeholder\" /> {allocatedBalance}{\" \"}\n              {provider.copyTradingQuote}\n            </>\n          )}\n        </CustomButton>\n      </Box>\n    </form>\n  );\n};\n\nexport default CopyPSForm;\n","import React from \"react\";\nimport \"./ConnectTraderForm.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { useIntl } from \"react-intl\";\nimport { Help } from \"@material-ui/icons\";\nimport { useStoreUserExchangeConnections } from \"hooks/useStoreUserSelector\";\nimport CopyTraderForm from \"components/Forms/CopyTraderForm\";\nimport CopyPSForm from \"components/Forms/CopyPSForm\";\nimport CustomButton from \"components/CustomButton\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n * @property {Function} onClose\n * @property {Function} onSuccess\n */\n\n/**\n * Form wrapper to connect to a PS/CT service.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ConnectTraderForm = ({ provider, onClose, onSuccess }) => {\n  const selectedExchange = useSelectedExchange();\n  const intl = useIntl();\n  const storeUserExchangeConnections = useStoreUserExchangeConnections();\n\n  /**\n   * @returns {String} Exchange name to display in the error.\n   */\n  const prepareExchangeName = () => {\n    let name = \"\";\n    for (let i = 0; i < provider.exchanges.length; i++) {\n      if (provider.exchanges[i + 1]) {\n        name += `${provider.exchanges[i]}/`;\n      } else {\n        name += `${provider.exchanges[i]}`;\n      }\n    }\n    return name;\n  };\n\n  /**\n   * Check if selected exchange is compatible with service.\n   * @returns {string} Error message\n   */\n  const checkWrongExchange = () => {\n    if (storeUserExchangeConnections.length > 0) {\n      if (provider.profitSharing && selectedExchange.paperTrading) {\n        // Demo account\n        return intl.formatMessage({ id: \"copyt.copy.error4\" });\n      }\n      if (provider.exchanges.length) {\n        const correctExchange = provider.exchanges.includes(selectedExchange.name.toLowerCase());\n        const correctType =\n          provider.exchangeType.toLowerCase() === selectedExchange.exchangeType.toLowerCase();\n\n        if (!correctExchange && provider.profitSharing) {\n          // PS need a zignaly account\n          return intl.formatMessage(\n            { id: \"copyt.copy.error1\" },\n            {\n              required: \"TheBull\",\n            },\n          );\n        } else if (!correctExchange || (!correctType && !provider.profitSharing)) {\n          // CT or SP: Wrong exchange or type\n          let exchangeName = prepareExchangeName();\n          return intl.formatMessage(\n            { id: \"copyt.copy.error1\" },\n            {\n              required: `${exchangeName.toUpperCase()} ${provider.exchangeType.toUpperCase()}`,\n            },\n          );\n        }\n      }\n    } else {\n      // No account\n      return intl.formatMessage({ id: \"copyt.copy.error2\" });\n    }\n    return \"\";\n  };\n\n  const wrongExchange = checkWrongExchange();\n\n  const redirectToHelp = () => {\n    const link =\n      \"https://help.zignaly.com/hc/en-us/articles/360019579879-I-have-an-error-of-incorrect-exchange-account-when-trying-to-connect-to-a-Profit-Sharing-service-\";\n    window.open(link, \"_blank\");\n  };\n\n  return (\n    <Box className=\"connectTraderForm\">\n      {wrongExchange ? (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"wrongExchangeBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <Typography className=\"wrongExchangeTitle\" variant=\"h3\">\n            <Box alignItems=\"center\" component=\"span\" display=\"flex\" flexDirection=\"row\">\n              <FormattedMessage id=\"profitsharing.wrongexchange\" />\n              <Help className=\"helpIcon\" onClick={redirectToHelp} />\n            </Box>\n          </Typography>\n          <Typography>{wrongExchange}</Typography>\n        </Box>\n      ) : !selectedExchange.activated ? (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"wrongExchangeBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <Typography className=\"wrongExchangeTitle\" variant=\"h3\">\n            <FormattedMessage id=\"copyt.activate.title\" />\n          </Typography>\n          <Typography>\n            <FormattedMessage id=\"copyt.activate.desc\" />\n          </Typography>\n          <CustomButton className=\"submitButton\" href=\"#exchangeAccounts\">\n            <FormattedMessage id=\"accounts.deposit\" />\n          </CustomButton>\n        </Box>\n      ) : provider.profitSharing ? (\n        <CopyPSForm onClose={onClose} onSuccess={onSuccess} provider={provider} />\n      ) : (\n        <CopyTraderForm onClose={onClose} onSuccess={onSuccess} provider={provider} />\n      )}\n    </Box>\n  );\n};\n\nexport default ConnectTraderForm;\n","import React from \"react\";\nimport \"./SuccessBox.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport Link from \"../../../../LocalizedLink\";\nimport { FormattedMessage } from \"react-intl\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst SuccessBox = ({ provider }) => {\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"successBox\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n      p={4}\n    >\n      <Typography variant=\"h3\">\n        <FormattedMessage id=\"copyt.transfermade\" />\n      </Typography>\n\n      <Typography variant=\"body1\">\n        <FormattedMessage id=\"copyt.transfermade.message\" />\n      </Typography>\n      <Link className=\"link\" partiallyActive={true} to={`/dashboard/analytics#${provider.id}`}>\n        <Typography variant=\"h4\">\n          <FormattedMessage id=\"copyt.transfermade.link\" />\n        </Typography>\n      </Link>\n    </Box>\n  );\n};\n\nexport default SuccessBox;\n","import React, { useState } from \"react\";\nimport \"./CopyTraderButton.scss\";\nimport { Box, Typography, Tooltip } from \"@material-ui/core\";\nimport CustomButton from \"../../../CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport Modal from \"../../../Modal\";\nimport ConnectTraderForm from \"../../../Forms/ConnectTraderForm\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport ExchangeIcon from \"../../../ExchangeIcon\";\nimport { useStoreUserExchangeConnections } from \"../../../../hooks/useStoreUserSelector\";\nimport ConnectExchange from \"../../../Modal/ConnectExchange\";\nimport StopCopyingTraderForm from \"../../../Forms/StopCopyingTraderForm\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { getProvider } from \"../../../../store/actions/views\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../../store/actions/ui\";\nimport { ConfirmDialog } from \"../../../Dialogs\";\nimport SuccessBox from \"./SuccessBox\";\nimport { isNil } from \"lodash\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * Button to copy a service provider.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst CopyTraderButton = ({ provider }) => {\n  const selectedExchange = useSelectedExchange();\n  const dispatch = useDispatch();\n  const exchangeConnections = useStoreUserExchangeConnections();\n  const [copyModal, showCopyModal] = useState(false);\n  const [connectModal, showConnectModal] = useState(false);\n  const [stopCopyingModal, showStopCopyingModal] = useState(false);\n  const [copySuccessModal, showCopySuccessModal] = useState(false);\n  const [cancelDisconnectLoader, showCancelDisconnectLoader] = useState(false);\n  const { profitSharing } = provider;\n  const disabled = provider.disable;\n  const sameSelectedExchange = provider.exchangeInternalId === selectedExchange.internalId;\n  const followingFrom =\n    exchangeConnections &&\n    exchangeConnections.find((e) => e.internalId === provider.exchangeInternalId);\n  const exchangeData =\n    provider.exchangeInternalIds &&\n    provider.exchangeInternalIds.find((item) => item.internalId === selectedExchange.internalId);\n  const disconnecting = exchangeData && exchangeData.disconnecting;\n\n  /**\n   * @typedef {import(\"../../../Dialogs/ConfirmDialog/ConfirmDialog\").ConfirmDialogConfig} ConfirmDialogConfig\n   * @type {ConfirmDialogConfig} initConfirmConfig\n   */\n  const initConfirmConfig = {\n    titleTranslationId: \"\",\n    messageTranslationId: \"\",\n    visible: false,\n  };\n\n  const [confirmConfig, setConfirmConfig] = useState(initConfirmConfig);\n\n  const confirmCancel = () => {\n    setConfirmConfig({\n      titleTranslationId: \"copyt.canceldisconnect.title\",\n      messageTranslationId: \"copyt.canceldisconnect.body\",\n      visible: true,\n    });\n  };\n\n  const startCopying = () => {\n    if (exchangeConnections.length) {\n      showCopyModal(true);\n    } else {\n      showConnectModal(true);\n    }\n  };\n\n  const handleCopyModalClose = () => {\n    showCopyModal(false);\n  };\n\n  const handleCopySuccessModalOpen = () => {\n    showCopySuccessModal(true);\n  };\n\n  const handleCopySuccessModalClose = () => {\n    showCopySuccessModal(false);\n  };\n\n  const handleConnectModalClose = () => {\n    showConnectModal(false);\n  };\n\n  const handleStopCopyingModalClose = () => {\n    showStopCopyingModal(false);\n  };\n\n  const cancelDisconnect = () => {\n    showCancelDisconnectLoader(true);\n    const payload = {\n      providerId: provider.id,\n      internalExchangeId: selectedExchange.internalId,\n    };\n    tradeApi\n      .providerCancelDisconnect(payload)\n      .then(() => {\n        const providerPayload = {\n          providerId: provider.id,\n          exchangeInternalId: selectedExchange.internalId,\n        };\n        dispatch(getProvider(providerPayload, true));\n        dispatch(\n          showSuccessAlert(\"srv.canceldisconnect.alert.title\", \"srv.canceldisconnect.alert.body\"),\n        );\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        showCancelDisconnectLoader(false);\n      });\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"copyTraderButton\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <ConfirmDialog\n        confirmConfig={confirmConfig}\n        executeActionCallback={cancelDisconnect}\n        setConfirmConfig={setConfirmConfig}\n      />\n      <>\n        {!disconnecting ? (\n          disabled ? (\n            !provider.liquidated &&\n            (isNil(provider.maxAllocatedBalance) ||\n              provider.performance.totalBalance < provider.maxAllocatedBalance) && (\n              <CustomButton className=\"submitButton\" onClick={startCopying}>\n                <FormattedMessage id=\"copyt.copythistrader\" />\n              </CustomButton>\n            )\n          ) : !profitSharing && !sameSelectedExchange ? (\n            <Box\n              alignItems=\"center\"\n              className=\"actionHelpBox\"\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"flex-start\"\n            >\n              <Typography variant=\"h4\">\n                <FormattedMessage id=\"copyt.followingfrom\" />\n              </Typography>\n              <Tooltip placement=\"top\" title={followingFrom ? followingFrom.internalName : \"\"}>\n                <Box>\n                  <ExchangeIcon\n                    exchange={followingFrom ? followingFrom.name.toLowerCase() : \"\"}\n                    size=\"mediumLarge\"\n                  />\n                </Box>\n              </Tooltip>\n            </Box>\n          ) : (\n            <CustomButton className=\"loadMoreButton\" onClick={() => showStopCopyingModal(true)}>\n              <FormattedMessage id=\"copyt.stopcopyingtrader\" />\n            </CustomButton>\n          )\n        ) : (\n          !disabled && (\n            <Tooltip\n              placement=\"right\"\n              title={<FormattedMessage id=\"copyt.canceldisconnecting.tooltip\" />}\n            >\n              <Box>\n                <CustomButton\n                  className=\"loadMoreButton\"\n                  loading={cancelDisconnectLoader}\n                  onClick={confirmCancel}\n                >\n                  <FormattedMessage id=\"copyt.canceldisconnecting\" />\n                </CustomButton>\n              </Box>\n            </Tooltip>\n          )\n        )}\n      </>\n      <Modal\n        onClose={handleStopCopyingModalClose}\n        persist={false}\n        size=\"small\"\n        state={stopCopyingModal}\n      >\n        <StopCopyingTraderForm onClose={handleStopCopyingModalClose} provider={provider} />\n      </Modal>\n      <Modal onClose={handleCopyModalClose} persist={false} size=\"small\" state={copyModal}>\n        <ConnectTraderForm\n          onClose={handleCopyModalClose}\n          onSuccess={handleCopySuccessModalOpen}\n          provider={provider}\n        />\n      </Modal>\n      <Modal\n        onClose={handleCopySuccessModalClose}\n        persist={false}\n        size=\"small\"\n        state={copySuccessModal}\n      >\n        <SuccessBox provider={provider} />\n      </Modal>\n      <Modal onClose={handleConnectModalClose} size=\"small\" state={connectModal}>\n        <ConnectExchange onClose={handleConnectModalClose} />\n      </Modal>\n    </Box>\n  );\n};\n\nexport default CopyTraderButton;\n","import React from \"react\";\nimport { useStoreUserData } from \"../../../hooks/useStoreUserSelector\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst PaymentForm = ({ provider }) => {\n  const storeUserData = useStoreUserData();\n  const ipnURL = \"https://zignaly.com/api/cryptoPaymentListener.php\";\n  const baseURL = process.env.GATSBY_BASE_APP_URL;\n\n  const createReturnSuccessUrl = () => {\n    if (provider.isCopyTrading) {\n      return `${baseURL}/copyTraders/${provider.id}#success`;\n    }\n    return `${baseURL}/signalProviders/${provider.id}#success`;\n  };\n\n  const createReturnErrorUrl = () => {\n    if (provider.isCopyTrading) {\n      return `${baseURL}/copyTraders/${provider.id}#error`;\n    }\n    return `${baseURL}/signalProviders/${provider.id}#error`;\n  };\n\n  const returnSuccessURL = createReturnSuccessUrl();\n  const returnErrorURL = createReturnErrorUrl();\n\n  return (\n    <form action=\"https://www.coinpayments.net/index.php\" method=\"post\">\n      <input name=\"cmd\" type=\"hidden\" value=\"_pay\" />\n      <input name=\"reset\" type=\"hidden\" value=\"1\" />\n      <input name=\"merchant\" type=\"hidden\" value={provider.internalPaymentInfo.merchantId} />\n      <input name=\"item_name\" type=\"hidden\" value=\"TheBull Provider\" />\n      <input name=\"currency\" type=\"hidden\" value=\"USD\" />\n      <input name=\"amountf\" type=\"hidden\" value={provider.internalPaymentInfo.price} />\n      <input name=\"quantity\" type=\"hidden\" value=\"1\" />\n      <input name=\"allow_quantity\" type=\"hidden\" value=\"1\" />\n      <input name=\"want_shipping\" type=\"hidden\" value=\"0\" />\n      <input name=\"success_url\" type=\"hidden\" value={returnSuccessURL} />\n      <input name=\"cancel_url\" type=\"hidden\" value={returnErrorURL} />\n      <input name=\"allow_extra\" type=\"hidden\" value=\"0\" />\n      <input name=\"invoice\" type=\"hidden\" value={provider.id} />\n      <input name=\"custom\" type=\"hidden\" value={storeUserData.userId} />\n      <input name=\"ipn_url\" type=\"hidden\" value={ipnURL} />\n      <input\n        alt=\"Buy Now with CoinPayments.net\"\n        src=\"https://www.coinpayments.net/images/pub/buynow-grey.png\"\n        type=\"image\"\n      />\n    </form>\n  );\n};\n\nexport default PaymentForm;\n","import React from \"react\";\nimport \"./Disclaimer.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport PaymentForm from \"../../../Forms/PaymentForm\";\nimport CustomButton from \"../../../CustomButton\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n * @property {Function} onClose\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst Disclaimer = ({ provider, onClose }) => {\n  const handleClick = () => {\n    onClose();\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"disclaimer\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n    >\n      <Typography variant=\"h3\">\n        <FormattedMessage id=\"srv.disclaimer.title\" />\n      </Typography>\n\n      <Typography variant=\"body1\">\n        <FormattedMessage id=\"srv.disclaimer.text\" />\n      </Typography>\n\n      <Box\n        alignItems=\"center\"\n        className=\"actions\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-evenly\"\n      >\n        <PaymentForm provider={provider} />\n        <CustomButton className=\"textButton\" onClick={handleClick}>\n          <FormattedMessage id=\"action.cancel\" />\n        </CustomButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Disclaimer;\n","import React, { useState } from \"react\";\nimport \"./PaymentButton.scss\";\nimport { Box } from \"@material-ui/core\";\nimport Modal from \"../../../Modal\";\nimport Disclaimer from \"../../Profile/Disclaimer\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst PaymentButton = ({ provider }) => {\n  const [modal, showModal] = useState(false);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"paymentButton\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <Modal onClose={() => showModal(false)} persist={false} size=\"small\" state={modal}>\n        <Disclaimer onClose={() => showModal(false)} provider={provider} />\n      </Modal>\n      <input\n        alt=\"Buy Now with CoinPayments.net\"\n        onClick={() => showModal(true)}\n        src=\"https://www.coinpayments.net/images/pub/buynow-grey.png\"\n        type=\"image\"\n      />\n    </Box>\n  );\n};\n\nexport default PaymentButton;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport moment from \"moment\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * Trial Period compoennt for CT profile Header.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst TrialPeriod = ({ provider }) => {\n  const currentTime = new Date().getTime();\n\n  const getTime = () => {\n    return moment.duration(parseInt(provider.stripe.cancelDate) - currentTime).humanize();\n  };\n\n  const Expiry = () => {\n    return (\n      <>\n        {parseInt(provider.stripe.cancelDate) - currentTime > 0 ? (\n          <Typography className=\"trial\" variant=\"h4\">\n            <b>\n              <FormattedMessage id=\"srv.text.expires\" />\n              {getTime()}\n            </b>\n          </Typography>\n        ) : provider.customerKey && provider.enableInProvider ? (\n          <Typography className=\"trial green\" variant=\"h4\">\n            <b>\n              <FormattedMessage id=\"srv.text.active\" />\n            </b>\n          </Typography>\n        ) : (\n          <Typography className=\"trial red\" variant=\"h4\">\n            <b>\n              <FormattedMessage id=\"srv.text.expired\" />\n            </b>\n          </Typography>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {provider.exchangeInternalId && !provider.disable ? (\n        <Expiry />\n      ) : (\n        <Typography className=\"trial\" variant=\"h4\">\n          <FormattedMessage id=\"copyt.trial\" />\n          <b>\n            {provider.internalPaymentInfo.trial ? provider.internalPaymentInfo.trial : 0}\n            <b>\n              <FormattedMessage id=\"srv.text.days\" />\n            </b>\n          </b>\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default TrialPeriod;\n","import React, { useState } from \"react\";\nimport { Box, TextField, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from \"react-intl\";\nimport useStoreSettingsSelector from \"../../../hooks/useStoreSettingsSelector\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { getProvider } from \"../../../store/actions/views\";\nimport { showSuccessAlert, showErrorAlert } from \"../../../store/actions/ui\";\nimport \"./ClonedProviderEditForm.scss\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n * @property {Function} onClose\n */\n/**\n * About us compoennt for CT profile.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\n\nconst CopyTraderEditProfileForm = ({ provider, onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const storeSettings = useStoreSettingsSelector();\n  const selectedExchange = useSelectedExchange();\n  const { errors, handleSubmit, control } = useForm({ mode: \"all\" });\n  const dispatch = useDispatch();\n\n  /**\n   *\n   * @typedef {Object} SubmitObject\n   * @property {String} name\n   * @property {String} logoUrl\n   */\n\n  /**\n   * Function to submit edit form.\n   *\n   * @param {SubmitObject} data Form data received at submit.\n   * @returns {void} None.\n   */\n  const onSubmit = (data) => {\n    setLoading(true);\n    const payload = {\n      ...data,\n      providerId: provider.id,\n    };\n    tradeApi\n      .clonedProviderEdit(payload)\n      .then(() => {\n        const providerPayload = {\n          providerId: payload.providerId,\n          exchangeInternalId: selectedExchange.internalId,\n        };\n        dispatch(getProvider(providerPayload, true));\n        dispatch(showSuccessAlert(\"alert.profileedit.title\", \"alert.profileedit.body\"));\n        onClose();\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"cloneEditForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"srv.cloneform.title\" />{\" \"}\n        </Typography>\n\n        <Box className=\"inputBox\" display=\"flex\" flexDirection=\"column\">\n          <label className={\"customLabel\"}>\n            <FormattedMessage id=\"srv.edit.title\" />\n          </label>\n          <Controller\n            as={\n              <TextField\n                className={\n                  \"customInput \" +\n                  (storeSettings.darkStyle ? \" dark \" : \" light \") +\n                  (errors.name ? \"error\" : \"\")\n                }\n                fullWidth\n                variant=\"outlined\"\n              />\n            }\n            control={control}\n            defaultValue={provider.name}\n            name=\"name\"\n            rules={{\n              required: true,\n              maxLength: 50,\n              minLength: 5,\n            }}\n          />\n          {errors.name && (\n            <span className=\"errorText\">\n              <FormattedMessage id=\"form.error.name.length\" />\n            </span>\n          )}\n        </Box>\n\n        <Box className=\"formAction\" display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n          <CustomButton\n            className={\"full submitButton\"}\n            loading={loading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            <FormattedMessage id=\"action.saveData\" />\n          </CustomButton>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nexport default CopyTraderEditProfileForm;\n","import React, { useState } from \"react\";\nimport \"./CloneEdit.scss\";\nimport EditIcon from \"../../../../images/ct/edit.svg\";\nimport Modal from \"../../../Modal\";\nimport CloneEditForm from \"../../../Forms/ClonedProviderEditForm\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst CloneEdit = ({ provider }) => {\n  const [modal, showModal] = useState(false);\n\n  return (\n    <>\n      <img alt=\"zignaly\" className=\"editIcon\" onClick={() => showModal(true)} src={EditIcon} />\n      <Modal onClose={() => showModal(false)} persist={false} size=\"small\" state={modal}>\n        <CloneEditForm onClose={() => showModal(false)} provider={provider} />\n      </Modal>\n    </>\n  );\n};\n\nexport default CloneEdit;\n","import React, { useState } from \"react\";\nimport \"./FollowProviderButton.scss\";\nimport { Box, Typography, Tooltip } from \"@material-ui/core\";\nimport CustomButton from \"../../../CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { getProvider } from \"../../../../store/actions/views\";\nimport ExchangeIcon from \"../../../ExchangeIcon\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { useStoreUserExchangeConnections } from \"../../../../hooks/useStoreUserSelector\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../../store/actions/ui\";\n// import { userPilotProviderEnabled } from \"../../../../utils/userPilotApi\";\nimport Modal from \"../../../Modal\";\nimport ConnectExchange from \"../../../Modal/ConnectExchange\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst FollowProviderButton = ({ provider }) => {\n  const selectedExchange = useSelectedExchange();\n  const exchangeConnections = useStoreUserExchangeConnections();\n  const [connectModal, showConnectModal] = useState(false);\n  const dispatch = useDispatch();\n  const [loader, setLoader] = useState(false);\n\n  const handleConnectModalClose = () => {\n    showConnectModal(false);\n  };\n\n  const followProvider = () => {\n    if (exchangeConnections.length) {\n      setLoader(true);\n      const payload = {\n        providerId: provider.id,\n        connected: false,\n        exchangeInternalId: selectedExchange.internalId,\n      };\n      tradeApi\n        .providerConnect(payload)\n        .then(() => {\n          const payload2 = {\n            providerId: provider.id,\n            exchangeInternalId: selectedExchange.internalId,\n          };\n          dispatch(getProvider(payload2, true));\n          dispatch(showSuccessAlert(\"srv.follow.alert.title\", \"srv.follow.alert.body\"));\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoader(false);\n        });\n    } else {\n      showConnectModal(true);\n    }\n  };\n\n  const stopFollowing = async () => {\n    if (exchangeConnections.length) {\n      setLoader(true);\n      const payload = {\n        disable: true,\n        providerId: provider.id,\n        type: \"connected\",\n      };\n      tradeApi\n        .providerDisable(payload)\n        .then(() => {\n          const payload2 = {\n            providerId: provider.id,\n            exchangeInternalId: selectedExchange.internalId,\n          };\n          dispatch(getProvider(payload2, true));\n          // userPilotProviderEnabled();\n          dispatch(showSuccessAlert(\"srv.unfollow.alert.title\", \"srv.unfollow.alert.body\"));\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoader(false);\n        });\n    } else {\n      showConnectModal(true);\n    }\n  };\n\n  const followingFrom = exchangeConnections.find(\n    (e) => e.internalId === provider.exchangeInternalId,\n  );\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"followProviderButton\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <Modal onClose={handleConnectModalClose} size=\"small\" state={connectModal}>\n        <ConnectExchange onClose={handleConnectModalClose} />\n      </Modal>\n      {provider.disable ? (\n        <CustomButton className=\"submitButton\" loading={loader} onClick={followProvider}>\n          <FormattedMessage id=\"srv.followprovider\" />\n        </CustomButton>\n      ) : !followingFrom || provider.exchangeInternalId === selectedExchange.internalId ? (\n        <CustomButton className=\"loadMoreButton\" loading={loader} onClick={stopFollowing}>\n          <FormattedMessage id=\"srv.stopfollowing\" />\n        </CustomButton>\n      ) : (\n        <Box\n          alignItems=\"center\"\n          className=\"actionHelpBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"flex-start\"\n        >\n          <Typography variant=\"h4\">\n            <FormattedMessage id=\"copyt.followingfrom\" />\n          </Typography>\n          <Tooltip placement=\"top\" title={followingFrom.internalName}>\n            <Box>\n              <ExchangeIcon exchange={followingFrom.name.toLowerCase()} size=\"mediumLarge\" />\n            </Box>\n          </Tooltip>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default FollowProviderButton;\n","import React from \"react\";\nimport \"./TraderHeaderActions.scss\";\nimport { Box, Typography, Hidden } from \"@material-ui/core\";\nimport CopyTraderButton from \"../CopyTraderButton\";\nimport PaymentButton from \"../PaymentButton\";\nimport TrialPeriod from \"./TrialPeriod\";\nimport CloneEdit from \"../CloneEdit\";\nimport ProviderLogo from \"../ProviderLogo\";\nimport FollowProviderButton from \"../FollowProviderButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport { isNumber } from \"lodash\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n\n/**\n * Trader Header Actions compoennt for CT profile.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst TraderHeaderActions = ({ provider }) => {\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"traderHeaderActions\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      flexWrap=\"wrap\"\n      justifyContent=\"flex-start\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"titleBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"flex-start\"\n      >\n        <ProviderLogo\n          size=\"40px\"\n          title={provider.name}\n          url={provider.logoUrl}\n          verified={provider.verified}\n        />\n        <Typography variant=\"h1\">{provider.name}</Typography>\n        {provider.isAdmin && provider.isClone && <CloneEdit provider={provider} />}\n      </Box>\n      {provider.isCopyTrading ? (\n        <>\n          <CopyTraderButton provider={provider} />\n          {provider.liquidated ? (\n            <Typography className=\"red\" variant=\"h4\">\n              <FormattedMessage id=\"srv.liquidated\" />\n            </Typography>\n          ) : isNumber(provider.maxAllocatedBalance) &&\n            provider.performance.totalBalance >= provider.maxAllocatedBalance ? (\n            <Typography className=\"red\" variant=\"h4\">\n              <FormattedMessage id=\"srv.maxAllocationReached\" />\n            </Typography>\n          ) : null}\n        </>\n      ) : (\n        <FollowProviderButton provider={provider} />\n      )}\n      <Hidden xsDown>\n        {!provider.profitSharing && provider.internalPaymentInfo && (\n          <TrialPeriod provider={provider} />\n        )}\n        {!provider.disable && !provider.profitSharing && provider.internalPaymentInfo && (\n          <PaymentButton provider={provider} />\n        )}\n      </Hidden>\n    </Box>\n  );\n};\n\nexport default TraderHeaderActions;\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props\n * @returns {JSX.Element} Component JSX.\n */\nconst BaseCurrency = ({ provider }) => {\n  const getProvideQuotes = () => {\n    let quotes = \"\";\n    if (provider.signalProviderQuotes) {\n      if (provider.signalProviderQuotes.length <= 2) {\n        for (let a = 0; a < provider.signalProviderQuotes.length; a++) {\n          quotes += provider.signalProviderQuotes[a];\n          if (a !== provider.signalProviderQuotes.length - 1) {\n            quotes += \", \";\n          }\n        }\n      } else {\n        for (let a = 0; a < 2; a++) {\n          quotes += provider.signalProviderQuotes[a];\n          if (a !== 1) {\n            quotes += \", \";\n          } else {\n            quotes += \"...\";\n          }\n        }\n      }\n    }\n    return quotes;\n  };\n\n  const getProviderQuotesTooltip = () => {\n    let quotes = \"\";\n    if (provider.signalProviderQuotes) {\n      for (let a = 0; a < provider.signalProviderQuotes.length; a++) {\n        quotes += provider.signalProviderQuotes[a];\n        if (a !== provider.signalProviderQuotes.length - 1) {\n          quotes += \", \";\n        }\n      }\n    }\n    return quotes;\n  };\n\n  return (\n    <>\n      {provider.isCopyTrading ? (\n        <b>{provider.copyTradingQuote ? provider.copyTradingQuote.toUpperCase() : \"\"}</b>\n      ) : (\n        <Tooltip placement=\"top\" title={getProviderQuotesTooltip()}>\n          <b>{getProvideQuotes()}</b>\n        </Tooltip>\n      )}\n    </>\n  );\n};\n\nexport default BaseCurrency;\n","import React, { useState } from \"react\";\nimport \"./TraderHeaderInfo.scss\";\nimport { Box, Typography, Hidden, Tooltip } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport ExchangeIcon from \"../../../ExchangeIcon\";\nimport EditIcon from \"../../../../images/ct/edit.svg\";\nimport Modal from \"../../../Modal\";\nimport { formatFloat } from \"../../../../utils/format\";\nimport PaymentButton from \"../PaymentButton\";\nimport TrialPeriod from \"../TraderHeaderActions/TrialPeriod\";\nimport BaseCurrency from \"../BaseCurrency\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport SuccessBox from \"../CopyTraderButton/SuccessBox\";\nimport ConnectTraderForm from \"../../../Forms/ConnectTraderForm\";\n\n/**\n * @typedef {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider\n */\n\n/**\n * Trader Header Info compoennt for CT profile.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} JSX Element JSX.\n */\nconst TraderHeaderInfo = ({ provider }) => {\n  const selectedExchange = useSelectedExchange();\n  const [copyModal, showCopyModal] = useState(false);\n  const [copySuccessModal, showCopySuccessModal] = useState(false);\n  const sameSelectedExchange = provider.exchangeInternalId === selectedExchange.internalId;\n  const selectedExchangeProviderData =\n    provider.exchangeInternalIds &&\n    provider.exchangeInternalIds.find((item) => item.internalId === selectedExchange.internalId);\n  const profitsMode = selectedExchangeProviderData ? selectedExchangeProviderData.profitsMode : \"\";\n\n  const handleCopyModalClose = () => {\n    showCopyModal(false);\n  };\n\n  const handleCopySuccessModalOpen = () => {\n    showCopySuccessModal(true);\n  };\n\n  const handleCopySuccessModalClose = () => {\n    showCopySuccessModal(false);\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"providerHeaderInfo\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      {provider.isCopyTrading && (\n        <Typography className=\"base\" variant=\"h4\">\n          <span>\n            {provider.isCopyTrading ? (\n              <FormattedMessage id=\"fil.quote\" />\n            ) : (\n              <FormattedMessage id=\"srv.edit.quotes\" />\n            )}\n          </span>\n          <BaseCurrency provider={provider} />\n        </Typography>\n      )}\n\n      {!provider.profitSharing && (\n        <Typography className=\"trade\" variant=\"h4\">\n          <span>\n            <FormattedMessage id=\"copyt.trading\" />\n          </span>\n          <Box className=\"imageBox\">\n            {provider.exchanges.map((item, index) => (\n              <ExchangeIcon exchange={item} key={index} size=\"small\" />\n            ))}\n          </Box>\n        </Typography>\n      )}\n\n      <Typography className=\"copiers\" variant=\"h4\">\n        <span>\n          {provider.isCopyTrading ? (\n            <FormattedMessage id=\"copyt.copiers\" />\n          ) : (\n            <FormattedMessage id=\"srv.followers\" />\n          )}\n        </span>\n        <b>{provider.followers} </b>\n      </Typography>\n\n      {provider.profitSharing ? (\n        <>\n          <Tooltip\n            placement=\"top\"\n            title={\n              <FormattedMessage\n                id=\"copyt.successfee.tooltip\"\n                values={{\n                  providerShare: provider.profitsShare,\n                  userShare: 100 - provider.profitsShare,\n                }}\n              />\n            }\n          >\n            <Typography className=\"price\" variant=\"h4\">\n              <span>\n                <FormattedMessage id=\"copyt.successfee\" />\n              </span>\n              <b>{`${provider.profitsShare}%`}</b>\n            </Typography>\n          </Tooltip>\n          {provider.maxDrawdown && (\n            <Tooltip\n              placement=\"top\"\n              title={<FormattedMessage id=\"copyt.profitsharing.maxDrawdown.usertooltip\" />}\n            >\n              <Typography className=\"traderType\" variant=\"h4\">\n                <span>\n                  <FormattedMessage id=\"copyt.profitsharing.maxDrawdown.short\" />\n                </span>\n                <b>{provider.maxDrawdown}%</b>\n              </Typography>\n            </Tooltip>\n          )}\n        </>\n      ) : (\n        <Typography className=\"price\" variant=\"h4\">\n          <span>\n            <FormattedMessage id=\"srv.edit.price\" />\n          </span>\n          <b>{`$${provider.price}/Month`}</b>\n        </Typography>\n      )}\n      <Hidden smUp>\n        {provider.profitSharing && provider.internalPaymentInfo && (\n          <TrialPeriod provider={provider} />\n        )}\n      </Hidden>\n\n      {provider.isCopyTrading &&\n        Boolean(provider.allocatedBalance || provider.minAllocatedBalance) && (\n          <Typography className=\"allocated\" variant=\"h4\">\n            {!provider.disable ? (\n              <>\n                <FormattedMessage id=\"srv.allocated\" />\n                <b>\n                  {formatFloat(provider.allocatedBalance)}{\" \"}\n                  {provider.copyTradingQuote ? provider.copyTradingQuote.toUpperCase() : \"\"}\n                </b>\n              </>\n            ) : (\n              !provider.profitSharing && (\n                <>\n                  <FormattedMessage id=\"srv.minimum\" />\n                  <b>\n                    {formatFloat(provider.minAllocatedBalance)}{\" \"}\n                    {provider.copyTradingQuote ? provider.copyTradingQuote.toUpperCase() : \"\"}\n                  </b>\n                </>\n              )\n            )}\n            {(sameSelectedExchange || selectedExchangeProviderData) && !provider.disable && (\n              <img\n                alt=\"zignaly\"\n                className=\"editIcon\"\n                onClick={() => showCopyModal(true)}\n                src={EditIcon}\n              />\n            )}\n          </Typography>\n        )}\n\n      <Typography className=\"traderType\" variant=\"h4\">\n        <span>\n          <FormattedMessage id=\"accounts.exchange.type\" />\n        </span>\n        <b>\n          {provider.profitSharing ? (\n            <FormattedMessage id=\"copyt.profitsharing\" />\n          ) : provider.isCopyTrading ? (\n            <FormattedMessage id=\"copyt.copytrading\" />\n          ) : (\n            <FormattedMessage id=\"srv.signalProvider\" />\n          )}\n          {provider.exchangeType && ` (${provider.exchangeType.toUpperCase()})`}\n          {provider.profitSharing && profitsMode && ` / ${profitsMode}`}\n        </b>\n      </Typography>\n\n      <Hidden smUp>\n        {!provider.disable && !provider.profitSharing && provider.internalPaymentInfo && (\n          <PaymentButton provider={provider} />\n        )}\n      </Hidden>\n      <Modal onClose={handleCopyModalClose} persist={false} size=\"small\" state={copyModal}>\n        <ConnectTraderForm\n          onClose={handleCopyModalClose}\n          onSuccess={handleCopySuccessModalOpen}\n          provider={provider}\n        />\n      </Modal>\n      <Modal\n        onClose={handleCopySuccessModalClose}\n        persist={false}\n        size=\"small\"\n        state={copySuccessModal}\n      >\n        <SuccessBox provider={provider} />\n      </Modal>\n      <Modal\n        onClose={handleCopySuccessModalClose}\n        persist={false}\n        size=\"small\"\n        state={copySuccessModal}\n      >\n        <SuccessBox provider={provider} />\n      </Modal>\n    </Box>\n  );\n};\n\nexport default TraderHeaderInfo;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport \"./ProviderHeader.scss\";\nimport { Box } from \"@material-ui/core\";\nimport SubNavHeader from \"../../SubNavHeader\";\nimport {\n  createProviderRoutes,\n  createTraderRoutes,\n  createProfitSharingRoutes,\n} from \"../../../utils/routesMapping\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport TraderHeaderActions from \"./TraderHeaderActions\";\nimport TraderHeaderInfo from \"./TraderHeaderInfo\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport ProviderContext from \"../../../context/ProviderContext\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ConfirmDialog } from \"components/Dialogs\";\nimport { navigate } from \"gatsby\";\n\n/**\n * @typedef {import('../../../utils/routesMapping').NavigationLink} NavigationLink\n */\n\n/**\n * Provides the navigation bar for the opened provider.\n *\n * @returns {JSX.Element} Component JSX.\n */\nconst ProviderHeader = () => {\n  const { provider } = useStoreViewsSelector();\n  const selectedExchange = useSelectedExchange();\n  const providerId = typeof window !== \"undefined\" ? location.pathname.split(\"/\")[2] : \"\";\n  const [links, setLinks] = useState(/** @type {Array<NavigationLink>} */ ([]));\n  const { hasAllocated } = useContext(ProviderContext);\n  const [confirmConfig, setConfirmConfig] = useState({\n    titleTranslationId: \"\",\n    messageTranslationId: \"\",\n    visible: false,\n  });\n\n  useEffect(() => {\n    const routes = provider.isCopyTrading\n      ? !provider.profitSharing\n        ? createTraderRoutes(providerId, provider)\n        : createProfitSharingRoutes(providerId, provider)\n      : createProviderRoutes(providerId, provider, selectedExchange);\n    if (!provider.isCopyTrading) {\n      routes.links.forEach((item) => {\n        if (item.to.includes(\"settings\") && !hasAllocated) {\n          item.tooltip = <FormattedMessage id=\"srv.settings.tooltip\" />;\n        }\n      });\n    }\n    setLinks(routes ? routes.links : []);\n  }, [provider, selectedExchange.internalId, hasAllocated]);\n\n  useEffect(() => {\n    if (provider.profitSharing && !provider.maxDrawdown && provider.isAdmin) {\n      setConfirmConfig({\n        visible: true,\n        titleTranslationId: \"copyt.profitsharing.maxDrawdown.modal.title\",\n        messageTranslationId: \"copyt.profitsharing.maxDrawdown.modal\",\n      });\n    }\n  }, []);\n\n  const handleMaxDrawdown = () => {\n    const editLink = links.find((l) => l.id === \"srv.edit\");\n    if (editLink) {\n      navigate(editLink.to);\n    }\n  };\n\n  const checkAccess = () => {\n    // Reset focus: https://github.com/ReactTraining/react-router/issues/5210\n    window.scrollTo(0, 0);\n  };\n  useEffect(checkAccess, []);\n\n  return (\n    <Box\n      className=\"providerHeader\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n    >\n      <ConfirmDialog\n        confirmConfig={confirmConfig}\n        executeActionCallback={handleMaxDrawdown}\n        setConfirmConfig={setConfirmConfig}\n      />\n      <TraderHeaderActions provider={provider} />\n      <TraderHeaderInfo provider={provider} />\n      <SubNavHeader links={links} />\n    </Box>\n  );\n};\n\nexport default ProviderHeader;\n","import React from \"react\";\nimport \"./ProviderLayout.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport ProviderHeader from \"../../components/Provider/ProviderHeader\";\nimport FAQ from \"../../components/FAQ\";\nimport useStoreViewsSelector from \"../../hooks/useStoreViewsSelector\";\n\n/**\n * @typedef {Object} ProviderLayoutProps\n * @property {Object} children\n */\n\n/**\n * Default component props.\n *\n * @param {ProviderLayoutProps} props Default component props.\n * @returns {JSX.Element} Component.\n */\nconst ProviderLayout = ({ children }) => {\n  const storeViews = useStoreViewsSelector();\n\n  return (\n    <Box\n      alignItems=\"flex-start\"\n      className=\"providerLayout\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n    >\n      {storeViews.provider.loading || !storeViews.provider.id ? (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={50} />\n        </Box>\n      ) : (\n        <>\n          <ProviderHeader />\n          <Box className=\"pageContent\">{children}</Box>\n        </>\n      )}\n      <Box className=\"faq\">\n        <FAQ />\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProviderLayout;\n"],"names":["onClose","exchanges","useExchangeList","Box","alignItems","className","display","flexDirection","Typography","variant","id","values","getExchangeNamesCombined","CustomButton","onClick","navigateReach","ProviderRoute","props","component","others","React","selectedExchange","shouldExecute","useState","balance","setBalance","loading","setLoading","dispatch","useDispatch","useEffect","internalId","paperTrading","tradeApi","then","data","catch","e","showErrorAlert","finally","control","quote","defaultValue","placeholder","error","name","rules","allocated","setAllocated","render","TextField","InputProps","endAdornment","InputAdornment","position","fullWidth","onBlur","onChange","target","value","match","replace","provider","onSuccess","useSelectedExchange","actionLoading","setActionLoading","profitsMode","setProfitsMode","undefined","alert","setAlert","useForm","errors","handleSubmit","setError","intl","useIntl","useAvailableBalance","profitSharing","handleShareingModeChange","val","onSubmit","transfer","toLowerCase","type","message","validateAllocated","allocatedBalance","validateBalance","payload","balanceFilter","connected","providerId","exchangeInternalId","payload2","getProvider","showSuccessAlert","added","parseFloat","alreadyAllocated","neededQuote","copyTradingQuote","userBalance","noBalanceMsg","formatMessage","noBalanceToIncreaseMsg","disable","needed","minAllocatedBalance","validateNeeded","amount","justifyContent","Boolean","Alert","classes","icon","severity","Help","window","open","required","multiline","rows","mode","shouldUnregister","isValid","formState","register","watch","trigger","balanceLoading","quoteBalance","step","setStep","terms","exchangeType","unshift","privacy","push","helpUrls","ack1","ack2","ack3","payloadProvider","validate","newAllocated","maxAllocatedBalance","max","validateAmount","FormHelperText","CircularProgress","color","size","formatNumber","ToggleButtonGroup","exclusive","ToggleButton","map","ack","key","Checkbox","checked","style","verticalAlign","marginLeft","title","href","rel","fontSize","OutlinedInput","inputRef","disabled","storeUserExchangeConnections","useStoreUserExchangeConnections","wrongExchange","length","correctExchange","includes","correctType","exchangeName","i","prepareExchangeName","toUpperCase","checkWrongExchange","activated","p","partiallyActive","to","exchangeConnections","copyModal","showCopyModal","connectModal","showConnectModal","stopCopyingModal","showStopCopyingModal","copySuccessModal","showCopySuccessModal","cancelDisconnectLoader","showCancelDisconnectLoader","sameSelectedExchange","followingFrom","find","exchangeData","exchangeInternalIds","item","disconnecting","titleTranslationId","messageTranslationId","visible","confirmConfig","setConfirmConfig","handleCopyModalClose","handleConnectModalClose","handleStopCopyingModalClose","executeActionCallback","internalExchangeId","providerPayload","Tooltip","placement","liquidated","performance","totalBalance","internalName","ExchangeIcon","exchange","Modal","persist","state","StopCopyingTraderForm","ConnectExchange","storeUserData","useStoreUserData","baseURL","process","returnSuccessURL","isCopyTrading","returnErrorURL","action","method","internalPaymentInfo","merchantId","price","userId","alt","src","modal","showModal","currentTime","Date","getTime","Expiry","parseInt","stripe","cancelDate","moment","humanize","customerKey","enableInProvider","trial","storeSettings","useStoreSettingsSelector","flexWrap","as","darkStyle","maxLength","minLength","EditIcon","loader","setLoader","stopFollowing","ProviderLogo","url","logoUrl","verified","isAdmin","isClone","Hidden","xsDown","quotes","signalProviderQuotes","a","getProviderQuotesTooltip","getProvideQuotes","selectedExchangeProviderData","handleCopySuccessModalClose","index","followers","providerShare","profitsShare","userShare","maxDrawdown","smUp","formatFloat","useStoreViewsSelector","location","pathname","split","links","setLinks","hasAllocated","useContext","ProviderContext","routes","createProfitSharingRoutes","createTraderRoutes","createProviderRoutes","forEach","tooltip","scrollTo","editLink","l","navigate","SubNavHeader","children","storeViews","FAQ"],"sourceRoot":""}