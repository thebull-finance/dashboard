{"version":3,"file":"component---src-pages-change-email-index-js-851cca9b2e1144c487bf.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Forms/ResetForm/ResetForm.js","webpack://zignaly-webapp/./src/components/Forms/ChangeEmailForm/ChangeEmailForm.js","webpack://zignaly-webapp/./src/pages/changeEmail/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ResetForm.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport Logo from \"images/logo/logoNW.svg\";\nimport { FormattedMessage } from \"react-intl\";\nimport Link from \"components/LocalizedLink\";\n\n/**\n * @param {Object} props Props.\n * @param {string} props.code Reset Code.\n * @param {function} props.form Form component to embed.\n * @returns {JSX.Element} JSx component.\n */\nconst ResetForm = ({ code, form: Form }) => {\n  const [expired, setExpired] = useState(false);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"resetForm\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n    >\n      {!expired ? (\n        <>\n          <img alt=\"TheBull\" className=\"logo\" src={Logo} />\n          <Form code={code} setExpired={setExpired} />\n        </>\n      ) : (\n        <Box alignItems=\"center\" className=\"errorBox\" display=\"flex\" flexDirection=\"column\">\n          <Typography variant=\"h3\">\n            <FormattedMessage id=\"recover.error\" />\n          </Typography>\n          <Link className=\"loginLink\" to=\"/login\">\n            <FormattedMessage id=\"backtologin.text\" />\n          </Link>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ResetForm;\n","import React, { useState } from \"react\";\nimport { Box, TextField, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm } from \"react-hook-form\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../../store/actions/ui\";\nimport { navigate } from \"gatsby\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { emailRegex } from \"utils/validators\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} code Token aquired by the recover request.\n */\n\n/**\n * Reset Password form component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Reset Password element.\n */\nconst ChangeEmailForm = ({ code }) => {\n  const [loading, setLoading] = useState(false);\n  const [emailsDoNotMatch, setEmailsDoNotMatch] = useState(false);\n  const intl = useIntl();\n  const { errors, handleSubmit, register } = useForm({\n    mode: \"onChange\",\n  });\n  const dispatch = useDispatch();\n\n  /**\n   * @typedef {Object} DataObject\n   * @property {String} confirmNewEmail\n   * @property {String} newEmail\n   */\n\n  /**\n   * Data returned at form submition.\n   *\n   * @param {DataObject} data form data received by the submit method.\n   * @returns {void}\n   */\n  const onSubmit = (data) => {\n    if (data.confirmNewEmail === data.newEmail) {\n      setLoading(true);\n      const payload = {\n        token: code,\n        email: data.newEmail,\n      };\n      tradeApi\n        .changeEmailConfirm(payload)\n        .then(() => {\n          dispatch(showSuccessAlert(\"\", \"alert.changeemail.confirm.body\"));\n          navigate(\"/login\");\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    } else {\n      setEmailsDoNotMatch(true);\n    }\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"resetPasswordForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"changeemail.form.title\" />\n        </Typography>\n\n        <Box\n          alignItems=\"start\"\n          className=\"inputBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"start\"\n        >\n          <label className=\"customLabel\">\n            <FormattedMessage id=\"security.newemail\" />\n          </label>\n\n          <TextField\n            className=\"customInput\"\n            error={!!errors.newEmail}\n            fullWidth\n            inputRef={register({\n              required: intl.formatMessage({ id: \"security.email.error.empty\" }),\n              pattern: {\n                value: emailRegex,\n                message: intl.formatMessage({ id: \"security.email.error.invalid\" }),\n              },\n            })}\n            name=\"newEmail\"\n            onBlur={() => setEmailsDoNotMatch(false)}\n            onPaste={(e) => e.preventDefault()}\n            type=\"email\"\n            variant=\"outlined\"\n          />\n          {errors.newEmail && <span className=\"errorText\">{errors.newEmail.message}</span>}\n        </Box>\n\n        <Box\n          alignItems=\"start\"\n          className=\"inputBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"start\"\n        >\n          <label className=\"customLabel\">\n            <FormattedMessage id=\"security.confirmnewemail\" />\n          </label>\n\n          <TextField\n            className=\"customInput\"\n            error={!!errors.newEmail}\n            fullWidth\n            inputRef={register({\n              required: intl.formatMessage({ id: \"security.email.error.empty\" }),\n              pattern: {\n                value: emailRegex,\n                message: intl.formatMessage({ id: \"security.email.error.invalid\" }),\n              },\n            })}\n            name=\"confirmNewEmail\"\n            onBlur={() => setEmailsDoNotMatch(false)}\n            onPaste={(e) => e.preventDefault()}\n            type=\"email\"\n            variant=\"outlined\"\n          />\n          {errors.confirmNewEmail && (\n            <span className=\"errorText\">{errors.confirmNewEmail.message}</span>\n          )}\n\n          {emailsDoNotMatch && (\n            <span className=\"errorText\">\n              <FormattedMessage id=\"security.email.match.error\" />\n            </span>\n          )}\n        </Box>\n\n        <Box className=\"inputBox\">\n          <CustomButton\n            className={\"full submitButton\"}\n            loading={loading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            <FormattedMessage id=\"action.changeemail\" />\n          </CustomButton>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nexport default ChangeEmailForm;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport ChangeEmailForm from \"components/Forms/ChangeEmailForm\";\nimport ResetForm from \"components/Forms/ResetForm\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} token Token aquired by the change email request.\n */\n\n/**\n * Change Email page component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Change email element.\n */\nconst ChangeEmail = ({ token }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({ id: \"changeemail.title\" })} | ${intl.formatMessage({\n            id: \"product\",\n          })}`}\n        </title>\n      </Helmet>\n      <ResetForm code={token} form={ChangeEmailForm} />\n    </>\n  );\n};\n\nexport default ChangeEmail;\n"],"names":["code","Form","form","useState","expired","setExpired","Box","alignItems","className","display","flexDirection","justifyContent","Typography","variant","id","to","alt","src","Logo","loading","setLoading","emailsDoNotMatch","setEmailsDoNotMatch","intl","useIntl","useForm","mode","errors","handleSubmit","register","dispatch","useDispatch","onSubmit","data","confirmNewEmail","newEmail","payload","token","email","tradeApi","then","showSuccessAlert","navigate","catch","e","showErrorAlert","finally","method","TextField","error","fullWidth","inputRef","required","formatMessage","pattern","value","emailRegex","message","name","onBlur","onPaste","preventDefault","type","CustomButton","onClick","Helmet","ResetForm","ChangeEmailForm"],"sourceRoot":""}