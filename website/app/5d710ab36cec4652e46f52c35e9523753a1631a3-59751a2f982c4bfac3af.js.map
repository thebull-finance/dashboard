{"version":3,"file":"5d710ab36cec4652e46f52c35e9523753a1631a3-59751a2f982c4bfac3af.js","mappings":"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","sources":["webpack://zignaly-webapp/./node_modules/@material-ui/icons/AddCircle.js","webpack://zignaly-webapp/./node_modules/@material-ui/icons/RemoveCircle.js","webpack://zignaly-webapp/./src/components/Forms/ModifyUserSubscription/ModifyUserSubscription.js","webpack://zignaly-webapp/./src/components/Provider/ProviderUsers/UsersTable/UsersTable.js","webpack://zignaly-webapp/./src/components/Provider/ProviderUsers/UserFilters/UserFilters.js","webpack://zignaly-webapp/./src/components/Provider/ProviderUsers/ProviderUsers.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"\n}), 'RemoveCircle');\n\nexports.default = _default;","import React, { useState } from \"react\";\nimport \"./ModifyUserSubscription.scss\";\nimport { Box, Typography, Slider } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../../../store/actions/ui\";\n\n/**\n * Provides a table to display providers' profits stats.\n *\n * @typedef {Object} DefaultProps\n * @property {String} followerId\n * @property {*} onClose\n * @property {Function} loadData\n *\n *\n * @param {DefaultProps} props Component props.\n * @returns {JSX.Element} Component JSX.\n */\n\nconst ModifyUserSubscription = ({ followerId, onClose, loadData }) => {\n  const storeViews = useStoreViewsSelector();\n  const [days, setDays] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  /**\n   * Function to submit user data.\n   *\n   * @returns {void} None.\n   */\n  const onSubmit = () => {\n    setLoading(true);\n    const payload = {\n      providerId: storeViews.provider.id,\n      followerId: followerId,\n      days: days,\n    };\n\n    tradeApi\n      .modifySubscription(payload)\n      .then((response) => {\n        if (response) {\n          loadData();\n        }\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  /**\n   * Function to increment days.\n   *\n   * @returns {void} None.\n   */\n  const increment = () => {\n    if (days !== 100) {\n      setDays(days + 1);\n    }\n  };\n\n  /**\n   * Function to decrement days.\n   *\n   * @returns {void} None.\n   */\n  const decrement = () => {\n    if (days !== -100) {\n      setDays(days - 1);\n    }\n  };\n\n  /**\n   * Function to handle days change\n   *\n   * @param {React.ChangeEvent} e Change event.\n   * @param {Number} val New Value.\n   * @returns {void} None.\n   */\n  const handleDaysChange = (e, val) => {\n    setDays(val);\n  };\n\n  return (\n    <Box className=\"modifyUserSubscription\" display=\"flex\" flexDirection=\"column\">\n      <Box\n        alignItems=\"center\"\n        className=\"formBox\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"space-between\"\n      >\n        <Typography variant=\"h4\">\n          <FormattedMessage id=\"users.modify.title\" />\n        </Typography>\n\n        <Box\n          alignItems=\"center\"\n          className=\"addSubBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"space-between\"\n        >\n          <RemoveCircleIcon className=\"addIcon\" color=\"primary\" onClick={decrement} />\n          <Typography variant=\"h3\">\n            {days}{\" \"}\n            {days === 1 ? (\n              <FormattedMessage id=\"users.modify.day\" />\n            ) : (\n              <FormattedMessage id=\"users.modify.days\" />\n            )}\n          </Typography>\n          <AddCircleIcon className=\"addIcon\" color=\"primary\" onClick={increment} />\n        </Box>\n\n        <Slider\n          className=\"sliderInput\"\n          max={100}\n          min={-100}\n          onChange={handleDaysChange}\n          step={1}\n          value={days}\n        />\n      </Box>\n      <Box className=\"formAction\" display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-end\">\n        <CustomButton className=\"submitButton\" loading={loading} onClick={onSubmit}>\n          <FormattedMessage id=\"action.update\" />\n        </CustomButton>\n        <CustomButton className=\"textButton\" onClick={onClose}>\n          <FormattedMessage id=\"action.cancel\" />\n        </CustomButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ModifyUserSubscription;\n","import React, { useState } from \"react\";\nimport \"./UsersTable.scss\";\nimport { Box, CircularProgress, Tooltip } from \"@material-ui/core\";\nimport Table from \"../../../Table\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport EditIcon from \"../../../../images/ct/edit.svg\";\nimport Modal from \"../../../Modal\";\nimport ModifyUserSubscription from \"../../../Forms/ModifyUserSubscription\";\nimport { formatDate, formatFloat, formatFloat2Dec } from \"../../../../utils/format\";\nimport { ConfirmDialog } from \"../../../Dialogs\";\nimport useStoreViewsSelector from \"../../../../hooks/useStoreViewsSelector\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../../../../store/actions/ui\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { findIndex } from \"lodash\";\n\n/** ]\n * @typedef {import(\"mui-datatables\").MUIDataTableColumn} MUIDataTableColumn\n * @typedef {import(\"mui-datatables\").MUIDataTableMeta} MUIDataTableMeta\n * @typedef {import(\"services/tradeApiClient.types\").ProviderFollowersEntity} ProviderFollowersEntity\n * @typedef {import(\"services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import(\"components/Table/Table.js\").TablePaginationOptions} TablePaginationOptions\n */\n\n/**\n * Provides a table to display providers' profits stats.\n *\n * @typedef {Object} DefaultProps\n * @property {string | React.ReactNode} title Table title.\n * @property {DefaultProviderGetObject} provider Provider entity.\n * @property {string} persistKey Key to save display columns settings.\n * @property {Array<ProviderFollowersEntity>} list\n * @property {Function} loadData\n * @property {Boolean} filtersVisibility\n * @property {React.SetStateAction<*>} setFiltersVisibility\n * @property {TablePaginationOptions} paginationOptions\n * @property {boolean} loading\n *\n * @param {DefaultProps} props Component props.\n * @returns {JSX.Element} Component JSX.\n */\nconst UsersTable = ({\n  title,\n  provider,\n  persistKey,\n  list,\n  loadData,\n  filtersVisibility,\n  setFiltersVisibility,\n  paginationOptions,\n  loading,\n}) => {\n  const storeViews = useStoreViewsSelector();\n  const intl = useIntl();\n\n  /**\n   * @typedef {import(\"../../../Dialogs/ConfirmDialog/ConfirmDialog\").ConfirmDialogConfig} ConfirmDialogConfig\n   * @type {ConfirmDialogConfig} initConfirmConfig\n   */\n  const initConfirmConfig = {\n    titleTranslationId: \"users.cancel.title\",\n    messageTranslationId: \"users.cancel.subtitle\",\n    visible: false,\n  };\n\n  const [modifyModal, showModifyModal] = useState(false);\n  const [cancelLoading, setCancelLoading] = useState(false);\n  const [followerId, setFollower] = useState(\"\");\n  const [actionType, setActionType] = useState(\"cancel\");\n  const [confirmConfig, setConfirmConfig] = useState(initConfirmConfig);\n  const dispatch = useDispatch();\n  const excludedColumns = [\n    \"col.users.suspended\",\n    \"col.users.code\",\n    \"col.users.lasttransaction\",\n    \"col.users.canceldate\",\n    \"col.users.modify\",\n    \"col.users.cancel\",\n  ];\n\n  const toggleFilters = () => {\n    setFiltersVisibility(!filtersVisibility);\n  };\n\n  /**\n   * Format Yes/No value.\n   * @param {boolean} val Val.\n   * @returns {React.ReactNode} Formatted node.\n   */\n  const renderYesNo = (val) => (\n    <span>\n      {intl.formatMessage({\n        id: val ? \"general.yes\" : \"general.no\",\n      })}\n    </span>\n  );\n\n  /**\n   * @type {Array<MUIDataTableColumn>} Table columns\n   */\n  let columns = [\n    {\n      name: \"userId\",\n      label: \"col.users.userid\",\n    },\n    {\n      name: \"email\",\n      label: \"col.users.email\",\n    },\n    {\n      name: \"name\",\n      label: \"col.users.name\",\n    },\n    {\n      name: \"connected\",\n      label: \"col.users.connected\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n        customBodyRender: renderYesNo,\n      },\n    },\n    {\n      name: \"active\",\n      label: \"col.users.active\",\n      options: {\n        customBodyRender: renderYesNo,\n      },\n    },\n    {\n      name: \"suspended\",\n      label: \"col.users.suspended\",\n      options: {\n        customBodyRender: renderYesNo,\n      },\n    },\n    {\n      name: \"realExchangeConnected\",\n      label: \"col.users.realexchange\",\n      options: {\n        customBodyRender: (val) => {\n          return (\n            <span>\n              {\" \"}\n              {val ? (\n                <FormattedMessage id=\"account.real\" />\n              ) : (\n                <FormattedMessage id=\"account.demo\" />\n              )}\n            </span>\n          );\n        },\n      },\n    },\n    {\n      name: \"allocatedBalance\",\n      label: \"col.users.allocatedbalance\",\n      options: {\n        customBodyRender: (val) => {\n          return <span>{formatFloat(val)}</span>;\n        },\n      },\n    },\n    {\n      name: \"profitsFromClosedBalance\",\n      label: \"col.users.profits\",\n      options: {\n        customBodyRender: (val) => {\n          return <span>{formatFloat(val)}</span>;\n        },\n      },\n    },\n    {\n      name: \"code\",\n      label: \"col.users.code\",\n    },\n    {\n      name: \"lastTransactionId\",\n      label: \"col.users.lasttransaction\",\n    },\n    {\n      name: \"cancelDate\",\n      label: \"col.users.canceldate\",\n      options: {\n        customBodyRender: (val) => {\n          return val === \"-\" ? val : <span>{formatDate(val, \"YY/MM/DD HH:MM\")}</span>;\n        },\n      },\n    },\n    {\n      name: \"userId\",\n      label: \"col.users.modify\",\n      options: {\n        customBodyRender: (val) => {\n          return (\n            <img\n              alt=\"zignaly\"\n              className=\"editIcon\"\n              onClick={() => editSubscription(val)}\n              src={EditIcon}\n            />\n          );\n        },\n      },\n    },\n    {\n      name: \"userId\",\n      label: \"col.users.cancel\",\n      options: {\n        customBodyRender: (val) => {\n          return cancelLoading && followerId === val ? (\n            <CircularProgress color=\"primary\" size={24} />\n          ) : checkIfSuspended(val) ? (\n            <Tooltip placement=\"top\" title=\"Enable\">\n              <AddCircleOutlineIcon\n                className=\"cancelIcon green\"\n                onClick={() => confirmEnable(val)}\n              />\n            </Tooltip>\n          ) : (\n            <Tooltip placement=\"top\" title=\"Cancel\">\n              <HighlightOffIcon className=\"cancelIcon red\" onClick={() => confirmCancel(val)} />\n            </Tooltip>\n          );\n        },\n      },\n    },\n  ];\n\n  /**\n   * @type {Array<MUIDataTableColumn>} Table columns\n   */\n  const profitSharingExtraColumns = [\n    {\n      name: \"profitsMode\",\n      label: \"col.users.profitsmode\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n      },\n    },\n    {\n      name: \"originalAllocated\",\n      label: \"col.users.originallyallocated\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n        customBodyRenderLite: (dataIndex) => {\n          return (\n            <span>{`${list[dataIndex].unit} ${formatFloat(\n              list[dataIndex].originalAllocated,\n            )}`}</span>\n          );\n        },\n      },\n    },\n    {\n      name: \"profitsShare\",\n      label: \"col.users.profitshare\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n        customBodyRender: (val) => {\n          return <span>{`${formatFloat2Dec(val)}%`}</span>;\n        },\n      },\n    },\n    {\n      name: \"retain\",\n      label: \"col.users.retain\",\n      options: {\n        display: \"true\",\n        viewColumns: true,\n        customBodyRenderLite: (dataIndex) => {\n          return <span>{formatFloat2Dec(list[dataIndex].retain)}</span>;\n        },\n      },\n    },\n  ];\n\n  /**\n   * Exclude data table column display.\n   *\n   * @param {Array<MUIDataTableColumn>} columnList Table columns list.\n   * @param {string} columnId ID of the column to remove.\n   *\n   * @returns {Void} .\n   */\n  function excludeDataTableColumn(columnList, columnId) {\n    const columnIndex = findIndex(columnList, {\n      label: columnId,\n    });\n\n    // Remove column when exists.\n    if (columnIndex > -1) {\n      columns[columnIndex].options = {\n        viewColumns: false,\n        display: \"excluded\",\n      };\n    }\n  }\n\n  if (provider.profitSharing) {\n    excludedColumns.forEach((item) => {\n      excludeDataTableColumn(columns, item);\n    });\n\n    columns = columns.concat(profitSharingExtraColumns);\n  }\n\n  /**\n   * Function to check if user is suspended.\n   *\n   * @param {String} id ID of the user entity in row.\n   * @returns {Boolean} Whether user is suspended or not.\n   */\n  const checkIfSuspended = (id) => {\n    let found = list.find((item) => item.userId === id);\n    if (found) {\n      return !!found.suspended;\n    }\n    return true;\n  };\n\n  /**\n   *\n   * @param {String} data ID of the user.\n   * @returns {void} None.\n   */\n  const editSubscription = (data) => {\n    setFollower(data);\n    showModifyModal(true);\n  };\n\n  /**\n   *\n   * @returns {void} None.\n   */\n  const toggleSubscription = () => {\n    setCancelLoading(true);\n    const payload = {\n      providerId: storeViews.provider.id,\n      followerId: followerId,\n      cancel: actionType === \"cancel\",\n    };\n\n    tradeApi\n      .cancelSubscription(payload)\n      .then(() => {\n        setCancelLoading(false);\n        loadData();\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n        setCancelLoading(false);\n      });\n  };\n\n  /**\n   *\n   * @param {String} data ID of the user.\n   * @returns {void} None.\n   */\n  const confirmCancel = (data) => {\n    setFollower(data);\n    setActionType(\"cancel\");\n    setConfirmConfig({\n      titleTranslationId: \"users.cancel.title\",\n      messageTranslationId: \"users.cancel.subtitle\",\n      visible: true,\n    });\n  };\n\n  /**\n   *\n   * @param {String} data ID of the user.\n   * @returns {void} None.\n   */\n  const confirmEnable = (data) => {\n    setFollower(data);\n    setActionType(\"enable\");\n    setConfirmConfig({\n      titleTranslationId: \"users.enable.title\",\n      messageTranslationId: \"users.enable.subtitle\",\n      visible: true,\n    });\n  };\n\n  /**\n   * @type {*}\n   * @returns {void} None.\n   */\n  const handleModalClose = () => {\n    showModifyModal(false);\n  };\n\n  const customOptions = {\n    search: true,\n  };\n\n  return (\n    <Box className=\"usersTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n      <ConfirmDialog\n        confirmConfig={confirmConfig}\n        executeActionCallback={toggleSubscription}\n        setConfirmConfig={setConfirmConfig}\n      />\n      <Table\n        columns={columns}\n        data={list}\n        options={customOptions}\n        persistKey={persistKey}\n        title={title}\n        toggleFilters={toggleFilters}\n        paginationOptions={paginationOptions}\n        loading={loading}\n      />\n      <Modal onClose={handleModalClose} persist={false} size=\"small\" state={modifyModal}>\n        <ModifyUserSubscription\n          followerId={followerId}\n          loadData={loadData}\n          onClose={handleModalClose}\n        />\n      </Modal>\n    </Box>\n  );\n};\n\nexport default UsersTable;\n","import React from \"react\";\nimport \"./UserFilters.scss\";\nimport CustomSelect from \"../../../CustomSelect\";\nimport { Box } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\n\n/**\n * @typedef {import(\"../../../CustomSelect/CustomSelect\").OptionType} OptionType\n * @typedef {Object} FilterObject\n * @property {String} connected\n * @property {String} active\n * @property {String} suspended\n */\n\n/**\n * @typedef {Object} ProvidersFiltersPropTypes\n * @property {function} setFilters Callback that delegate filters update to caller.\n * @property {FilterObject} filters Current filters.\n * @property {Array<OptionType>} connectedOptions Exchanges options.\n * @property {Array<OptionType>} activeOptions Exchange types options.\n * @property {Array<OptionType>} suspendedOptions Quotes options.\n */\n\n/**\n * Provides filters for filtering providers.\n *\n * @param {ProvidersFiltersPropTypes} props Component properties.\n * @returns {JSX.Element} Component JSX.\n */\nconst UserFilters = ({\n  connectedOptions,\n  activeOptions,\n  suspendedOptions,\n  filters,\n  setFilters,\n}) => {\n  const intl = useIntl();\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"userFilters\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <CustomSelect\n        label={intl.formatMessage({ id: \"fil.connected\" })}\n        onChange={(/** @type {OptionType} */ val) => setFilters({ ...filters, connected: val })}\n        options={connectedOptions}\n        // @ts-ignore\n        value={filters.connected}\n      />\n      <CustomSelect\n        label={intl.formatMessage({ id: \"fil.active\" })}\n        onChange={(/** @type {string} */ val) => setFilters({ ...filters, active: val })}\n        options={activeOptions}\n        // @ts-ignore\n        value={filters.active}\n      />\n      <CustomSelect\n        label={intl.formatMessage({ id: \"fil.suspended\" })}\n        onChange={(/** @type {string} */ val) => setFilters({ ...filters, suspended: val })}\n        options={suspendedOptions}\n        // @ts-ignore\n        value={filters.suspended}\n      />\n    </Box>\n  );\n};\n\nexport default UserFilters;\n","import React, { useState } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport UsersTable from \"./UsersTable\";\nimport useProviderUsers from \"../../../hooks/useProviderUsers\";\nimport UserFilters from \"./UserFilters\";\nimport useStoreSettingsSelector from \"hooks/useStoreSettingsSelector\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {import('../../../services/tradeApiClient.types').DefaultProviderGetObject} provider\n */\n/**\n * About us compoennt for CT profile.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ProviderUsers = ({ provider }) => {\n  const persistKey = \"copytProfileUsers\";\n  const storeSettings = useStoreSettingsSelector();\n  const [paginationOptions, setPaginationOptions] = useState({\n    page: 1,\n    maxPerPage: storeSettings.rowsPerPage[persistKey] || 10,\n    sort: storeSettings.sortColumns[persistKey] ? storeSettings.sortColumns[persistKey].name : null,\n    direction: storeSettings.sortColumns[persistKey]\n      ? storeSettings.sortColumns[persistKey].direction\n      : null,\n  });\n\n  const {\n    users,\n    loadFollowersList,\n    connectedOptions,\n    activeOptions,\n    suspendedOptions,\n    filters,\n    setFilters,\n    filtersVisibility,\n    setFiltersVisibility,\n    total,\n    loading,\n  } = useProviderUsers(provider, paginationOptions);\n\n  const embedFilters = () => {\n    return (\n      <UserFilters\n        activeOptions={activeOptions}\n        connectedOptions={connectedOptions}\n        filters={filters}\n        setFilters={setFilters}\n        suspendedOptions={suspendedOptions}\n      />\n    );\n  };\n\n  return (\n    <>\n      {!users ? (\n        <CircularProgress color=\"primary\" />\n      ) : (\n        <UsersTable\n          filtersVisibility={filtersVisibility}\n          list={users}\n          loadData={loadFollowersList}\n          persistKey={persistKey}\n          provider={provider}\n          setFiltersVisibility={setFiltersVisibility}\n          title={embedFilters()}\n          loading={loading}\n          paginationOptions={{\n            total,\n            onRowsPerPageChange: (value) => {\n              setPaginationOptions({ ...paginationOptions, maxPerPage: value });\n            },\n            onPageChange: (value) => {\n              setPaginationOptions({ ...paginationOptions, page: value });\n            },\n            onColumnSortChange: (value, direction) => {\n              setPaginationOptions({ ...paginationOptions, sort: value, direction });\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ProviderUsers;\n"],"names":["_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","followerId","onClose","loadData","storeViews","useStoreViewsSelector","useState","days","setDays","loading","setLoading","dispatch","useDispatch","Box","className","display","flexDirection","alignItems","justifyContent","Typography","variant","id","RemoveCircle","color","onClick","AddCircle","Slider","max","min","onChange","e","val","step","value","CustomButton","payload","providerId","provider","tradeApi","then","response","catch","showErrorAlert","finally","title","persistKey","list","filtersVisibility","setFiltersVisibility","paginationOptions","intl","useIntl","modifyModal","showModifyModal","cancelLoading","setCancelLoading","setFollower","actionType","setActionType","titleTranslationId","messageTranslationId","visible","confirmConfig","setConfirmConfig","renderYesNo","formatMessage","columns","name","label","options","viewColumns","customBodyRender","formatFloat","formatDate","alt","editSubscription","src","EditIcon","CircularProgress","size","checkIfSuspended","Tooltip","placement","AddCircleOutline","confirmEnable","HighlightOff","confirmCancel","profitSharingExtraColumns","customBodyRenderLite","dataIndex","unit","originalAllocated","formatFloat2Dec","retain","profitSharing","forEach","item","columnList","columnId","columnIndex","concat","found","find","userId","suspended","data","handleModalClose","width","executeActionCallback","cancel","Table","search","toggleFilters","Modal","persist","state","connectedOptions","activeOptions","suspendedOptions","filters","setFilters","CustomSelect","connected","active","storeSettings","useStoreSettingsSelector","page","maxPerPage","rowsPerPage","sort","sortColumns","direction","setPaginationOptions","useProviderUsers","users","loadFollowersList","total","onRowsPerPageChange","onPageChange","onColumnSortChange"],"sourceRoot":""}