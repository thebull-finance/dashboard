{"version":3,"file":"00d9902d2edc63f25bd1d594d6258bc1cf48e80a-e61b01de8cc1100839a6.js","mappings":"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","sources":["webpack://zignaly-webapp/./node_modules/@material-ui/icons/AccountBalanceWallet.js","webpack://zignaly-webapp/./node_modules/@material-ui/icons/AssignmentTurnedIn.js","webpack://zignaly-webapp/./node_modules/@material-ui/icons/LocalMall.js","webpack://zignaly-webapp/./node_modules/@material-ui/icons/MonetizationOn.js","webpack://zignaly-webapp/./node_modules/@material-ui/icons/People.js","webpack://zignaly-webapp/./src/components/Balance/Coins/CoinsFilter/CoinsFilter.js","webpack://zignaly-webapp/./src/hooks/useDebounce.ts","webpack://zignaly-webapp/./src/components/Forms/ConvertCoinForm.tsx","webpack://zignaly-webapp/./src/components/Balance/Coins/CoinsTable/CoinsTable.tsx","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/ManagementSummaryCard/ManagementSummaryCard.js","webpack://zignaly-webapp/./src/hooks/useCTManagementSymmary.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/ManagementSummary/CopyTraderSummary.js","webpack://zignaly-webapp/./src/hooks/usePSManagementSymmary.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/ManagementSummary/FuturesProfitSharingSummary.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/ManagementSummary/SpotProfitSharingSummary.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Orders/Orders.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Contracts/Contracts.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Management/ExpandedRow/ExpandedRow.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Management/ExpandedRow/SelectionActions/SelectionActions.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Management/ManagementTable/ManagementTable.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Management/Management.js","webpack://zignaly-webapp/./src/hooks/useProviderAssets.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/Coins/Coins.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/ManagementTabs/ManagementTabs.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/SpotProfitSharingManagement.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/TraderManagement.js","webpack://zignaly-webapp/./src/components/Provider/ProviderManagement/FuturesProfitSharingManagement.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'AccountBalanceWallet');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\"\n}), 'AssignmentTurnedIn');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6h-2c0-2.76-2.24-5-5-5S7 3.24 7 6H5c-1.1 0-1.99.9-1.99 2L3 20c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-7-3c1.66 0 3 1.34 3 3H9c0-1.66 1.34-3 3-3zm0 10c-2.76 0-5-2.24-5-5h2c0 1.66 1.34 3 3 3s3-1.34 3-3h2c0 2.76-2.24 5-5 5z\"\n}), 'LocalMall');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z\"\n}), 'MonetizationOn');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"\n}), 'People');\n\nexports.default = _default;","import React, { useEffect, useState } from \"react\";\nimport \"./CoinsFilter.scss\";\nimport { Box, Checkbox } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n/**\n *\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ExchangeAsset} ExchangeAsset\n */\n\n/**\n *\n * @typedef {Object} DefaultProps\n * @property {Boolean} checked\n * @property {function(React.ChangeEvent<HTMLInputElement>):void} onChange\n */\n\n/**\n *\n * @param {DefaultProps} props Default props.\n */\n\nconst CoinsFilter = ({ checked, onChange }) => {\n  return (\n    <Box alignItems=\"center\" className=\"coinsFilter\" display=\"flex\" flexDirection=\"row\">\n      <Checkbox\n        checked={checked}\n        inputProps={{ \"aria-label\": \"Hide low value\" }}\n        onChange={onChange}\n      />\n      <FormattedMessage id=\"coins.filter.title\" />\n    </Box>\n  );\n};\n\nexport default CoinsFilter;\n","import { useEffect, useState } from \"react\";\n\nconst useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import React, { useEffect, useState } from \"react\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport tradeApi from \"../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../store/actions/ui\";\nimport { Typography, Box, CircularProgress } from \"@material-ui/core\";\nimport CustomButton from \"components/CustomButton\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport CustomSelect from \"components/CustomSelect\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { StyledCustomSelect } from \"../WalletView/styles\";\nimport AmountControl from \"components/WalletView/AmountControl\";\nimport useDebounce from \"hooks/useDebounce\";\nimport NumberFormat from \"react-number-format\";\n\ninterface ConvertCoinFormProps {\n  balance: string;\n  bases: string[];\n  base: string;\n  onClose: () => void;\n  onRefreshCoins: () => void;\n}\n\nconst ConvertCoinForm = ({\n  bases,\n  base,\n  balance,\n  onClose,\n  onRefreshCoins,\n}: ConvertCoinFormProps) => {\n  const balanceData: BalanceData = {\n    availableBalance: parseFloat(balance),\n    balance: parseFloat(balance),\n  };\n  const [loading, setLoading] = useState(false);\n  const [quotes, setQuotes] = useState([]);\n  const {\n    handleSubmit,\n    control,\n    errors,\n    formState: { isValid },\n    setValue,\n    watch,\n    trigger,\n  } = useForm({ mode: \"onChange\" });\n  const selectedBase = watch(\"base\", base);\n  const selectedQuote = watch(\"quote\");\n  const amount = watch(\"amount\");\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [previewConversion, setPreviewConversion] = useState<ConvertCoinPreviewRes>(null);\n  const selectedExchange = useSelectedExchange();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const debouncedAmount = useDebounce(amount, 1500);\n\n  useEffect(() => {\n    tradeApi\n      .getQuoteAssetFromBase({\n        base: selectedBase,\n        internalExchangeId: selectedExchange.internalId,\n      })\n      .then((response) => {\n        setQuotes(response.sort((a, b) => a.localeCompare(b)));\n        if (selectedQuote && !response.includes(selectedQuote)) {\n          // Selected quote not valid for new base\n          setValue(\"quote\", \"\");\n        } else if (isFilled()) {\n          // Selected base changed, force update preview.\n          loadPreview();\n        }\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      });\n  }, [selectedBase]);\n\n  const loadPreview = () => {\n    setPreviewConversion(null);\n    setPreviewLoading(true);\n\n    tradeApi\n      .convertCoinPreview({\n        from: selectedBase,\n        to: selectedQuote,\n        qty: amount,\n      })\n      .then((response) => {\n        setPreviewConversion(response);\n        // Update amount verification check. Without timeout, ROF doesn't check against updated minAmount...\n        setTimeout(() => {\n          trigger(\"amount\");\n        }, 0);\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setPreviewLoading(false);\n      });\n  };\n\n  const isFilled = () => selectedQuote && selectedBase && debouncedAmount;\n\n  // Update preview on change\n  useEffect(() => {\n    if (isFilled()) {\n      loadPreview();\n    }\n  }, [debouncedAmount, selectedQuote]);\n\n  const submitForm = () => {\n    setLoading(true);\n    tradeApi\n      .convertCoin({\n        internalExchangeId: selectedExchange.internalId,\n        from: selectedBase,\n        to: selectedQuote,\n        qty: amount,\n      })\n      .then(() => {\n        dispatch(showSuccessAlert(\"\", \"convert.success\"));\n        onRefreshCoins();\n        onClose();\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  const setBalanceMax = () => {\n    setValue(\"amount\", balance);\n    trigger(\"amount\");\n  };\n\n  return (\n    <Box alignItems=\"center\" display=\"flex\" flex={1} padding={4} flexDirection=\"column\">\n      <Typography align=\"center\" variant=\"h3\">\n        <FormattedMessage id=\"convert.title\" />\n      </Typography>\n      <form onSubmit={handleSubmit(submitForm)} style={{ width: \"100%\" }}>\n        <Box mt={5} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <StyledCustomSelect>\n            <Controller\n              control={control}\n              defaultValue={base}\n              name=\"base\"\n              render={({ onChange, value }) => (\n                <CustomSelect\n                  label={intl.formatMessage({ id: \"transfer.internal.form.from\" })}\n                  labelPlacement=\"top\"\n                  onChange={onChange}\n                  options={bases}\n                  placeholder={intl.formatMessage({ id: \"deposit.selectcoin\" })}\n                  search={true}\n                  value={value}\n                />\n              )}\n            />\n          </StyledCustomSelect>\n\n          <Box my={2} style={{ width: \"100%\" }}>\n            <StyledCustomSelect>\n              <Controller\n                defaultValue=\"\"\n                control={control}\n                name=\"quote\"\n                rules={{ required: true }}\n                render={({ onChange, value }) => (\n                  <CustomSelect\n                    label={intl.formatMessage({ id: \"transfer.internal.form.to\" })}\n                    labelPlacement=\"top\"\n                    options={quotes}\n                    placeholder={intl.formatMessage({ id: \"deposit.selectcoin\" })}\n                    search={true}\n                    value={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </StyledCustomSelect>\n          </Box>\n\n          <AmountControl\n            balance={balanceData}\n            setBalanceMax={setBalanceMax}\n            errors={errors}\n            control={control}\n            coin={base}\n            minAmount={previewConversion?.min}\n            decimals={8}\n          />\n\n          <Box display=\"flex\" alignItems=\"center\" height=\"100px\" justifyContent=\"center\">\n            {previewLoading ? (\n              <CircularProgress />\n            ) : (\n              previewConversion &&\n              parseFloat(amount) >= previewConversion.min && (\n                <>\n                  <Typography>\n                    <FormattedMessage id=\"convert.preview\" />\n                    &nbsp;\n                    <NumberFormat\n                      value={previewConversion.estimatedAmount}\n                      displayType=\"text\"\n                      suffix={` ${selectedQuote}`}\n                    />\n                  </Typography>\n                </>\n              )\n            )}\n          </Box>\n\n          <Box mt={2}>\n            <CustomButton\n              className=\"submitButton\"\n              loading={loading}\n              type=\"submit\"\n              disabled={!isValid || !previewConversion}\n            >\n              <FormattedMessage id=\"accounts.convert\" />\n            </CustomButton>\n          </Box>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default ConvertCoinForm;\n","import React, { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { formatFloat } from \"../../../../utils/format\";\nimport Table from \"../../../Table\";\nimport CustomButton from \"components/CustomButton\";\nimport { FormattedMessage } from \"react-intl\";\nimport Modal from \"components/Modal\";\nimport ConvertCoinForm from \"components/Forms/ConvertCoinForm\";\nimport { ExchangeAsset } from \"services/tradeApiClient.types\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { MUIDataTableColumn } from \"components/Table/Table\";\nimport { MUIDataTableOptions } from \"mui-datatables\";\n\ninterface CoinData {\n  coin: string;\n  balance: string;\n}\n\ninterface CoinsTableProps {\n  title: string | React.ReactNode;\n  /* Key to save display columns settings. **/\n  persistKey: string;\n  list: ExchangeAsset[];\n  onRefreshCoins?: () => void;\n}\n\nconst CoinsTable = ({ title, persistKey, list, onRefreshCoins }: CoinsTableProps) => {\n  const [convertCoin, setConvertCoin] = useState<CoinData>(null);\n  const coinsOptions = list\n    .filter((c) => parseFloat(c.balanceFree))\n    .map((c) => c.coin)\n    .sort((a, b) => a.localeCompare(b));\n  const selectedExchange = useSelectedExchange();\n\n  let columns: MUIDataTableColumn[] = [\n    {\n      name: \"coin\",\n      label: \"col.coins.coin\",\n    },\n    {\n      name: \"name\",\n      label: \"col.coins.name\",\n    },\n    {\n      name: \"balanceTotal\",\n      label: \"col.coins.total\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceFree\",\n      label: \"col.coins.available\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceLocked\",\n      label: \"col.coins.locked\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceTotalBTC\",\n      label: \"col.coins.btcvalue\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n    {\n      name: \"balanceTotalUSDT\",\n      label: \"col.coins.usdtvalue\",\n      options: {\n        customBodyRender: formatFloat,\n      },\n    },\n  ];\n\n  if (\n    selectedExchange.exchangeName.toLowerCase() === \"zignaly\" &&\n    selectedExchange.exchangeType === \"spot\" &&\n    onRefreshCoins\n  ) {\n    columns.push({\n      name: \"coin\",\n      label: \"col.actions\",\n      options: {\n        customBodyRender: (coin: string) => {\n          const balance = list.find((c) => c.coin === coin)?.balanceFree;\n\n          return (\n            <>\n              <CustomButton\n                className=\"textPurple\"\n                onClick={() => setConvertCoin({ coin, balance })}\n                style={{ padding: 0, minWidth: \"auto\" }}\n                disabled={!parseFloat(balance)}\n              >\n                <FormattedMessage id=\"accounts.convert\" />\n              </CustomButton>\n            </>\n          );\n        },\n      },\n    });\n  }\n\n  const options: MUIDataTableOptions = {\n    sortOrder: {\n      name: \"balanceTotalBTC\",\n      direction: \"desc\",\n    },\n  };\n\n  return (\n    <Box className=\"coinsTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n      {onRefreshCoins && convertCoin && (\n        <Modal\n          onClose={() => {\n            setConvertCoin(null);\n          }}\n          size=\"small\"\n          state={true}\n        >\n          <ConvertCoinForm\n            bases={coinsOptions}\n            base={convertCoin.coin}\n            balance={convertCoin.balance}\n            onClose={() => {\n              setConvertCoin(null);\n            }}\n            onRefreshCoins={onRefreshCoins}\n          />\n        </Modal>\n      )}\n      <Table\n        columns={columns}\n        data={list}\n        options={options}\n        persistKey={persistKey}\n        title={title}\n      />\n    </Box>\n  );\n};\n\nexport default CoinsTable;\n","import React from \"react\";\nimport \"./ManagementSummaryCard.scss\";\nimport { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport LocalMallIcon from \"@material-ui/icons/LocalMall\";\n\n/**\n * @typedef {Object} DefaultProps\n * @property {String} icon icon.\n * @property {JSX.Element} title icon.\n * @property {String} [quote] icon.\n * @property {String} [percentage] icon.\n * @property {String|Number} [foot] icon.\n * @property {String|Number} value\n * @property {String|JSX.Element} [tooltip]\n * @property {String} [valueColor]\n *\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ManagementSummaryCard = ({\n  icon,\n  title,\n  quote,\n  percentage,\n  foot,\n  value,\n  tooltip,\n  valueColor,\n}) => {\n  return (\n    <Box\n      alignItems=\"center\"\n      bgcolor=\"grid.content\"\n      className=\"managementSummaryCard\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n    >\n      <Box\n        alignItems=\"center\"\n        className=\"head\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n      >\n        {icon === \"followers\" && <PeopleIcon className=\"icon\" />}\n        {icon === \"allocated\" && <AssignmentTurnedInIcon className=\"icon\" />}\n        {icon === \"balance\" && <AccountBalanceWalletIcon className=\"icon\" />}\n        {icon === \"profit\" && <MonetizationOnIcon className=\"icon\" />}\n        {icon === \"float\" && <LocalMallIcon className=\"icon\" />}\n        {tooltip ? (\n          <Tooltip placement=\"top\" title={tooltip}>\n            <Typography className=\"headTitle\" variant=\"caption\">\n              {title}\n            </Typography>\n          </Tooltip>\n        ) : (\n          <Typography className=\"headTitle\" variant=\"caption\">\n            {title}\n          </Typography>\n        )}\n        {percentage && <Typography variant=\"h4\">{percentage}</Typography>}\n      </Box>\n      <Box\n        alignItems=\"flex-end\"\n        className=\"body\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n      >\n        <Typography className={valueColor ? valueColor : \"\"} variant=\"h1\">\n          {value}\n        </Typography>\n        {quote && <Typography variant=\"caption\">{quote}</Typography>}\n      </Box>\n      {foot && (\n        <Box\n          alignItems=\"center\"\n          className=\"foot\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <Typography variant=\"caption\">{foot}</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ManagementSummaryCard;\n","import { useState } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\nimport { creatProviderDataPointsEntity } from \"../services/tradeApiClient.types\";\nimport useInterval from \"./useInterval\";\n\n/**\n * @typedef {import(\"../services/tradeApiClient.types\").ProviderDataPointsEntity} ProviderDataPointsEntity\n * @typedef {Object} HookData\n * @property {ProviderDataPointsEntity} summary\n * @property {Boolean} summaryLoading\n */\n\n/**\n * Provides balance summary CT service.\n *\n * @param {string} providerId ID of the provider.\n * @returns {HookData} Balance.\n */\nconst useCTManagementSymmary = (providerId) => {\n  const emptyObject = creatProviderDataPointsEntity(null);\n  const [summary, setSummary] = useState(emptyObject);\n  const [loading, setLoading] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const loadSummary = () => {\n    if (providerId) {\n      const payload = {\n        providerId: providerId,\n      };\n      tradeApi\n        .providerCopyTradingDataPointsGet(payload)\n        .then((response) => {\n          setSummary(response);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useInterval(loadSummary, 5000, true);\n\n  return {\n    summaryLoading: loading,\n    summary: summary,\n  };\n};\n\nexport default useCTManagementSymmary;\n","import React from \"react\";\nimport \"./ManagementSummary.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport ManagementSummaryCard from \"../ManagementSummaryCard\";\nimport { formatFloat2Dec } from \"../../../../utils/format\";\nimport useCTManagementSymmary from \"../../../../hooks/useCTManagementSymmary\";\n\n/**\n * @typedef {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Balance\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst CopyTraderSummary = ({ provider }) => {\n  const { summaryLoading, summary } = useCTManagementSymmary(provider.id);\n  return (\n    <>\n      {summaryLoading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!summaryLoading && (\n        <Box\n          alignItems=\"center\"\n          className=\"managementSummary\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"space-evenly\"\n        >\n          <ManagementSummaryCard\n            foot=\" \"\n            icon=\"followers\"\n            title={<FormattedMessage id=\"copyt.management.totalfollowers\" />}\n            value={provider.followers}\n          />\n\n          <ManagementSummaryCard\n            foot={`USDT: ${formatFloat2Dec(summary.totalAllocatedUSDTFromFollowers)}`}\n            icon=\"allocated\"\n            quote={summary.quote}\n            title={<FormattedMessage id=\"copyt.management.totalallocated\" />}\n            value={formatFloat2Dec(summary.totalAllocatedFromFollowers)}\n          />\n\n          <ManagementSummaryCard\n            foot={`USDT ${formatFloat2Dec(summary.freeBalanceUSDT)}`}\n            icon=\"balance\"\n            title={<FormattedMessage id=\"copyt.management.freebalance\" />}\n            value={`${formatFloat2Dec(summary.freeBalancePercentage)}%`}\n          />\n\n          <ManagementSummaryCard\n            foot={`USDT ${formatFloat2Dec(summary.totalProfitUSDT)}`}\n            icon=\"profit\"\n            percentage={`${formatFloat2Dec(summary.totalProfitPercentage)}%`}\n            quote={summary.quote}\n            title={<FormattedMessage id=\"copyt.management.totalprofit\" />}\n            value={formatFloat2Dec(summary.totalProfit)}\n            valueColor={\n              summary.totalProfitUSDT > 0 ? \"green\" : summary.totalProfitUSDT < 0 ? \"red\" : \"\"\n            }\n          />\n\n          <ManagementSummaryCard\n            foot={`USDT ${formatFloat2Dec(summary.floatUSDT)}`}\n            icon=\"float\"\n            percentage={`${formatFloat2Dec(summary.floatPercentage)}%`}\n            quote={summary.quote}\n            title={<FormattedMessage id=\"copyt.management.float\" />}\n            value={formatFloat2Dec(summary.float)}\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default CopyTraderSummary;\n","import { useState } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\nimport { creatProviderBalanceEntity } from \"../services/tradeApiClient.types\";\nimport useInterval from \"./useInterval\";\n\n/**\n * @typedef {import(\"../services/tradeApiClient.types\").ProviderBalanceEntity} ProviderBalanceEntity\n * @typedef {Object} HookData\n * @property {ProviderBalanceEntity} summary\n * @property {Boolean} summaryLoading\n */\n\n/**\n * Provides balance summary for PS service.\n *\n * @param {string} providerId ID of the provider.\n * @returns {HookData} Balance.\n */\nconst usePSManagementSymmary = (providerId) => {\n  const emptyObject = creatProviderBalanceEntity(null);\n  const [summary, setSummary] = useState(emptyObject);\n  const [loading, setLoading] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const loadSummary = () => {\n    if (providerId) {\n      const payload = {\n        providerId: providerId,\n      };\n      tradeApi\n        .providerBalanceGet(payload)\n        .then((response) => {\n          setSummary(response);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useInterval(loadSummary, 5000, true);\n\n  return {\n    summaryLoading: loading,\n    summary: summary,\n  };\n};\n\nexport default usePSManagementSymmary;\n","import React from \"react\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport ManagementSummaryCard from \"../ManagementSummaryCard\";\nimport { formatFloat, formatFloat2Dec } from \"../../../../utils/format\";\nimport usePSManagementSymmary from \"../../../../hooks/usePSManagementSymmary\";\n\n/**\n * @typedef {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Provider Object.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ProfitSharingSummary = ({ provider }) => {\n  const { summaryLoading, summary } = usePSManagementSymmary(provider.id);\n  const intl = useIntl();\n  return (\n    <>\n      {summaryLoading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!summaryLoading && (\n        <Box\n          alignItems=\"center\"\n          className=\"managementSummary\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"space-evenly\"\n        >\n          <ManagementSummaryCard\n            foot=\" \"\n            icon=\"followers\"\n            title={<FormattedMessage id=\"copyt.management.totalfollowers\" />}\n            tooltip={intl.formatMessage({ id: \"copyt.management.totalfollowers.tooltip\" })}\n            value={provider.followers}\n          />\n\n          <ManagementSummaryCard\n            foot={`BTC: ${formatFloat(summary.totalWalletBTC)}`}\n            icon=\"allocated\"\n            quote=\"USDT\"\n            title={<FormattedMessage id=\"copyt.management.wallet\" />}\n            tooltip={intl.formatMessage({ id: \"copyt.management.wallet.tooltip\" })}\n            value={formatFloat2Dec(summary.totalWalletUSDT)}\n          />\n\n          <ManagementSummaryCard\n            foot={`BTC ${formatFloat(summary.totalUnrealizedProfitBTC)}`}\n            icon=\"profit\"\n            quote=\"USDT\"\n            title={<FormattedMessage id=\"copyt.management.profit\" />}\n            value={`${formatFloat2Dec(summary.totalUnrealizedProfitUSDT)}`}\n            valueColor={\n              summary.totalUnrealizedProfitBTC > 0\n                ? \"green\"\n                : summary.totalUnrealizedProfitBTC < 0\n                ? \"red\"\n                : \"\"\n            }\n          />\n\n          <ManagementSummaryCard\n            foot={`BTC ${formatFloat(summary.totalMarginBTC)}`}\n            icon=\"balance\"\n            quote=\"USDT\"\n            title={<FormattedMessage id=\"copyt.management.margin\" />}\n            tooltip={intl.formatMessage({ id: \"copyt.management.margin.tooltip\" })}\n            value={formatFloat2Dec(summary.totalMarginUSDT)}\n          />\n\n          <ManagementSummaryCard\n            foot={`USDT ${formatFloat(summary.totalMarginUSDT - summary.totalCurrentMarginUSDT)}`}\n            icon=\"balance\"\n            quote=\"%\"\n            title={<FormattedMessage id=\"copyt.management.available\" />}\n            tooltip={intl.formatMessage({ id: \"copyt.management.available.tooltip\" })}\n            value={formatFloat2Dec(summary.abstractPercentage)}\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default ProfitSharingSummary;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport ManagementSummaryCard from \"../ManagementSummaryCard\";\nimport { formatFloat, formatFloat2Dec } from \"../../../../utils/format\";\n\n/**\n * @typedef {import('../../../../services/tradeApiClient.types').DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import(\"../../../../services/tradeApiClient.types\").SpotProviderBalanceEntity} SpotProviderBalanceEntity\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Provider Object.\n * @property {SpotProviderBalanceEntity} summary Provider Object.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ProfitSharingSummary = ({ provider, summary }) => {\n  const intl = useIntl();\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"managementSummary\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"space-evenly\"\n    >\n      <ManagementSummaryCard\n        foot=\" \"\n        icon=\"followers\"\n        title={<FormattedMessage id=\"copyt.management.totalfollowers\" />}\n        tooltip={intl.formatMessage({ id: \"copyt.management.totalfollowers.tooltip\" })}\n        value={provider.followers}\n      />\n\n      <ManagementSummaryCard\n        foot=\" \"\n        icon=\"allocated\"\n        quote={provider.copyTradingQuote}\n        title={<FormattedMessage id=\"copyt.management.wallet\" />}\n        tooltip={intl.formatMessage({ id: \"copyt.management.wallet.tooltip\" })}\n        value={formatFloat2Dec(summary.totalWallet)}\n      />\n\n      <ManagementSummaryCard\n        foot=\" \"\n        icon=\"profit\"\n        quote={provider.copyTradingQuote}\n        title={<FormattedMessage id=\"copyt.management.profit\" />}\n        value={`${formatFloat2Dec(summary.totalPnl)}`}\n        valueColor={summary.totalPnl > 0 ? \"green\" : summary.totalPnl < 0 ? \"red\" : \"\"}\n      />\n\n      <ManagementSummaryCard\n        foot=\" \"\n        icon=\"balance\"\n        quote={provider.copyTradingQuote}\n        title={<FormattedMessage id=\"copyt.management.invested\" />}\n        tooltip={intl.formatMessage({ id: \"copyt.management.invested.tooltip\" })}\n        value={formatFloat2Dec(summary.totalInvested)}\n      />\n\n      <ManagementSummaryCard\n        foot={`${provider.copyTradingQuote} ${formatFloat(\n          (summary.totalFree * summary.abstractPercentage) / 100,\n        )}`}\n        icon=\"balance\"\n        quote=\"%\"\n        title={<FormattedMessage id=\"copyt.management.available\" />}\n        tooltip={intl.formatMessage({ id: \"copyt.management.available.tooltip\" })}\n        value={formatFloat2Dec(summary.abstractPercentage)}\n      />\n    </Box>\n  );\n};\n\nexport default ProfitSharingSummary;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Orders.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { showErrorAlert } from \"../../../../store/actions/ui\";\nimport OrdersTable from \"../../../ConnectExchangeView/ExchangeOrders/Orders/OrdersTable\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n * @typedef {import(\"../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Balance\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst Orders = ({ provider }) => {\n  const [loading, setLoading] = useState(false);\n  const selectedExchange = useSelectedExchange();\n  const [list, setList] = useState([]);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    setLoading(true);\n    const payload = {\n      exchangeInternalId: selectedExchange.internalId,\n      providerId: provider.id,\n    };\n    tradeApi\n      .providerOrdersGet(payload)\n      .then((response) => {\n        setList(response);\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(loadData, []);\n\n  return (\n    <>\n      {loading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!loading && (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"orders\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n        >\n          <OrdersTable\n            list={list}\n            loadData={loadData}\n            persistKey=\"providerOrders\"\n            provider={provider}\n            selectedAccount={selectedExchange}\n            title=\"\"\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Orders;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Contracts.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { showErrorAlert } from \"../../../../store/actions/ui\";\nimport ContractsTable from \"../../../ConnectExchangeView/ExchangeOrders/Contracts/ContractsTable\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n * @typedef {import(\"../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Balance\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst Contracts = ({ provider }) => {\n  const [loading, setLoading] = useState(false);\n  const selectedExchange = useSelectedExchange();\n  const [list, setList] = useState([]);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    setLoading(true);\n    const payload = {\n      exchangeInternalId: selectedExchange.internalId,\n      providerId: provider.id,\n    };\n    tradeApi\n      .providerContractsGet(payload)\n      .then((response) => {\n        setList(response);\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(loadData, []);\n\n  return (\n    <>\n      {loading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!loading && (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"orders\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n        >\n          <ContractsTable\n            list={list}\n            loadData={loadData}\n            persistKey=\"providerContracts\"\n            provider={provider}\n            selectedAccount={selectedExchange}\n            title=\"\"\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Contracts;\n","import React, { useState, useEffect } from \"react\";\nimport \"./ExpandedRow.scss\";\nimport { TableRow, TableCell, Checkbox, CircularProgress } from \"@material-ui/core\";\nimport useStoreSettingsSelector from \"../../../../../hooks/useStoreSettingsSelector\";\nimport { composeManagementPositionsDataTable } from \"../../../../../utils/composePositionsDataTable\";\n\n/**\n *\n * @typedef {import('../../../../../services/tradeApiClient.types').ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {Object} TransformedObject\n * @property {String} id\n * @property {String|Number|JSX.Element} data\n *\n * @typedef {Object} DefaultProps\n * @property {Array<ManagementPositionsEntity>} values\n * @property {String} persistKey\n * @property {React.MouseEventHandler} confirmAction\n * @property {Number} index Index of parent row.\n * @property {Function} onSelectionChange\n * @property {Function} onAllSelection\n * @property {Array<String>} selectedRows\n */\n\n/**\n * Expanded rows component for management table.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst ExpandedRow = ({\n  values,\n  persistKey,\n  confirmAction,\n  index,\n  onSelectionChange,\n  selectedRows,\n  onAllSelection,\n}) => {\n  const [list, setList] = useState([]);\n  const [checkedAll, setCheckedAll] = useState(false);\n  const storeSettings = useStoreSettingsSelector();\n\n  const prepareList = () => {\n    if (values.length) {\n      let positions = values[index] ? values[index].subPositions : [];\n      let newList = [];\n      let transformed = composeManagementPositionsDataTable(positions, confirmAction);\n      let { data, columns } = transformed;\n      for (let a = 0; a < positions.length; a++) {\n        let transformedRow = [];\n        for (let b = 0; b < columns.length; b++) {\n          /**\n           * @type {TransformedObject}\n           */\n          let obj = { id: \"\", data: \"\" };\n          obj.id = columns[b].name;\n          obj.data = data[a][b];\n          transformedRow.push(obj);\n        }\n        newList[a] = transformedRow;\n      }\n\n      setList([...newList]);\n    }\n  };\n\n  useEffect(prepareList, [values]);\n\n  const checkIfAllChecked = () => {\n    if (selectedRows.length) {\n      let allSelected = true;\n      const subPositions = values[index] ? values[index].subPositions : [];\n      subPositions.forEach((position) => {\n        if (!selectedRows.includes(position.positionId)) {\n          allSelected = false;\n        }\n      });\n      if (allSelected) {\n        setCheckedAll(true);\n      } else {\n        setCheckedAll(false);\n      }\n    }\n  };\n\n  useEffect(checkIfAllChecked, [selectedRows]);\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change Event.\n   * @param {Array<TransformedObject>} rowData Position Entity.\n   * @returns {Void} None.\n   */\n  const handleChange = (e, rowData) => {\n    const obj = rowData.find((item) => item.id === \"positionId\");\n    onSelectionChange(index, obj.data);\n  };\n\n  /**\n   *\n   * @param {React.ChangeEvent<*>} e Change Event.\n   * @returns {Void} None.\n   */\n  const handleChangeAll = (e) => {\n    setCheckedAll(e.target.checked);\n    onAllSelection(index, e.target.checked);\n  };\n\n  /**\n   *\n   * @param {Array<TransformedObject>} rowData Position Entity.\n   * @returns {Boolean} Whether input is checked or not.\n   */\n  const checkedStatus = (rowData) => {\n    const obj = rowData.find((item) => item.id === \"positionId\");\n    if (selectedRows.includes(obj.data.toString())) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   *\n   * @param {Array<TransformedObject>} rowData Position Entity.\n   * @returns {Boolean} Whether input is checked or not.\n   */\n  const updating = (rowData) => {\n    const obj = rowData.find((item) => item.id === \"positionId\");\n    const subPositions = values[index] ? values[index].subPositions : [];\n    const position = subPositions.find((item) => item.positionId === obj.data.toString());\n    if (position && position.updating) {\n      return true;\n    }\n    return false;\n  };\n\n  const showCheckAllButton = () => {\n    const subPositions = values[index] ? values[index].subPositions : [];\n    const updatingPositions = subPositions.filter((item) => item.updating);\n    if (subPositions.length === updatingPositions.length) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <>\n      {list.map((row, i) => (\n        <TableRow className=\"expandedRows\" key={i}>\n          {i === 0 && showCheckAllButton() ? (\n            <TableCell className=\"checkboxCell\">\n              <Checkbox\n                checked={checkedAll}\n                className=\"checkbox\"\n                onChange={(e) => handleChangeAll(e)}\n              />\n            </TableCell>\n          ) : (\n            <TableCell>&nbsp;</TableCell>\n          )}\n          {!updating(row) ? (\n            <TableCell className=\"checkboxCell\">\n              <Checkbox\n                checked={checkedStatus(row)}\n                className=\"checkbox\"\n                onChange={(e) => handleChange(e, row)}\n              />\n            </TableCell>\n          ) : (\n            <TableCell className=\"checkboxCell\">\n              <CircularProgress color=\"primary\" size={30} />\n            </TableCell>\n          )}\n          {row.map(\n            /* @ts-ignore */\n            (cell, i2) =>\n              cell.id !== \"subPositions\" &&\n              storeSettings.displayColumns[persistKey].includes(cell.id) && (\n                <TableCell key={i2}> {cell.data} </TableCell>\n              ),\n          )}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n\nexport default ExpandedRow;\n","import React from \"react\";\nimport \"./SelectionActions.scss\";\nimport { Box } from \"@material-ui/core\";\nimport CustomButton from \"../../../../../CustomButton\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../../../../../store/actions/ui\";\nimport tradeApi from \"../../../../../../services/tradeApiClient\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport { FormattedMessage } from \"react-intl\";\n\n/**\n *\n * @typedef {import('../../../../../../services/tradeApiClient.types').ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {Object} DefaultProps\n * @property {Array<ManagementPositionsEntity>} values\n * @property {Array<String>} selectedRows\n * @property {React.SetStateAction<*>} setSelectedRows\n * @property {React.SetStateAction<*>} setLoading\n */\n\n/**\n * Expanded rows component for management table.\n *\n * @param {DefaultProps} props Default component props.\n * @returns {JSX.Element} JSX component.\n */\nconst SelectionActions = ({ selectedRows, setSelectedRows, setLoading, values }) => {\n  const selectedExchange = useSelectedExchange();\n  const dispatch = useDispatch();\n\n  /**\n   * @returns {Array<Position>} Position Collection.\n   */\n  const getAllSelectedSubPositions = () => {\n    /**\n     * @type {Array<Position>}\n     */\n    let allSubPositions = [];\n    values.forEach((item) => {\n      let sub = item.subPositions;\n      allSubPositions = [...allSubPositions, ...sub];\n    });\n    return allSubPositions.filter((item) => selectedRows.includes(item.positionId));\n  };\n\n  /**\n   *\n   * @param {String} action Type of action to execute.\n   * @returns {Void} None.\n   */\n  const executeAction = (action) => {\n    setLoading(true);\n    /**\n     * @type {Array<Promise<*>>}\n     */\n    let promiseArray = [];\n    const allSelectedSubPositions = getAllSelectedSubPositions();\n    if (action === \"abort\") {\n      allSelectedSubPositions.forEach((item) => {\n        if (item.status === 1) {\n          let payload = {\n            positionId: item.positionId,\n          };\n          let promise = tradeApi.positionCancel(payload);\n          promiseArray.push(promise);\n        }\n      });\n    }\n    if (action === \"exit\") {\n      allSelectedSubPositions.forEach((item) => {\n        if (item.status !== 1) {\n          let payload = {\n            positionId: item.positionId,\n            // todo: check\n            internalExchangeId: selectedExchange.internalId,\n          };\n          let promise = tradeApi.positionExit(payload);\n          promiseArray.push(promise);\n        }\n      });\n    }\n\n    Promise.all(promiseArray)\n      .then(() => {\n        if (action === \"abort\") {\n          dispatch(\n            showSuccessAlert(\"alert.management.cancelall.title\", \"alert.management.cancelall.body\"),\n          );\n        }\n        if (action === \"exit\") {\n          dispatch(\n            showSuccessAlert(\"alert.management.exitall.title\", \"alert.management.exitall.body\"),\n          );\n        }\n        setSelectedRows([]);\n      })\n      .catch((e) => {\n        dispatch(showErrorAlert(e));\n      });\n  };\n\n  const isDisabledCancel = () => {\n    if (selectedRows.length) {\n      const allSelectedSubPositions = getAllSelectedSubPositions();\n      let stillEntryAvailable = false;\n      allSelectedSubPositions.every((item) => {\n        if (item.status === 1) {\n          stillEntryAvailable = true;\n          return false;\n        }\n        return true;\n      });\n      return !stillEntryAvailable;\n    }\n    return true;\n  };\n\n  const isDisabledExit = () => {\n    if (selectedRows.length) {\n      const allSelectedSubPositions = getAllSelectedSubPositions();\n      let open = false;\n      allSelectedSubPositions.every((item) => {\n        if (item.status !== 1) {\n          open = true;\n          return false;\n        }\n        return true;\n      });\n      return !open;\n    }\n    return true;\n  };\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"selectionActions\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n    >\n      <CustomButton\n        className=\"textPurple\"\n        disabled={isDisabledCancel()}\n        onClick={() => executeAction(\"abort\")}\n      >\n        <FormattedMessage id=\"copyt.management.cancel\" />\n      </CustomButton>\n      <CustomButton\n        className=\"textPurple\"\n        disabled={isDisabledExit()}\n        onClick={() => executeAction(\"exit\")}\n      >\n        <FormattedMessage id=\"copyt.management.exit\" />\n      </CustomButton>\n    </Box>\n  );\n};\n\nexport default SelectionActions;\n","import React, { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport Table from \"../../../../Table\";\nimport { ConfirmDialog } from \"../../../../Dialogs\";\nimport tradeApi from \"../../../../../services/tradeApiClient\";\nimport ExpandedRow from \"../ExpandedRow\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../../../store/actions/ui\";\nimport { usePositionDataTableCompose } from \"../../../../../hooks/usePositionsDataTableCompose\";\nimport \"./ManagementTable.scss\";\nimport SelectionActions from \"../ExpandedRow/SelectionActions\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n * @typedef {import(\"../../../../../services/tradeApiClient.types\").UserPositionsCollection} UserPositionsCollection\n * @typedef {import(\"../../../../../utils/composePositionsDataTable\").DataTableContent} DataTableContent\n * @typedef {import(\"../../../../../services/tradeApiClient.types\").ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {import(\"../../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import(\"mui-datatables\").MUIDataTableOptions} MUIDataTableOptions\n */\n\n/**\n * @typedef {Object} PositionsTableProps\n * @property {Array<Position>} list\n * @property {Array<ManagementPositionsEntity>} allPositions\n * @property {React.SetStateAction<*>} setLoading\n * @property {DefaultProviderGetObject} provider\n */\n\n/**\n * Component that display user positions in table view.\n *\n * @param {PositionsTableProps} props Component properties.\n * @returns {JSX.Element} Positions table element.\n */\nconst ManagementTable = ({ list, allPositions, setLoading, provider }) => {\n  const tablePersistsKey = \"managementPositions\";\n  const dispatch = useDispatch();\n  const [expanded, setExpanded] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const selectedExchange = useSelectedExchange();\n\n  /**\n   * @typedef {import(\"../../../../Dialogs/ConfirmDialog/ConfirmDialog\").ConfirmDialogConfig} ConfirmDialogConfig\n   * @type {ConfirmDialogConfig} initConfirmConfig\n   */\n  const initConfirmConfig = {\n    titleTranslationId: \"\",\n    messageTranslationId: \"\",\n    visible: false,\n  };\n\n  const [confirmConfig, setConfirmConfig] = useState(initConfirmConfig);\n  const [actionData, setActionData] = useState({\n    positionId: \"\",\n    action: \"\",\n  });\n\n  /**\n   * Handle action element click event.\n   *\n   * @param {React.MouseEvent<HTMLButtonElement>} event Action element click.\n   * @returns {Void} None.\n   */\n  const confirmAction = (event) => {\n    const targetElement = event.currentTarget;\n    const positionId = targetElement.getAttribute(\"data-position-id\");\n    const action = targetElement.getAttribute(\"data-action\");\n    setActionData({\n      action: action || \"\",\n      positionId: positionId || \"\",\n    });\n\n    if (action === \"abort\") {\n      setConfirmConfig({\n        titleTranslationId: \"confirm.positioncancel.title\",\n        messageTranslationId: \"confirm.positioncancel.message\",\n        visible: true,\n      });\n    }\n\n    if (action === \"exit\") {\n      setConfirmConfig({\n        titleTranslationId: \"confirm.positionexit.title\",\n        messageTranslationId: \"confirm.positionexit.message\",\n        visible: true,\n      });\n    }\n  };\n\n  /**\n   * Handle confirm dialog post confirmation, action execution.\n   *\n   * @returns {Void} None.\n   */\n  const executeAction = () => {\n    const { positionId, action } = actionData;\n    if (action === \"abort\") {\n      tradeApi\n        .positionCancel({\n          positionId: positionId,\n        })\n        .then((position) => {\n          dispatch(\n            showSuccessAlert(\n              \"Position cancelled\",\n              `Position ${position.positionId} was cancelled.`,\n            ),\n          );\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n\n    if (action === \"exit\") {\n      tradeApi\n        .positionExit({\n          positionId: positionId,\n          // todo: check\n          internalExchangeId: selectedExchange.internalId,\n        })\n        .then((position) => {\n          dispatch(\n            showSuccessAlert(\"Position exited\", `Position ${position.positionId} was exited.`),\n          );\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n  };\n\n  const { composeManagementPositionsDataTable, excludeDataTableColumn } =\n    usePositionDataTableCompose(list, confirmAction);\n\n  /**\n   * Compose MUI data table for positions collection of selected type.\n   *\n   * @returns {DataTableContent} Data table content.\n   */\n  const composeDataTableForPositionsType = () => {\n    let dataTable;\n\n    dataTable = composeManagementPositionsDataTable();\n    if (provider.profitSharing) {\n      dataTable = excludeDataTableColumn(dataTable, \"col.provider.subpositions\");\n      dataTable = excludeDataTableColumn(dataTable, \"col.provider.totalpositions\");\n      dataTable = excludeDataTableColumn(dataTable, \"col.provider.soldpositions\");\n    }\n    return dataTable;\n  };\n\n  const { columns, data } = composeDataTableForPositionsType();\n\n  /**\n   * Expandable row ender component\n   *\n   * @param {*} values data object from table\n   * @param {*} rowMeta meta data of the expanded row.\n   * @returns {JSX.Element} JSX component.\n   */\n  const renderRow = (values, rowMeta) => {\n    return (\n      <ExpandedRow\n        confirmAction={confirmAction}\n        index={rowMeta.dataIndex}\n        onAllSelection={selectAllChild}\n        onSelectionChange={handleRowSelectionChange}\n        persistKey={tablePersistsKey}\n        selectedRows={selectedRows}\n        values={allPositions}\n      />\n    );\n  };\n\n  /**\n   *\n   * @param {*} currentRowsExpanded Currently expanded rows.\n   * @param {*} allRowsExpanded Currently expanded rows.\n   * @returns {void} None.\n   */\n  const handleRowExpansionChange = (currentRowsExpanded, allRowsExpanded) => {\n    /**\n     * @type {Array<Number>}\n     */\n    let indexes = [];\n    // @ts-ignore\n    allRowsExpanded.forEach((item) => {\n      indexes.push(item.dataIndex);\n    });\n    setExpanded(indexes);\n  };\n\n  /**\n   *\n   * @param {Number} index Index of parent row.\n   * @param {String} id Position ID.\n   * @returns {Void} None.\n   */\n  const handleRowSelectionChange = (index, id) => {\n    const subPositions = allPositions[index].subPositions;\n    const position = subPositions.find((item) => item.positionId === id);\n    let dataList = [...selectedRows];\n    if (dataList.includes(id)) {\n      dataList = dataList.filter((item) => item !== id);\n    } else if (position && !position.updating) {\n      dataList.push(id);\n    }\n    setSelectedRows(dataList);\n  };\n\n  /**\n   *\n   * @param {Number} index index of the parent.\n   * @param {Boolean} checked Flag to indicate the status of all child selection checkbox.\n   * @returns {Void} Nobe.\n   */\n  const selectAllChild = (index, checked) => {\n    const subPositions = allPositions[index].subPositions;\n    if (checked) {\n      let dataList = [...selectedRows];\n      subPositions.forEach((position) => {\n        if (!position.updating) {\n          dataList.push(position.positionId);\n        }\n      });\n      dataList = [...new Set(dataList)];\n      setSelectedRows(dataList);\n    } else {\n      let dataList = [...selectedRows];\n      subPositions.forEach((position) => {\n        dataList = dataList.filter((listItem) => listItem !== position.positionId);\n      });\n      setSelectedRows(dataList);\n    }\n  };\n\n  /**\n   * @type {MUIDataTableOptions}\n   */\n  const options = {\n    expandableRows: !provider.profitSharing,\n    renderExpandableRow: renderRow,\n    rowsExpanded: expanded,\n    onRowExpansionChange: handleRowExpansionChange,\n    expandableRowsHeader: false,\n    sortOrder: {\n      name: \"col.date.open\",\n      direction: \"desc\",\n    },\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        confirmConfig={confirmConfig}\n        executeActionCallback={executeAction}\n        setConfirmConfig={setConfirmConfig}\n      />\n      <Box className=\"managementTable\" display=\"flex\" flexDirection=\"column\" width={1}>\n        <Table\n          columns={columns}\n          data={data}\n          options={options}\n          persistKey={tablePersistsKey}\n          title={\n            !provider.profitSharing ? (\n              <SelectionActions\n                selectedRows={selectedRows}\n                setLoading={setLoading}\n                setSelectedRows={setSelectedRows}\n                values={allPositions}\n              />\n            ) : (\n              \"\"\n            )\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default ManagementTable;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport tradeApi from \"../../../../services/tradeApiClient\";\nimport { showErrorAlert } from \"../../../../store/actions/ui\";\nimport useInterval from \"../../../../hooks/useInterval\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport ManagementTable from \"./ManagementTable\";\n\n/**\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {import(\"../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Balance\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst Management = ({ provider }) => {\n  const [tablePositions, setTablePositions] = useState([]);\n  const [allPositions, setAllPositions] = useState([]);\n  const [positionsLoading, setPositionsLoading] = useState(true);\n  const dispatch = useDispatch();\n\n  const loadPositions = () => {\n    if (provider.id) {\n      const payload = {\n        providerId: provider.id,\n      };\n      tradeApi\n        .providerManagementPositions(payload)\n        .then((response) => {\n          setPositionsLoading(false);\n          setAllPositions(response);\n          setTablePositions(prepareTableList(response));\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n  };\n\n  useInterval(loadPositions, 5000, true);\n\n  /**\n   * Function to prepare list of the table.\n   *\n   * @param {Array<ManagementPositionsEntity>} data default data from backend.\n   * @returns {Array<Position>} Array of position entities.\n   */\n  const prepareTableList = (data) => {\n    /**\n     * @type {Array<Position>}\n     */\n    let list = [];\n    data.forEach((item) => {\n      list.push(item.position);\n    });\n    return list;\n  };\n  return (\n    <>\n      {positionsLoading && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      )}\n      {!positionsLoading && (\n        <ManagementTable\n          allPositions={allPositions}\n          list={tablePositions}\n          provider={provider}\n          setLoading={setPositionsLoading}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Management;\n","import { useState, useEffect } from \"react\";\nimport tradeApi from \"../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert } from \"../store/actions/ui\";\n\n/**\n * @typedef {import(\"../services/tradeApiClient.types\").ExchangeAssetsDict} ExchangeAssetsDict\n */\n\n/**\n * Provides bases assets.\n *\n * @param {string} exchangeInternalId Exchange account internal id.\n * @param {string} providerId Provider id.\n * @returns {ExchangeAssetsDict} Exchange Assets.\n */\nconst useProviderAssets = (exchangeInternalId, providerId) => {\n  const [assets, setAssets] = useState({});\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    if (exchangeInternalId && providerId) {\n      const payload = {\n        exchangeInternalId: exchangeInternalId,\n        providerId: providerId,\n      };\n\n      tradeApi\n        .providerAssetsGet(payload)\n        .then((data) => {\n          setAssets(data);\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n  };\n\n  useEffect(loadData, [exchangeInternalId, providerId]);\n\n  return assets;\n};\n\nexport default useProviderAssets;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Coins.scss\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport CoinsTable from \"../../../Balance/Coins/CoinsTable\";\nimport CoinsFilter from \"../../../Balance/Coins/CoinsFilter\";\nimport useProviderAssets from \"hooks/useProviderAssets\";\n\n/**\n *\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ExchangeAsset} ExchangeAsset\n * @typedef {import(\"../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n */\n/**\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Provider object.\n * @property {ExchangeConnectionEntity} selectedExchange Selected exchange account.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst Coins = ({ provider, selectedExchange }) => {\n  const [filteredCoins, setFilteredCoins] = useState(/** @type {Array<ExchangeAsset>} */ (null));\n  const assets = useProviderAssets(selectedExchange.internalId, provider.id);\n  const coins = assets ? Object.values(assets) : null;\n  const [filterChecked, setFilterChecked] = useState(false);\n\n  const initData = () => {\n    if (assets) {\n      filterCoins(filterChecked);\n    }\n  };\n  useEffect(initData, [assets]);\n\n  /**\n   * @param {boolean} checked\n   * @returns {void}\n   */\n  const filterCoins = (checked) => {\n    if (coins) {\n      setFilteredCoins(\n        checked ? coins.filter((item) => parseFloat(item.balanceTotalUSDT) > 1) : coins,\n      );\n    }\n  };\n\n  /**\n   * @param {React.ChangeEvent<HTMLInputElement>} e event\n   */\n  const handleFilterChecked = (e) => {\n    setFilterChecked(e.target.checked);\n    filterCoins(e.target.checked);\n  };\n\n  const embedFilter = <CoinsFilter checked={filterChecked} onChange={handleFilterChecked} />;\n\n  return (\n    <>\n      {!filteredCoins ? (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={40} />\n        </Box>\n      ) : (\n        <Box\n          alignItems=\"flex-start\"\n          className=\"providerCoins\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n        >\n          <CoinsTable list={filteredCoins} persistKey=\"exchangeAssets\" title={embedFilter} />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Coins;\n","import React, { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport TabsMenu from \"../../../TabsMenu\";\nimport \"./ManagementTabs.scss\";\nimport Orders from \"../Orders/Orders\";\nimport { FormattedMessage } from \"react-intl\";\nimport Contracts from \"../Contracts\";\nimport Management from \"../Management\";\nimport Coins from \"../Coins\";\nimport ManagementTable from \"../Management/ManagementTable\";\n\n/**\n * @typedef {import(\"../../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {import(\"../../../../services/tradeApiClient.types\").ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider Balance\n * @property {ExchangeConnectionEntity} selectedExchange Selected exchange account.\n * @property {Array<Position>} [tablePositions] management table positions\n * @property {Array<ManagementPositionsEntity>} [allPositions] all positions with subpositions for management table\n * @property {Function} [loadData] reload positions data.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst ManagementTabs = ({ provider, selectedExchange, tablePositions, allPositions, loadData }) => {\n  const [tabValue, setTabValue] = useState(0);\n\n  const tabsList = [\n    {\n      display: true,\n      label: <FormattedMessage id=\"management.positions\" />,\n    },\n    {\n      display: provider.profitSharing,\n      label: <FormattedMessage id=\"management.orders\" />,\n    },\n    {\n      display: provider.profitSharing && provider.exchangeType.toLowerCase() === \"futures\",\n      label: <FormattedMessage id=\"management.contracts\" />,\n    },\n    {\n      display: provider.profitSharing && provider.exchangeType.toLowerCase() === \"spot\",\n      label: <FormattedMessage id=\"management.coins\" />,\n    },\n  ];\n\n  /**\n   * Event handler to change tab value.\n   *\n   * @param {React.ChangeEvent<{checked: boolean}>} event Tab index to set active.\n   * @param {Number} val Tab index to set active.\n   * @returns {void}\n   */\n  const changeTab = (event, val) => {\n    setTabValue(val);\n  };\n\n  return (\n    <Box bgcolor=\"grid.content\" className=\"managementTabs\">\n      <Box\n        alignItems=\"flex-start\"\n        className=\"tabsBox\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        <TabsMenu changeTab={changeTab} tabValue={tabValue} tabs={tabsList} />\n        {tabValue === 0 && (\n          <Box className=\"tabPanel\">\n            {provider.profitSharing && provider.exchangeType.toLowerCase() === \"spot\" ? (\n              <ManagementTable\n                allPositions={allPositions}\n                list={tablePositions}\n                provider={provider}\n                setLoading={loadData}\n              />\n            ) : (\n              <Management provider={provider} />\n            )}\n          </Box>\n        )}\n        {tabValue === 1 && (\n          <Box className=\"tabPanel\">\n            <Orders provider={provider} />\n          </Box>\n        )}\n        {tabValue === 2 && (\n          <Box className=\"tabPanel\">\n            {provider.exchangeType.toLowerCase() === \"futures\" && <Contracts provider={provider} />}\n            {provider.exchangeType.toLowerCase() === \"spot\" && (\n              <Coins provider={provider} selectedExchange={selectedExchange} />\n            )}\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default ManagementTabs;\n","import React, { useState } from \"react\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { SpotProfitSharingSummary } from \"./ManagementSummary\";\nimport ManagementTabs from \"./ManagementTabs\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { showErrorAlert } from \"../../../store/actions/ui\";\nimport useInterval from \"../../../hooks/useInterval\";\nimport { useDispatch } from \"react-redux\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").ManagementPositionsEntity} ManagementPositionsEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider provider object.\n * @property {ExchangeConnectionEntity} selectedExchange selected exchange object.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst SpotProfitSharingManagement = ({ provider, selectedExchange }) => {\n  const [tablePositions, setTablePositions] = useState([]);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n\n  const loadBalanceAndPositions = () => {\n    if (provider.id) {\n      const payload = {\n        providerId: provider.id,\n      };\n      tradeApi\n        .providerManagementBalanceAndPositions(payload)\n        .then((response) => {\n          setLoading(false);\n          setData(response);\n          setTablePositions(prepareTableList(response.positions));\n        })\n        .catch((e) => {\n          dispatch(showErrorAlert(e));\n        });\n    }\n  };\n\n  useInterval(loadBalanceAndPositions, 5000, true);\n\n  /**\n   * Function to prepare list of the table.\n   *\n   * @param {Array<ManagementPositionsEntity>} positions transformed data from backend.\n   * @returns {Array<Position>} Array of position entities.\n   */\n  const prepareTableList = (positions) => {\n    /**\n     * @type {Array<Position>}\n     */\n    let list = [];\n    positions.forEach((item) => {\n      list.push(item.position);\n    });\n    return list;\n  };\n\n  return (\n    <>\n      {(loading || !data) && (\n        <Box\n          alignItems=\"center\"\n          className=\"loadingBox\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"center\"\n        >\n          <CircularProgress color=\"primary\" size={35} />\n        </Box>\n      )}\n      {!loading && data && (\n        <>\n          <Box className=\"summaryBox\">\n            <SpotProfitSharingSummary provider={provider} summary={data.balance} />\n          </Box>\n\n          <Box className=\"tableBoxBox\">\n            <ManagementTabs\n              allPositions={data.positions}\n              loadData={() => setLoading(true)}\n              provider={provider}\n              selectedExchange={selectedExchange}\n              tablePositions={tablePositions}\n            />\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SpotProfitSharingManagement;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { CopyTraderSummary } from \"./ManagementSummary\";\nimport ManagementTabs from \"./ManagementTabs\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider provider object.\n * @property {ExchangeConnectionEntity} selectedExchange selected exchange object.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst TraderManagement = ({ provider, selectedExchange }) => {\n  return (\n    <>\n      <Box className=\"summaryBox\">\n        <CopyTraderSummary provider={provider} />\n      </Box>\n\n      <Box className=\"tableBoxBox\">\n        <ManagementTabs provider={provider} selectedExchange={selectedExchange} />\n      </Box>\n    </>\n  );\n};\n\nexport default TraderManagement;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { FuturesProfitSharingSummary } from \"./ManagementSummary\";\nimport ManagementTabs from \"./ManagementTabs\";\n\n/**\n * @typedef {import(\"../../../services/tradeApiClient.types\").ExchangeConnectionEntity} ExchangeConnectionEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").DefaultProviderGetObject} DefaultProviderGetObject\n * @typedef {Object} DefaultProps\n * @property {DefaultProviderGetObject} provider provider object.\n * @property {ExchangeConnectionEntity} selectedExchange selected exchange object.\n */\n\n/**\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst FuturesProfitSharingManagement = ({ provider, selectedExchange }) => {\n  return (\n    <>\n      <Box className=\"summaryBox\">\n        <FuturesProfitSharingSummary provider={provider} />\n      </Box>\n\n      <Box className=\"tableBoxBox\">\n        <ManagementTabs provider={provider} selectedExchange={selectedExchange} />\n      </Box>\n    </>\n  );\n};\n\nexport default FuturesProfitSharingManagement;\n"],"names":["_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","checked","onChange","Box","alignItems","className","display","flexDirection","Checkbox","inputProps","id","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","bases","base","balance","onClose","onRefreshCoins","balanceData","availableBalance","parseFloat","loading","setLoading","quotes","setQuotes","useForm","mode","handleSubmit","control","errors","isValid","formState","setValue","watch","trigger","selectedBase","selectedQuote","amount","previewLoading","setPreviewLoading","previewConversion","setPreviewConversion","selectedExchange","useSelectedExchange","dispatch","useDispatch","intl","useIntl","debouncedAmount","useDebounce","tradeApi","internalExchangeId","internalId","then","response","sort","a","b","localeCompare","includes","isFilled","loadPreview","catch","e","showErrorAlert","from","to","qty","finally","flex","padding","Typography","align","variant","onSubmit","showSuccessAlert","style","width","mt","defaultValue","name","render","CustomSelect","label","formatMessage","labelPlacement","options","placeholder","search","my","rules","required","AmountControl","setBalanceMax","coin","minAmount","min","decimals","height","justifyContent","CircularProgress","estimatedAmount","displayType","suffix","CustomButton","type","disabled","title","persistKey","list","convertCoin","setConvertCoin","coinsOptions","filter","c","balanceFree","map","columns","customBodyRender","formatFloat","exchangeName","toLowerCase","exchangeType","push","find","onClick","minWidth","Modal","size","state","Table","data","sortOrder","direction","icon","quote","percentage","foot","tooltip","valueColor","bgcolor","People","AssignmentTurnedIn","AccountBalanceWallet","MonetizationOn","LocalMall","Tooltip","placement","providerId","emptyObject","creatProviderDataPointsEntity","summary","setSummary","useInterval","payload","summaryLoading","provider","useCTManagementSymmary","color","followers","formatFloat2Dec","totalAllocatedUSDTFromFollowers","totalAllocatedFromFollowers","freeBalanceUSDT","freeBalancePercentage","totalProfitUSDT","totalProfitPercentage","totalProfit","floatUSDT","floatPercentage","float","creatProviderBalanceEntity","usePSManagementSymmary","totalWalletBTC","totalWalletUSDT","totalUnrealizedProfitBTC","totalUnrealizedProfitUSDT","totalMarginBTC","totalMarginUSDT","totalCurrentMarginUSDT","abstractPercentage","copyTradingQuote","totalWallet","totalPnl","totalInvested","totalFree","setList","loadData","exchangeInternalId","OrdersTable","selectedAccount","ContractsTable","values","confirmAction","index","onSelectionChange","selectedRows","onAllSelection","checkedAll","setCheckedAll","storeSettings","useStoreSettingsSelector","length","positions","subPositions","newList","transformed","composeManagementPositionsDataTable","transformedRow","obj","allSelected","forEach","position","positionId","checkedStatus","rowData","item","toString","row","i","TableRow","key","updatingPositions","updating","TableCell","target","handleChangeAll","handleChange","cell","i2","displayColumns","setSelectedRows","getAllSelectedSubPositions","allSubPositions","sub","executeAction","action","promiseArray","allSelectedSubPositions","status","promise","Promise","all","stillEntryAvailable","every","isDisabledCancel","open","isDisabledExit","dataTable","allPositions","tablePersistsKey","expanded","setExpanded","titleTranslationId","messageTranslationId","visible","confirmConfig","setConfirmConfig","actionData","setActionData","event","targetElement","currentTarget","getAttribute","usePositionDataTableCompose","excludeDataTableColumn","profitSharing","handleRowSelectionChange","dataList","selectAllChild","Set","listItem","expandableRows","renderExpandableRow","rowMeta","dataIndex","rowsExpanded","onRowExpansionChange","currentRowsExpanded","allRowsExpanded","indexes","expandableRowsHeader","executeActionCallback","tablePositions","setTablePositions","setAllPositions","positionsLoading","setPositionsLoading","prepareTableList","assets","setAssets","filteredCoins","setFilteredCoins","useProviderAssets","coins","Object","filterChecked","setFilterChecked","filterCoins","balanceTotalUSDT","embedFilter","CoinsFilter","CoinsTable","tabValue","setTabValue","tabsList","TabsMenu","changeTab","val","tabs","setData","SpotProfitSharingSummary","FuturesProfitSharingSummary"],"sourceRoot":""}