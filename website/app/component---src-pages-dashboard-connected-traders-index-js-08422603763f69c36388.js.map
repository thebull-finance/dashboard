{"version":3,"file":"component---src-pages-dashboard-connected-traders-index-js-08422603763f69c36388.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Dashboard/DashboardHeader/DashboardHeader.js","webpack://zignaly-webapp/./src/components/Dashboard/NoExchanges/NoExchanges.js","webpack://zignaly-webapp/./src/layouts/dashboardLayout/withDashboardLayout.jsx","webpack://zignaly-webapp/./src/pages/dashboard/connectedTraders/index.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport \"./DashboardHeader.scss\";\nimport { Box, Typography, Tooltip } from \"@material-ui/core\";\nimport SubNavHeader from \"../../SubNavHeader\";\nimport { routesMapping } from \"../../../utils/routesMapping\";\nimport { FormattedMessage } from \"react-intl\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport LinkOffIcon from \"@material-ui/icons/LinkOff\";\nimport PrivateAreaContext from \"context/PrivateAreaContext\";\n\n/**\n *\n * @typedef {Object} DefaultProps\n * @property {String} path\n */\n\n/**\n * Provides the navigation bar for the dashboard.\n *\n * @param {DefaultProps} props Default props.\n * @returns {JSX.Element} Component JSX.\n */\nconst DashboardHeader = ({ path }) => {\n  const selectedExchange = useSelectedExchange();\n  let links = routesMapping(path).links;\n  const { connectedProviders } = useContext(PrivateAreaContext);\n  const providerCount = connectedProviders?.filter(\n    (p) => p.exchangeInternalId === selectedExchange.internalId && p.type === \"signalProvider\",\n  ).length;\n\n  if (providerCount > 0) {\n    links.push({\n      id: \"dashboard.providers\",\n      to: \"/dashboard/connectedProviders\",\n    });\n  } else {\n    links = links.filter((item) => item.id !== \"dashboard.providers\");\n  }\n\n  return (\n    <Box className=\"dashboardHeader\">\n      <Box\n        alignItems=\"center\"\n        className=\"titleBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"flex-start\"\n      >\n        <Typography variant=\"h1\">\n          <FormattedMessage id=\"dashboard\" />\n        </Typography>\n        <span className=\"exchangeTitle\">\n          <span className=\"name\"> {selectedExchange.internalName} </span>\n          {selectedExchange.paperTrading && (\n            <span className=\"tag\">\n              (<FormattedMessage id=\"menu.demo\" />){\" \"}\n            </span>\n          )}\n          {selectedExchange.isTestnet && (\n            <span className=\"tag\">\n              (<FormattedMessage id=\"menu.testnet\" />){\" \"}\n            </span>\n          )}\n          {selectedExchange.areKeysValid ? (\n            <Tooltip placement=\"top\" title={<FormattedMessage id=\"accounts.exchangeconnected\" />}>\n              <LinkIcon className=\"linkOn\" />\n            </Tooltip>\n          ) : (\n            <Tooltip\n              placement=\"top\"\n              title={<FormattedMessage id=\"accounts.exchangedisconnected\" />}\n            >\n              <LinkOffIcon className=\"linkOff\" />\n            </Tooltip>\n          )}\n        </span>\n      </Box>\n      <SubNavHeader links={links} />\n    </Box>\n  );\n};\n\nexport default DashboardHeader;\n","import React from \"react\";\nimport \"./NoExchanges.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport ExchangeIcon from \"../../ExchangeIcon\";\nimport { navigate as navigateReach } from \"@reach/router\";\nimport useExchangeList from \"../../../hooks/useExchangeList\";\nimport { getExchangeNamesCombined } from \"../../../utils/helpers\";\n\nconst NoExchanges = () => {\n  const { exchanges } = useExchangeList();\n\n  const handleClickEvent = () => {\n    navigateReach(\"#exchangeAccounts\");\n  };\n\n  return (\n    <Box\n      className=\"noExchangeBox\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n    >\n      <Typography variant=\"h1\">\n        <FormattedMessage id=\"dashboard\" />\n      </Typography>\n      <span className=\"title\">\n        <FormattedMessage id=\"dashboard.connectexchange.preText\" />\n        <b onClick={handleClickEvent}>\n          <FormattedMessage id=\"dashboard.connectexchange.bold.title\" />\n        </b>\n        <FormattedMessage id=\"dashboard.connectexchange.postText\" />\n      </span>\n      <span className=\"subtitle\">\n        <FormattedMessage id=\"dashboard.connectexchange.subtitle\" />\n        <br />\n        <span>{getExchangeNamesCombined(exchanges, \"or\")}</span>\n      </span>\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-start\">\n        {exchanges &&\n          exchanges.map(\n            (item, index) =>\n              item.enabled &&\n              item.name.toLowerCase() !== \"zignaly\" && (\n                <ExchangeIcon exchange={item.name.toLowerCase()} key={index} size=\"xlarge\" />\n              ),\n          )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default NoExchanges;\n","import React from \"react\";\nimport \"./DashboardLayout.scss\";\nimport getDisplayName from \"../../utils/getDisplayName\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport FAQ from \"../../components/FAQ\";\nimport DashboardHeader from \"../../components/Dashboard/DashboardHeader\";\nimport {\n  useStoreUserExchangeConnections,\n  useStoreUserSelector,\n} from \"../../hooks/useStoreUserSelector\";\nimport NoExchanges from \"../../components/Dashboard/NoExchanges\";\n\n/**\n * HOC wrap component with dashboard layout.\n *\n * App layout is defined here, the placement of header, sidebar, mobile appbar.\n *\n * @param {React.ComponentType<any>} Component The component to wrap.\n *\n * @returns {Function} Wrap component function.\n */\nconst withDashboardLayout = (Component) => {\n  /**\n   *\n   * @typedef {Object} DefaultProps\n   * @property {String} path\n   */\n\n  /**\n   * @param {DefaultProps} props Default params.\n   * @returns {JSX.Element} Component JSX.\n   */\n  const WrapperComponent = (props) => {\n    const storeUser = useStoreUserSelector();\n    const exchangeConnections = useStoreUserExchangeConnections();\n\n    return (\n      <Box\n        alignItems=\"flex-start\"\n        className=\"dashboardLayout\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-start\"\n      >\n        {!storeUser.loaded ? (\n          <Box\n            alignItems=\"center\"\n            className=\"loadingBox\"\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"center\"\n          >\n            <CircularProgress color=\"primary\" size={50} />\n          </Box>\n        ) : exchangeConnections.length > 0 ? (\n          <>\n            <DashboardHeader path={props.path} />\n            <Box className=\"pageContent\">\n              <Component {...props} />\n            </Box>\n            <Box className=\"faq\">\n              <FAQ />\n            </Box>\n          </>\n        ) : (\n          <NoExchanges />\n        )}\n      </Box>\n    );\n  };\n\n  WrapperComponent.displayName = `Layout(${getDisplayName(Component)})`;\n\n  return WrapperComponent;\n};\n\nexport default withDashboardLayout;\n","import React from \"react\";\nimport \"./connectedTraders.scss\";\nimport { Box } from \"@material-ui/core\";\nimport withDashboardLayout from \"../../../layouts/dashboardLayout\";\nimport { Helmet } from \"react-helmet\";\nimport ProvidersBrowse from \"../../../components/Providers/ProvidersBrowse\";\nimport { useIntl } from \"react-intl\";\n\nconst ConnectedTraders = () => {\n  const intl = useIntl();\n\n  return (\n    <Box className=\"connectedTradersPage\">\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({\n            id: \"dashboard\",\n          })} - ${intl.formatMessage({\n            id: \"dashboard.traders\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <ProvidersBrowse type=\"connected_traders\" />\n    </Box>\n  );\n};\n\nexport default withDashboardLayout(ConnectedTraders);\n"],"names":["path","selectedExchange","useSelectedExchange","links","routesMapping","connectedProviders","useContext","PrivateAreaContext","filter","p","exchangeInternalId","internalId","type","length","push","id","to","item","Box","className","alignItems","display","flexDirection","justifyContent","Typography","variant","internalName","paperTrading","isTestnet","areKeysValid","Tooltip","placement","title","Link","LinkOff","SubNavHeader","exchanges","useExchangeList","onClick","navigateReach","getExchangeNamesCombined","map","index","enabled","name","toLowerCase","ExchangeIcon","exchange","key","size","Component","WrapperComponent","props","storeUser","useStoreUserSelector","exchangeConnections","useStoreUserExchangeConnections","loaded","FAQ","CircularProgress","color","displayName","getDisplayName","withDashboardLayout","intl","useIntl","formatMessage"],"sourceRoot":""}