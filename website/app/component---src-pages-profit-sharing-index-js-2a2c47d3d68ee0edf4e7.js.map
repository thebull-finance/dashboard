{"version":3,"file":"component---src-pages-profit-sharing-index-js-2a2c47d3d68ee0edf4e7.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Dashboard/PositionsTabs/PositionsTabs.js","webpack://zignaly-webapp/./src/hooks/usePositionsContext.js","webpack://zignaly-webapp/./src/pages/profitSharing/browse/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/edit/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/management/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/news/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/positions/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/profile/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/providerAnalytics/index.js","webpack://zignaly-webapp/./src/pages/profitSharing/users/index.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport TabsMenu from \"../../TabsMenu\";\nimport \"./PositionsTabs.scss\";\nimport { navigate as navigateReach } from \"@reach/router\";\nimport { useIntl } from \"react-intl\";\nimport PositionsConext from \"../PositionsContext\";\nimport PositionsTable from \"../PositionsTable\";\n\n/**\n * @typedef {import(\"../../../hooks/usePositionsList\").PositionsCollectionType} PositionsCollectionType\n * @typedef {Object} DefaultProps\n * @property {Boolean} [isProfile]\n */\n\n/**\n * Tabs component.\n *\n * @param {DefaultProps} props Default compoennt props.\n * @returns {JSX.Element} JSX component.\n */\nconst PositionsTabs = ({ isProfile }) => {\n  const intl = useIntl();\n  const { openCount, closeCount, logCount } = useContext(PositionsConext);\n  /**\n   * Map tab index to positions collection type.\n   *\n   * @param {number} tabIndex Tab index value.\n   *\n   * @returns {PositionsCollectionType} Collection type.\n   */\n  const mapIndexToCollectionType = (tabIndex) => {\n    switch (tabIndex) {\n      case 1:\n        return \"closed\";\n\n      case 2:\n        return \"log\";\n\n      default:\n        return \"open\";\n    }\n  };\n\n  /**\n   * Map tab collection type to index.\n   *\n   * @param {string} collectionType Positions collection type.\n   *\n   * @returns {number} Tab index.\n   */\n  const mapCollectionTypeToIndex = (collectionType) => {\n    switch (collectionType) {\n      case \"closed\":\n        return 1;\n\n      case \"log\":\n        return 2;\n\n      default:\n        return 0;\n    }\n  };\n\n  const currentHash =\n    typeof window !== \"undefined\" && window.location.hash ? window.location.hash.substr(1) : \"\";\n\n  const [tabValue, setTabValue] = useState(mapCollectionTypeToIndex(currentHash));\n  const updateActiveTab = () => {\n    const newTabValue = mapCollectionTypeToIndex(currentHash);\n    if (tabValue !== newTabValue) {\n      setTabValue(newTabValue);\n    }\n  };\n  useEffect(updateActiveTab, [currentHash]);\n\n  /**\n   * Map tab index to positions collection type.\n   *\n   * @param {number} value Active tab.\n   * @returns {PositionsCollectionType} Collection type.\n   */\n  const mapProfileIndexToCollectionType = (value) => {\n    switch (value) {\n      case 1:\n        return \"profileClosed\";\n\n      default:\n        return \"profileOpen\";\n    }\n  };\n\n  /**\n   * Event handler to change tab value.\n   *\n   * @param {React.ChangeEvent<{checked: boolean}>} event Tab index to set active.\n   * @param {Number} val Tab index to set active.\n   * @returns {void}\n   */\n  const changeTab = (event, val) => {\n    setTabValue(val);\n    const newTabKey = mapIndexToCollectionType(val);\n    navigateReach(`#${newTabKey}`);\n  };\n\n  const tabsList = [\n    {\n      display: true,\n      label: `${intl.formatMessage({ id: \"dashboard.positions.open\" })} ${\n        tabValue === 0 ? `(${openCount})` : \"\"\n      }`,\n    },\n    {\n      display: true,\n      label: `${intl.formatMessage({ id: \"dashboard.positions.closed\" })} ${\n        tabValue === 1 ? `(${closeCount}/24h)` : \"\"\n      }`,\n    },\n    {\n      display: !isProfile,\n      label: `${intl.formatMessage({ id: \"dashboard.positions.log\" })} ${\n        tabValue === 2 ? `(${logCount})` : \"\"\n      }`,\n    },\n  ];\n\n  const selectedType = isProfile\n    ? mapProfileIndexToCollectionType(tabValue)\n    : mapIndexToCollectionType(tabValue);\n\n  return (\n    <Box bgcolor=\"grid.content\" className=\"positionsTabs\">\n      <Box\n        alignItems=\"center\"\n        className=\"tabsBox\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n      >\n        <TabsMenu changeTab={changeTab} tabValue={tabValue} tabs={tabsList} />\n      </Box>\n      <Box className=\"tabPanel\">\n        <PositionsTable isProfile={isProfile} type={selectedType} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default PositionsTabs;\n","import { useState } from \"react\";\n\n/**\n * @typedef {import(\"../components/Dashboard/PositionsContext\").PositionsContextObject} PositionsContextObject\n */\n\n/**\n * Handle the state management for the modal path data that is shared via context.\n *\n * @returns {PositionsContextObject} Modal path state object.\n */\nconst usePositionsContext = () => {\n  const [openCount, setOpenCount] = useState(0);\n  const [closeCount, setCloseCount] = useState(0);\n  const [logCount, setLogCount] = useState(0);\n\n  return {\n    openCount,\n    closeCount,\n    logCount,\n    setOpenCount,\n    setCloseCount,\n    setLogCount,\n  };\n};\n\nexport default usePositionsContext;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\nimport withProvidersLayout from \"../../../layouts/providersLayout\";\nimport { Helmet } from \"react-helmet\";\nimport ProvidersBrowse from \"../../../components/Providers/ProvidersBrowse\";\nimport \"./copyTradersBrowse.scss\";\n\n/**\n * @typedef {Object} CopyTradersBrowsePropTypes\n * @property {boolean} showFilters Flag to indicate if filters should be rendered.\n * @property {boolean} showSort Flag to indicate if sort options should be rendered.\n * @property {function} toggleFilters Callback that delegate filters toggle state to caller.\n * @property {function} toggleSort Callback that delegate sort toggle state to caller.\n * @property {function} setModifiedFiltersCount Callback that delegate modifiedFiltersCount to caller.\n */\n\n/**\n * Provides a list to browse copy traders.\n *\n * @param {CopyTradersBrowsePropTypes} props Component properties.\n * @returns {JSX.Element} Component JSX.\n */\nconst CopyTradersBrowse = (props) => {\n  const { showFilters, showSort, toggleFilters, toggleSort, setModifiedFiltersCount } = props;\n  const intl = useIntl();\n\n  return (\n    <Box className=\"psBrowsePage\">\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({\n            id: \"menu.profitSharing\",\n          })} - ${intl.formatMessage({\n            id: \"srv.marketplace\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <ProvidersBrowse\n        setModifiedFiltersCount={setModifiedFiltersCount}\n        showFilters={showFilters}\n        showSort={showSort}\n        toggleFilters={toggleFilters}\n        toggleSort={toggleSort}\n        type=\"profit_sharing\"\n      />\n    </Box>\n  );\n};\n\nexport default withProvidersLayout(CopyTradersBrowse);\n","import React from \"react\";\nimport \"./edit.scss\";\nimport { Box } from \"@material-ui/core\";\nimport EditProfileForm from \"../../../components/Forms/EditProfileForm\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\n\nconst CopyTradersEdit = () => {\n  const storeViews = useStoreViewsSelector();\n  const intl = useIntl();\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"copyTradersEditPage\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n    >\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.edit\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      {<EditProfileForm provider={storeViews.provider} />}\n    </Box>\n  );\n};\n\nexport default CopyTradersEdit;\n","import React, { useEffect } from \"react\";\nimport { Router } from \"@reach/router\";\nimport Profile from \"./profile\";\nimport Edit from \"./edit\";\nimport Management from \"./management\";\nimport Analytics from \"./providerAnalytics\";\nimport Users from \"./users\";\nimport Positions from \"./positions\";\nimport News from \"./news\";\nimport { useDispatch } from \"react-redux\";\nimport { getProvider, unsetProvider } from \"../../store/actions/views\";\nimport { withPrefix } from \"gatsby\";\nimport ProviderLayout from \"../../layouts/ProviderLayout\";\nimport { ProviderRoute as CopyTraderRoute } from \"../../components/RouteComponent/RouteComponent\";\nimport BrowsePage from \"./browse\";\nimport useStoreViewsSelector from \"../../hooks/useStoreViewsSelector\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\n\n/**\n *\n * @typedef {Object} LocationObject\n * @property {String} pathname\n */\n\n/**\n * @typedef {Object} ProviderProps\n * @property {LocationObject} location position ID dynamic route path parameter.\n */\n\n/**\n * Position detail page component.\n *\n * @param {ProviderProps} props Component properties.\n * @returns {JSX.Element} Position page element.\n */\nconst ProfitSharing = (props) => {\n  const { location } = props;\n  const { provider } = useStoreViewsSelector();\n  // On production the application is served through an /app directory, ID position is +1 level.\n  const idIndex = process.env.GATSBY_BASE_PATH === \"\" ? 2 : 3;\n  const providerId = location.pathname.split(\"/\")[idIndex];\n  const selectedExchange = useSelectedExchange();\n  const dispatch = useDispatch();\n\n  const loadProvider = () => {\n    if (providerId && providerId.length === 24) {\n      dispatch(unsetProvider());\n      const payload = {\n        providerId: providerId,\n        exchangeInternalId: selectedExchange.internalId,\n      };\n      dispatch(getProvider(payload, true));\n    }\n  };\n\n  useEffect(loadProvider, [providerId, selectedExchange.internalId]);\n\n  if (!providerId) {\n    // Render Browse page\n    return <BrowsePage {...props} />;\n  }\n\n  const allowAdminRoutes = provider.isAdmin && !provider.isClone;\n\n  return (\n    <ProviderLayout>\n      <Router>\n        <CopyTraderRoute\n          component={Profile}\n          default\n          path={withPrefix(\"/profitSharing/:providerId\")}\n          providerId={providerId}\n        />\n        {allowAdminRoutes && (\n          <CopyTraderRoute\n            component={Edit}\n            path={withPrefix(\"/profitSharing/:providerId/edit\")}\n            providerId={providerId}\n          />\n        )}\n        {allowAdminRoutes && (\n          <CopyTraderRoute\n            component={Management}\n            path={withPrefix(\"/profitSharing/:providerId/management\")}\n            providerId={providerId}\n          />\n        )}\n        <CopyTraderRoute\n          component={Analytics}\n          path={withPrefix(\"/profitSharing/:providerId/analytics\")}\n          providerId={providerId}\n        />\n        {allowAdminRoutes && (\n          <CopyTraderRoute\n            component={Users}\n            path={withPrefix(\"/profitSharing/:providerId/users\")}\n            providerId={providerId}\n          />\n        )}\n        <CopyTraderRoute\n          component={Positions}\n          path={withPrefix(\"/profitSharing/:providerId/positions\")}\n          providerId={providerId}\n        />\n        <CopyTraderRoute\n          component={News}\n          path={withPrefix(\"/profitSharing/:providerId/feed\")}\n          providerId={providerId}\n        />\n      </Router>\n    </ProviderLayout>\n  );\n};\n\nexport default ProfitSharing;\n","import React from \"react\";\nimport \"./management.scss\";\nimport { Box } from \"@material-ui/core\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport useSelectedExchange from \"hooks/useSelectedExchange\";\nimport {\n  FuturesProfitSharingManagement,\n  SpotProfitSharingManagement,\n  TraderManagement,\n} from \"components/Provider/ProviderManagement\";\n\nconst CopyTradersManagement = () => {\n  const { provider } = useStoreViewsSelector();\n  const selectedExchange = useSelectedExchange();\n  const intl = useIntl();\n\n  return (\n    <Box className=\"profileManagementPage\">\n      <Helmet>\n        <title>\n          {`${provider.name} - ${intl.formatMessage({\n            id: \"srv.management\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      {provider.profitSharing && provider.exchangeType.toLowerCase() === \"futures\" && (\n        <FuturesProfitSharingManagement provider={provider} selectedExchange={selectedExchange} />\n      )}\n      {provider.profitSharing && provider.exchangeType.toLowerCase() === \"spot\" && (\n        <SpotProfitSharingManagement provider={provider} selectedExchange={selectedExchange} />\n      )}\n      {!provider.profitSharing && (\n        <TraderManagement provider={provider} selectedExchange={selectedExchange} />\n      )}\n    </Box>\n  );\n};\n\nexport default CopyTradersManagement;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Wall from \"../../../components/Provider/News/Wall\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { useIntl } from \"react-intl\";\n\nconst CopyTradersNews = () => {\n  const intl = useIntl();\n  const storeViews = useStoreViewsSelector();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.newsfeed\",\n          })}`}\n        </title>\n      </Helmet>\n      <Wall provider={storeViews.provider} />\n    </>\n  );\n};\n\nexport default CopyTradersNews;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { Helmet } from \"react-helmet\";\nimport { PositionsTabs } from \"../../../components/Dashboard/PositionsTabs\";\nimport { useIntl } from \"react-intl\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport usePositionsContext from \"../../../hooks/usePositionsContext\";\nimport PositionsContext from \"../../../components/Dashboard/PositionsContext\";\n\nconst CopyTradersPositions = () => {\n  const intl = useIntl();\n  const storeViews = useStoreViewsSelector();\n  const context = usePositionsContext();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.positions\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Box className=\"positionsPage\" display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n        <PositionsContext.Provider value={context}>\n          <PositionsTabs isProfile={true} />\n        </PositionsContext.Provider>\n      </Box>\n    </>\n  );\n};\n\nexport default CopyTradersPositions;\n","import React from \"react\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport Profile from \"../../../components/Provider/Profile\";\n\nconst CopyTradersProfile = () => {\n  const storeViews = useStoreViewsSelector();\n\n  return <Profile provider={storeViews.provider} />;\n};\n\nexport default CopyTradersProfile;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { Helmet } from \"react-helmet\";\nimport Analytics from \"../../../components/Provider/Analytics\";\n\nconst CopyTradersAnalytics = () => {\n  const storeViews = useStoreViewsSelector();\n  const intl = useIntl();\n\n  return (\n    <Box className=\"profileAnalyticsPage\">\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.analytics\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Analytics provider={storeViews.provider} />\n    </Box>\n  );\n};\n\nexport default CopyTradersAnalytics;\n","import React from \"react\";\nimport \"./users.scss\";\nimport { Box } from \"@material-ui/core\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport { useIntl } from \"react-intl\";\nimport { Helmet } from \"react-helmet\";\nimport ProviderUsers from \"../../../components/Provider/ProviderUsers\";\n\nconst CopyTradersUsers = () => {\n  const storeViews = useStoreViewsSelector();\n  const intl = useIntl();\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"profileUsersPage\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n    >\n      <Helmet>\n        <title>\n          {`${storeViews.provider.name} - ${intl.formatMessage({\n            id: \"srv.users\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <ProviderUsers provider={storeViews.provider} />\n    </Box>\n  );\n};\n\nexport default CopyTradersUsers;\n"],"names":["isProfile","intl","useIntl","useContext","PositionsConext","openCount","closeCount","logCount","mapIndexToCollectionType","tabIndex","mapCollectionTypeToIndex","collectionType","currentHash","window","location","hash","substr","useState","tabValue","setTabValue","useEffect","newTabValue","tabsList","display","label","formatMessage","id","selectedType","Box","bgcolor","className","alignItems","flexDirection","justifyContent","TabsMenu","changeTab","event","val","newTabKey","navigateReach","tabs","PositionsTable","type","setOpenCount","setCloseCount","setLogCount","withProvidersLayout","props","showFilters","showSort","toggleFilters","toggleSort","setModifiedFiltersCount","storeViews","useStoreViewsSelector","provider","name","providerId","pathname","split","selectedExchange","useSelectedExchange","dispatch","useDispatch","length","unsetProvider","payload","exchangeInternalId","internalId","getProvider","allowAdminRoutes","isAdmin","isClone","Router","component","Profile","default","path","withPrefix","Edit","Management","Analytics","Users","Positions","News","profitSharing","exchangeType","toLowerCase","context","usePositionsContext","value"],"sourceRoot":""}