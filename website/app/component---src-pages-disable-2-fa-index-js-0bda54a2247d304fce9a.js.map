{"version":3,"file":"component---src-pages-disable-2-fa-index-js-0bda54a2247d304fce9a.js","mappings":"4NA2CA,EA9BkB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,KAAYC,EAAW,EAAjBC,KACzB,GAA8BC,EAAAA,EAAAA,WAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KAEA,OACE,gBAACC,EAAA,EAAD,CACEC,WAAW,SACXC,UAAU,YACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,UAEbP,EAMA,gBAACE,EAAA,EAAD,CAAKC,WAAW,SAASC,UAAU,WAAWC,QAAQ,OAAOC,cAAc,UACzE,gBAACE,EAAA,EAAD,CAAYC,QAAQ,MAClB,gBAAC,IAAD,CAAkBC,GAAG,mBAEvB,gBAAC,IAAD,CAAMN,UAAU,YAAYO,GAAG,UAC7B,gBAAC,IAAD,CAAkBD,GAAG,uBAVzB,gCACE,uBAAKE,IAAI,UAAUR,UAAU,OAAOS,IAAKC,EAAAA,IACzC,gBAACjB,EAAD,CAAMD,KAAMA,EAAMK,WAAYA,Q,qNC8ExC,EAnFgC,SAAC,GAA0B,IAAxBL,EAAuB,EAAvBA,KAAMK,EAAiB,EAAjBA,WACvC,GAA8BF,EAAAA,EAAAA,WAAS,GAAhCgB,EAAP,KAAgBC,EAAhB,KACA,GAAqDC,EAAAA,EAAAA,MAA7CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,SAClCC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,KA4Cb,OACE,wBAAMC,OAAO,OAAOC,SAAUR,GAhCf,SAACS,GAChB,IAAQC,EAAWD,EAAXC,OACRb,GAAW,GACX,IAAMc,EAAU,CACdC,MAAOnC,EACPiC,OAAAA,GAGFG,EAAAA,EAAAA,kBACqBF,GAClBG,MAAK,WACJX,GAASY,EAAAA,EAAAA,IAAiB,GAAI,kCAC9BC,EAAAA,EAAAA,UAAS,aAEVC,OAAM,SAACC,GACS,KAAXA,EAAEzC,KACJyB,EAAS,SAAU,CACjBiB,KAAM,SACNC,QAASf,EAAKgB,cAAc,CAAE9B,GAAI,8BAEhB,KAAX2B,EAAEzC,KACXK,GAAW,GAEXqB,GAASmB,EAAAA,EAAAA,IAAeJ,OAG3BK,SAAQ,WACP1B,GAAW,UAMb,gBAACd,EAAA,EAAD,CACEC,WAAW,SACXC,UAAU,0BACVC,QAAQ,OACRC,cAAc,SACdC,eAAe,UAEf,gBAACC,EAAA,EAAD,CAAYC,QAAQ,MAClB,gBAAC,IAAD,CAAkBC,GAAG,0BAEvB,yBAAON,UAAU,eACf,gBAACI,EAAA,EAAD,KACE,gBAAC,IAAD,CAAkBE,GAAG,6BAGzB,gBAACiC,EAAA,EAAD,CACEvC,UAAU,cACVwC,WAAW,EACXC,SAAUzB,EAAS,CACjB0B,SAAUtB,EAAKgB,cAAc,CAAE9B,GAAI,wBAErCqC,KAAK,SACLC,YAAaxB,EAAKgB,cAAc,CAAE9B,GAAI,8BAEvCQ,EAAOW,QAAU,wBAAMzB,UAAU,aAAac,EAAOW,OAAOU,SAC7D,gBAACU,EAAA,EAAD,CAAc7C,UAAU,eAAeW,QAASA,EAASuB,KAAK,UAC5D,gBAAC,IAAD,CAAkB5B,GAAG,6B,sBChE/B,EAjBmB,SAAC,GAAe,IAAbqB,EAAY,EAAZA,MACdP,GAAOC,EAAAA,EAAAA,KAEb,OACE,gCACE,gBAACyB,EAAA,EAAD,KACE,6BACM1B,EAAKgB,cAAc,CAAE9B,GAAI,yBAD/B,MAC8Dc,EAAKgB,cAAc,CAC7E9B,GAAI,cAIV,gBAACyC,EAAA,EAAD,CAAWvD,KAAMmC,EAAOjC,KAAMsD","sources":["webpack://zignaly-webapp/./src/components/Forms/ResetForm/ResetForm.js","webpack://zignaly-webapp/./src/components/Forms/ConfirmTwoFADisableForm/ConfirmTwoFADisableForm.js","webpack://zignaly-webapp/./src/pages/disable2fa/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ResetForm.scss\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport Logo from \"images/logo/logoNW.svg\";\nimport { FormattedMessage } from \"react-intl\";\nimport Link from \"components/LocalizedLink\";\n\n/**\n * @param {Object} props Props.\n * @param {string} props.code Reset Code.\n * @param {function} props.form Form component to embed.\n * @returns {JSX.Element} JSx component.\n */\nconst ResetForm = ({ code, form: Form }) => {\n  const [expired, setExpired] = useState(false);\n\n  return (\n    <Box\n      alignItems=\"center\"\n      className=\"resetForm\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n    >\n      {!expired ? (\n        <>\n          <img alt=\"TheBull\" className=\"logo\" src={Logo} />\n          <Form code={code} setExpired={setExpired} />\n        </>\n      ) : (\n        <Box alignItems=\"center\" className=\"errorBox\" display=\"flex\" flexDirection=\"column\">\n          <Typography variant=\"h3\">\n            <FormattedMessage id=\"recover.error\" />\n          </Typography>\n          <Link className=\"loginLink\" to=\"/login\">\n            <FormattedMessage id=\"backtologin.text\" />\n          </Link>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ResetForm;\n","import React, { useState } from \"react\";\nimport { Box, OutlinedInput, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm } from \"react-hook-form\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showSuccessAlert, showErrorAlert } from \"../../../store/actions/ui\";\nimport { navigate } from \"gatsby\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} code Token aquired by the recover request.\n * @property {React.SetStateAction<*>} setExpired\n */\n\n/**\n * Reset 2FA form component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Reset Password element.\n */\nconst ConfirmTwoFADisableForm = ({ code, setExpired }) => {\n  const [loading, setLoading] = useState(false);\n  const { errors, handleSubmit, register, setError } = useForm();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  /**\n   * @typedef {Object} DataObject\n   * @property {String} apiKey\n   */\n\n  /**\n   * Data returned at form submition.\n   *\n   * @param {DataObject} data form data received by the submit method.\n   * @returns {void}\n   */\n  const onSubmit = (data) => {\n    const { apiKey } = data;\n    setLoading(true);\n    const payload = {\n      token: code,\n      apiKey,\n    };\n\n    tradeApi\n      .disable2FAConfirm(payload)\n      .then(() => {\n        dispatch(showSuccessAlert(\"\", \"security.2fa.disable.success\"));\n        navigate(\"/login\");\n      })\n      .catch((e) => {\n        if (e.code === 91) {\n          setError(\"apiKey\", {\n            type: \"manual\",\n            message: intl.formatMessage({ id: \"form.error.apikey.error\" }),\n          });\n        } else if (e.code === 48) {\n          setExpired(false);\n        } else {\n          dispatch(showErrorAlert(e));\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"confirmTwoFADisableForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"security.2fa.disable\" />\n        </Typography>\n        <label className=\"customLabel\">\n          <Typography>\n            <FormattedMessage id=\"security.2fa.reset.api\" />\n          </Typography>\n        </label>\n        <OutlinedInput\n          className=\"customInput\"\n          fullWidth={true}\n          inputRef={register({\n            required: intl.formatMessage({ id: \"form.error.apikey\" }),\n          })}\n          name=\"apiKey\"\n          placeholder={intl.formatMessage({ id: \"signalp.settings.apikey\" })}\n        />\n        {errors.apiKey && <span className=\"errorText\">{errors.apiKey.message}</span>}\n        <CustomButton className=\"submitButton\" loading={loading} type=\"submit\">\n          <FormattedMessage id=\"security.2fa.disable\" />\n        </CustomButton>\n      </Box>\n    </form>\n  );\n};\n\nexport default ConfirmTwoFADisableForm;\n","import React from \"react\";\nimport ConfirmTwoFADisableForm from \"../../components/Forms/ConfirmTwoFADisableForm\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport ResetForm from \"components/Forms/ResetForm\";\n\n/**\n * @typedef {Object} PositionPageProps\n * @property {string} token Token aquired by the recover request.\n */\n\n/**\n * Recover Password page component.\n *\n * @param {PositionPageProps} props Component properties.\n * @returns {JSX.Element} Recover Password element.\n */\nconst Disable2FA = ({ token }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({ id: \"security.2fa.disable\" })} | ${intl.formatMessage({\n            id: \"product\",\n          })}`}\n        </title>\n      </Helmet>\n      <ResetForm code={token} form={ConfirmTwoFADisableForm} />\n    </>\n  );\n};\n\nexport default Disable2FA;\n"],"names":["code","Form","form","useState","expired","setExpired","Box","alignItems","className","display","flexDirection","justifyContent","Typography","variant","id","to","alt","src","Logo","loading","setLoading","useForm","errors","handleSubmit","register","setError","dispatch","useDispatch","intl","useIntl","method","onSubmit","data","apiKey","payload","token","tradeApi","then","showSuccessAlert","navigate","catch","e","type","message","formatMessage","showErrorAlert","finally","OutlinedInput","fullWidth","inputRef","required","name","placeholder","CustomButton","Helmet","ResetForm","ConfirmTwoFADisableForm"],"sourceRoot":""}