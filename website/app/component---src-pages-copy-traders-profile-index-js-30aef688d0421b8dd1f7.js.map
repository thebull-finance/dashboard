{"version":3,"file":"component---src-pages-copy-traders-profile-index-js-30aef688d0421b8dd1f7.js","mappings":"2PAoBMA,EAAa,SAACC,EAAWC,GAAZ,OACjB,IAAQD,EAAUE,KAAMD,EAAUC,OAAS,IAAQF,EAAUG,QAASF,EAAUE,UAI5EC,EAAcC,EAAAA,KAAWC,EAAAA,GAAKP,GAC9BQ,EAAwBF,EAAAA,KAAWG,EAAAA,GAAeT,GAiPxD,EAhNiB,SAACU,GAChB,IACEC,EAOED,EAPFC,OACAC,EAMEF,EANFE,OACAC,EAKEH,EALFG,WACAC,EAIEJ,EAJFI,cACAC,EAGEL,EAHFK,UACAC,EAEEN,EAFFM,sBACSC,EACPP,EADFN,QAEF,GAA8Dc,EAAAA,EAAAA,GAAgBJ,GAAtEK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,YAAaC,EAA9C,EAA8CA,YACxCC,GAAsBC,EAAAA,EAAAA,aAAYF,EAAa,CAACX,IAKhDR,EAAO,CACXS,OAAQG,EAAYJ,EAAOc,KAAI,iBAAM,MAAMb,EAC3Cc,SAAU,CACR,CACEvB,KAAMQ,EACNgB,aAAc,GACdC,gBAAiB,GAGjBC,gBAAiBlB,EAAOc,KAAI,SAACK,GAAD,OAAQA,EAAI,EAAI,UAAY,gBAKxDC,EAAQ,CACZC,MAAO,CACLC,UAAW,UACXC,SAAU,GAEVC,QAAS,GAIXC,UAAW,CAETC,MAAO,cACPC,SAAS,EACTC,YAAY,EACZC,cAAe,YAIbC,EAAQ,CACZL,UAAW,CACTE,SAAS,GAEXN,MAAO,CACLM,SAAS,EACTH,QAAStB,EAAa,GAAK,IAO/B,EAAoCP,EAAAA,SAAe,IAA5CoC,EAAP,KAAuBC,EAAvB,KACArC,EAAAA,WAAgB,WACd,GAAIS,EAAW,CACb,IAAM6B,EAAS7B,EAAUU,KAAI,SAACoB,GAC5B,IAAIC,EAAQ,IAAIC,MAEhB,OADAD,EAAME,IAAMH,EACLC,KAETH,EAAUC,MAEX,CAAC7B,IAWJ,IAAIX,EAAU,CACZ6C,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNb,SAAS,GAEXc,OAAQ,CACNrB,MAAO,CAAClB,EAAa4B,EAAQV,GAC7BU,MAAO,CAAC5B,EAAakB,EAAQU,IAE/BY,OAAQ,CACNlB,QAAS,CAEPmB,KAAMzC,EAAa,GAAK,EACxB0C,MAAO,EACPC,IAAK,GACLC,OAAQ5C,EAAa,GAAKE,EAAY,GAAK,IAG/C2C,aAAc,EACdC,SAAU,CACRC,SAAS,EACTC,OAAQtC,GAEVuC,UAAW,CACTC,SAAU,GAEZC,MAAO,CACLC,WAAW,EACXC,KAAM,QACNC,kBAAmB,GAErBC,QAAS,CACPC,eAAc3B,GACV,CACEE,OAAQF,EACR7B,WAAAA,KAOJuD,EAAU,CACd,CACEE,GAAI,eAYJC,UAAW,SAACC,GACV,GAAKA,EAAMrE,KAAKuB,SA8BhB,IA7BA,MAA6C8C,EAAMpE,QAAQgE,QAAQC,aAA3DzB,EAAR,EAAQA,OAAoB6B,EAA5B,EAAgB5D,WACZ6D,EAAMF,EAAME,IACZC,EAAQH,EAAMpB,OAAO,YACrBwB,EAAQJ,EAAMpB,OAAO,YAOnByB,EAAY,SAAC/B,EAAOgC,GAMxB,GALKhC,EAAMiC,eAETjC,EAAME,IAAMgC,EAAAA,GAGVP,EAAc,CAEhB,IAAMQ,EAAIL,EAAMM,gBAAgBJ,GAEhCJ,EAAIG,UAAU/B,EAAO,EAAGmC,EAAIE,GADf,WAER,CAEL,IAAMC,EAAIT,EAAMO,gBAAgBJ,GAEhCJ,EAAIG,UAAU/B,EAAOsC,EAAID,GAAUP,EAAMnB,OAAS,GADrC,SA1BG,WA+BX4B,GACP,IAAMvC,EAAQF,EAAOyC,GAChBvC,EAAMwC,SAKTT,EAAU/B,EAAOuC,GAJjBvC,EAAMyC,OAAS,WACbV,EAAU/B,EAAOuC,KAJdA,EAAI,EAAGA,EAAIzC,EAAO4C,OAAQH,IAAM,EAAhCA,MAefjF,EAAUqF,OAAOC,OAAOtF,EAASa,GAEjC,IAAM0E,EAAe9E,EAAaL,EAAwBH,EAEtDuF,EAAS,EACb,GAAI/E,GAAcG,EAAuB,CAEvC,IAEIW,EAAexB,EAAKuB,SAAS,GAAGC,aACpCA,EAAuC,iBAAjBA,EAA4BA,EAAe,EACjEiE,EAASjF,EAAO6E,QAAU7D,EAAekE,GAHnB,GAMxB,OACE,gBAACC,EAAA,EAAD,CAAKC,UAAU,WAAWC,MAAK,iBAAQJ,GAAU,CAAEA,OAAAA,KACjD,gBAACK,EAAA,EAAD,CAAc7E,cAAeA,EAAe8E,gBAAgB,EAAO7E,YAAaA,GAC9E,gBAACsE,EAAD,CAAcxF,KAAMA,EAAMC,QAASA,EAASgE,QAASA,EAAS+B,IAAKhF,Q,iBC9P3EiF,MAAMC,SAASC,UAAUC,UAAUC,KAAO,WACxC,IAEIC,EACAhD,EACAH,EAEAC,EACAmD,EACAC,EACAnD,EATAkB,EAAMkC,KAAKC,OAAOnC,IAClBoC,EAAKF,KAAKG,MASVC,EAAcF,EAAGE,YAIjBtD,EAAekD,KAAKC,OAAOI,OAAO7G,QAAQsD,aA8B9C,GA7BIA,EAAe,IACjBA,EAAe,QAEW,IAAjBA,IACTA,EAAe,GAGZoD,EAAGjG,YAWNyC,EAAOwD,EAAGI,KACV3D,EAAQuD,EAAG1B,EACX5B,EAAMsD,EAAG7B,EAAI6B,EAAGlB,OAAS,EACzBnC,EAASqD,EAAG7B,EAAI6B,EAAGlB,OAAS,EAC5Bc,EAAQnD,EAAQD,EAAO,GAAK,EAC5BqD,EAAQ,EACRF,EAAgBK,EAAGL,eAAiB,SAfpCnD,EAAOwD,EAAG1B,EAAI0B,EAAGK,MAAQ,EACzB5D,EAAQuD,EAAG1B,EAAI0B,EAAGK,MAAQ,EAC1B3D,EAAMsD,EAAG7B,EAETyB,EAAQ,EACRC,GAFAlD,EAASqD,EAAGI,MAEK1D,EAAM,GAAK,EAC5BiD,EAAgBK,EAAGL,eAAiB,UAclCO,EAAa,CAEf,IAAII,EAAUC,KAAKC,IAAID,KAAKE,IAAIjE,EAAOC,GAAQ8D,KAAKE,IAAI/D,EAAMC,IAE1D+D,GADJR,EAAcA,EAAcI,EAAUA,EAAUJ,GACjB,EAE3BS,EAAanE,GAA0B,SAAlBmD,EAA2Be,EAAad,EAAQ,GACrEgB,EAAcnE,GAA2B,UAAlBkD,GAA6Be,EAAad,EAAQ,GACzEiB,EAAYnE,GAAyB,QAAlBiD,EAA0Be,EAAab,EAAQ,GAClEiB,EAAenE,GAA4B,WAAlBgD,GAA8Be,EAAab,EAAQ,GAE5Ec,IAAeC,IACjBlE,EAAMmE,EACNlE,EAASmE,GAGPD,IAAcC,IAChBtE,EAAOmE,EACPlE,EAAQmE,GAIZhD,EAAImD,YACJnD,EAAIoD,UAAYhB,EAAGjF,gBACnB6C,EAAIqD,YAAcjB,EAAGkB,YACrBtD,EAAIuD,UAAYjB,EAKhB,IAAIkB,EAAU,CACZ,CAAC5E,EAAMG,GACP,CAACH,EAAME,GACP,CAACD,EAAOC,GACR,CAACD,EAAOE,IAKN0E,EADU,CAAC,SAAU,OAAQ,MAAO,SACdC,QAAQ3B,EAAe,GAKjD,SAAS4B,EAASvD,GAChB,OAAOoD,GAASC,EAAcrD,GAAS,IALpB,IAAjBqD,IACFA,EAAc,GAQhB,IAAIG,EAASD,EAAS,GACtB3D,EAAI6D,OAAOD,EAAO,GAAIA,EAAO,IAE7B,IAAK,IAAIjD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAc1B,IAAImD,EAbJF,EAASD,EAAShD,GAClBoD,aAAepD,EAAI,EACC,GAAhBoD,eACFA,aAAe,GAGjBC,WAAaL,EAASI,cAEtBtB,MAAQe,EAAQ,GAAG,GAAKA,EAAQ,GAAG,GACnCtC,OAASsC,EAAQ,GAAG,GAAKA,EAAQ,GAAG,GACpC9C,EAAI8C,EAAQ,GAAG,GACfjD,EAAIiD,EAAQ,GAAG,IAEXM,EAAS9E,GAEA2D,KAAKE,IAAI3B,QAAU,IAC9B4C,EAASnB,KAAKsB,MAAMtB,KAAKE,IAAI3B,QAAU,IAErC4C,EAASnB,KAAKE,IAAIJ,OAAS,IAC7BqB,EAASnB,KAAKsB,MAAMtB,KAAKE,IAAIJ,OAAS,IAGpCvB,OAAS,GAEXgD,KAAOxD,EACPyD,KAAOzD,EAAI+B,MACX2B,KAAO7D,EAAIW,OACXmD,KAAO9D,EAAIW,OAEXoD,KAAO5D,EACP6D,KAAO7D,EAAI+B,MACX+B,KAAOjE,EACPkE,KAAOlE,EAGPP,EAAI6D,OAAOS,KAAOR,EAAQU,MAC1BxE,EAAI0E,OAAOH,KAAOT,EAAQW,MAC1BzE,EAAI2E,iBAAiBJ,KAAME,KAAMF,KAAME,KAAOX,GAC9C9D,EAAI0E,OAAOP,KAAME,KAAOP,GACxB9D,EAAI2E,iBAAiBR,KAAME,KAAMF,KAAOL,EAAQO,MAChDrE,EAAI0E,OAAOR,KAAOJ,EAAQM,MAC1BpE,EAAI2E,iBAAiBT,KAAME,KAAMF,KAAME,KAAON,GAC9C9D,EAAI0E,OAAOJ,KAAME,KAAOV,GACxB9D,EAAI2E,iBAAiBL,KAAME,KAAMF,KAAOR,EAAQU,OACvC/B,MAAQ,GAEjByB,KAAOxD,EAAI+B,MACX0B,KAAOzD,EACP0D,KAAO7D,EACP8D,KAAO9D,EAEP+D,KAAO5D,EAAI+B,MACX8B,KAAO7D,EACP8D,KAAOjE,EAAIW,OACXuD,KAAOlE,EAAIW,OAGXlB,EAAI6D,OAAOS,KAAOR,EAAQU,MAC1BxE,EAAI0E,OAAOH,KAAOT,EAAQW,MAC1BzE,EAAI2E,iBAAiBJ,KAAME,KAAMF,KAAME,KAAOX,GAC9C9D,EAAI0E,OAAOP,KAAME,KAAOP,GACxB9D,EAAI2E,iBAAiBR,KAAME,KAAMF,KAAOL,EAAQO,MAChDrE,EAAI0E,OAAOR,KAAOJ,EAAQM,MAC1BpE,EAAI2E,iBAAiBT,KAAME,KAAMF,KAAME,KAAON,GAC9C9D,EAAI0E,OAAOJ,KAAME,KAAOV,GACxB9D,EAAI2E,iBAAiBL,KAAME,KAAMF,KAAOR,EAAQU,QAGhDxE,EAAI6D,OAAOnD,EAAIoD,EAAQvD,GACvBP,EAAI0E,OAAOhE,EAAI+B,MAAQqB,EAAQvD,GAC/BP,EAAI2E,iBAAiBjE,EAAI+B,MAAOlC,EAAGG,EAAI+B,MAAOlC,EAAIuD,GAClD9D,EAAI0E,OAAOhE,EAAI+B,MAAOlC,EAAIW,OAAS4C,GACnC9D,EAAI2E,iBAAiBjE,EAAI+B,MAAOlC,EAAIW,OAAQR,EAAI+B,MAAQqB,EAAQvD,EAAIW,QACpElB,EAAI0E,OAAOhE,EAAIoD,EAAQvD,EAAIW,QAC3BlB,EAAI2E,iBAAiBjE,EAAGH,EAAIW,OAAQR,EAAGH,EAAIW,OAAS4C,GACpD9D,EAAI0E,OAAOhE,EAAGH,EAAIuD,GAClB9D,EAAI2E,iBAAiBjE,EAAGH,EAAGG,EAAIoD,EAAQvD,IAI3CP,EAAI4E,OACAtC,GACFtC,EAAI6E,W,kDCnKR,IAZ8B,WAS5B,OAAOC,EAAAA,EAAAA,KAFkB,SAACC,GAAD,OAAWA,EAAMC,W,+ECT5C,UAN2B,WACzB,IAAMC,GAAaC,EAAAA,EAAAA,KAEnB,OAAO,gBAAC,IAAD,CAASC,SAAUF,EAAWE","sources":["webpack://zignaly-webapp/./src/components/Graphs/BarChart/BarChart.js","webpack://zignaly-webapp/./src/components/Graphs/Chart.roundedBarCharts.js","webpack://zignaly-webapp/./src/hooks/useStoreViewsSelector.js","webpack://zignaly-webapp/./src/pages/copyTraders/profile/index.js"],"sourcesContent":["import React, { useCallback } from \"react\";\nimport \"./BarChart.scss\";\nimport { Box } from \"@material-ui/core\";\nimport { Bar, HorizontalBar } from \"react-chartjs-2\";\nimport \"../Chart.roundedBarCharts\";\nimport LogoIcon from \"../../../images/logo/logoIcon.svg\";\nimport useChartTooltip from \"../../../hooks/useChartTooltip\";\nimport TooltipChart from \"../TooltipChart\";\nimport { isEqual } from \"lodash\";\n\n// Chart.Tooltip.positioners.cursor = function (chartElements, coordinates) {\n//   return { x: coordinates.x, y: 210 };\n// };\n\n/**\n * Check that props are equals (deep comparison)\n * @param {*} prevProps prevProps\n * @param {*} nextProps nextProps\n * @returns {boolean} Equality\n */\nconst propsEqual = (prevProps, nextProps) =>\n  isEqual(prevProps.data, nextProps.data) && isEqual(prevProps.options, nextProps.options);\n\n// Memoize the chart and only re-renders when the data is updated.\n// Otherwise it will be rendered everytime the toolip is triggered(state update).\nconst MemoizedBar = React.memo(Bar, propsEqual);\nconst MemoizedHorizontalBar = React.memo(HorizontalBar, propsEqual);\n\n/**\n * @typedef {import('chart.js').ChartData} ChartData\n * @typedef {import('chart.js').ChartOptions} ChartOptions\n * @typedef {import('chart.js').ChartPluginsOptions} ChartPluginsOptions\n * @typedef {import('chart.js').ChartTooltipItem} ChartTooltipItem\n * @typedef {import('chart.js').Chart} Chart\n */\n\n/**\n * @callback ChartTooltipCallback\n * @param {ChartTooltipItem} tooltipItem:\n * @param {ChartData} data\n */\n\n/**\n * @typedef {Object} BarChartPropTypes\n * @property {Array<Number>} values Chart values.\n * @property {Array<String>} [labels] Chart labels.\n * @property {Array<String>} [imageUrls] Chart images (used instead of labels).\n * @property {boolean} [horizontal] Flag to display the bars horizontally.\n * @property {boolean} [adjustHeightToContent] Adjust thw height of the canvas dynamicaly to fit its content. (Horizontal only)\n * @property {ChartTooltipCallback} tooltipFormat Function to format data based on selected value.\n * @property {ChartOptions} options Custom user options to override.\n */\n\n/**\n * Provides a wrapper to display a bar chart.\n *\n * @param {BarChartPropTypes} props Component properties.\n * @returns {JSX.Element} Component JSX.\n */\nconst BarChart = (props) => {\n  const {\n    values,\n    labels,\n    horizontal,\n    tooltipFormat,\n    imageUrls,\n    adjustHeightToContent,\n    options: customOptions,\n  } = props;\n  const { chartRef, pointHoverRef, tooltipData, showTooltip } = useChartTooltip(tooltipFormat);\n  const showTooltipCallback = useCallback(showTooltip, [values]);\n\n  /**\n   * @type ChartData\n   */\n  const data = {\n    labels: imageUrls ? values.map(() => \"\") : labels,\n    datasets: [\n      {\n        data: values,\n        barThickness: 20,\n        maxBarThickness: 24,\n        // barPercentage: 0.5,\n        // backgroundColor: colorsOptions.backgroundColor,\n        backgroundColor: values.map((v) => (v < 0 ? \"#f63f82\" : \"#08a441\")),\n      },\n    ],\n  };\n\n  const yAxes = {\n    ticks: {\n      fontColor: \"#d4d4d4\",\n      fontSize: 14,\n      // padding: 75,\n      padding: 0,\n      // stepSize: 1,\n      //   min: -2,\n    },\n    gridLines: {\n      // draw zero line only\n      color: \"transparent\",\n      display: true,\n      drawBorder: false,\n      zeroLineColor: \"#d4d4d4\",\n    },\n  };\n\n  const xAxes = {\n    gridLines: {\n      display: false,\n    },\n    ticks: {\n      display: true,\n      padding: horizontal ? 10 : 0,\n    },\n    // categoryPercentage: 1,\n    // barPercentage: 0.7,\n  };\n\n  // Load all images\n  const [imagesElements, setImages] = React.useState([]);\n  React.useEffect(() => {\n    if (imageUrls) {\n      const images = imageUrls.map((imageUrl) => {\n        let image = new Image();\n        image.src = imageUrl;\n        return image;\n      });\n      setImages(images);\n    }\n  }, [imageUrls]);\n\n  /**\n   * @typedef {Object} RoundedChartOptions\n   * @property {number} cornerRadius:\n   *\n   * @typedef {ChartOptions & RoundedChartOptions} ExtendedChartOptions\n   */\n  /**\n   * @type ExtendedChartOptions\n   */\n  let options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    scales: {\n      yAxes: [horizontal ? xAxes : yAxes],\n      xAxes: [horizontal ? yAxes : xAxes],\n    },\n    layout: {\n      padding: {\n        // left: 25,\n        left: horizontal ? 15 : 0,\n        right: 0,\n        top: 20,\n        bottom: horizontal ? 10 : imageUrls ? 25 : 0,\n      },\n    },\n    cornerRadius: 4,\n    tooltips: {\n      enabled: false,\n      custom: showTooltipCallback,\n    },\n    animation: {\n      duration: 0,\n    },\n    hover: {\n      intersect: false,\n      mode: \"index\",\n      animationDuration: 0,\n    },\n    plugins: {\n      legendImages: imagesElements\n        ? {\n            images: imagesElements,\n            horizontal,\n          }\n        : false,\n    },\n    // events: [\"click\", \"touchstart\", \"touchmove\"],\n  };\n\n  const plugins = [\n    {\n      id: \"legendImages\",\n      /**\n       * @typedef {Object} ChartWithScales\n       * @property {*} scales\n       *\n       * @typedef {Chart & ChartWithScales} ExtendedChart\n       */\n      /**\n       * Draw images at the bottom of the graph\n       * @param {ExtendedChart} chart Chart instance.\n       * @returns {void}\n       */\n      afterDraw: (chart) => {\n        if (!chart.data.datasets) return;\n        const { images, horizontal: isHorizontal } = chart.options.plugins.legendImages;\n        let ctx = chart.ctx;\n        let xAxis = chart.scales[\"x-axis-0\"];\n        let yAxis = chart.scales[\"y-axis-0\"];\n\n        /**\n         * @param {HTMLImageElement} image The image to draw.\n         * @param {number} index Data infex.\n         * @returns {void}\n         */\n        const drawImage = (image, index) => {\n          if (!image.naturalWidth) {\n            // Image didn't load properly, fallback to default icon\n            image.src = LogoIcon;\n          }\n\n          if (isHorizontal) {\n            // Draw image on the left\n            const y = yAxis.getPixelForTick(index);\n            const size = 26;\n            ctx.drawImage(image, 0, y - size / 2, size, size);\n          } else {\n            // Draw image at the bottom\n            const x = xAxis.getPixelForTick(index);\n            const size = 40;\n            ctx.drawImage(image, x - size / 2, yAxis.bottom + 15, size, size);\n          }\n        };\n\n        for (let i = 0; i < images.length; i++) {\n          const image = images[i];\n          if (!image.complete) {\n            image.onload = () => {\n              drawImage(image, i);\n            };\n          } else {\n            drawImage(image, i);\n          }\n        }\n      },\n    },\n  ];\n\n  // Merge user options\n  options = Object.assign(options, customOptions);\n\n  const BarComponent = horizontal ? MemoizedHorizontalBar : MemoizedBar;\n\n  let height = 0;\n  if (horizontal && adjustHeightToContent) {\n    // Calculate optimal height to display all the bars.\n    const BAR_GAP = 3;\n    const X_AXIS_HEIGHT = 60;\n    let barThickness = data.datasets[0].barThickness;\n    barThickness = typeof barThickness === \"number\" ? barThickness : 0;\n    height = values.length * (barThickness + BAR_GAP * 2) + X_AXIS_HEIGHT;\n  }\n\n  return (\n    <Box className=\"barChart\" style={{ ...(height && { height }) }}>\n      <TooltipChart pointHoverRef={pointHoverRef} showPointHover={false} tooltipData={tooltipData}>\n        <BarComponent data={data} options={options} plugins={plugins} ref={chartRef} />\n      </TooltipChart>\n    </Box>\n  );\n};\n\nexport default BarChart;\n","// @ts-nocheck\n/* eslint-disable */\n\n/*\n *   Rounded Rectangle Extension for Bar Charts and Horizontal Bar Charts\n *   Tested with Charts.js 2.7.0\n */\nChart.elements.Rectangle.prototype.draw = function () {\n  let ctx = this._chart.ctx;\n  let vm = this._view;\n  let borderSkipped;\n  let bottom;\n  let left;\n  var radius;\n  let right;\n  let signX;\n  let signY;\n  let top;\n  let borderWidth = vm.borderWidth;\n\n  // If radius is less than 0 or is large enough to cause drawing errors a max\n  //      radius is imposed. If cornerRadius is not defined set it to 0.\n  let cornerRadius = this._chart.config.options.cornerRadius;\n  if (cornerRadius < 0) {\n    cornerRadius = 0;\n  }\n  if (typeof cornerRadius === \"undefined\") {\n    cornerRadius = 0;\n  }\n\n  if (!vm.horizontal) {\n    // bar\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || \"bottom\";\n  } else {\n    // horizontal bar\n    left = vm.base;\n    right = vm.x;\n    top = vm.y - vm.height / 2;\n    bottom = vm.y + vm.height / 2;\n    signX = right > left ? 1 : -1;\n    signY = 1;\n    borderSkipped = vm.borderSkipped || \"left\";\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    let barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    let halfStroke = borderWidth / 2;\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    let borderLeft = left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\n    let borderRight = right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\n    let borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\n    let borderBottom = bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0);\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    }\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth;\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  let corners = [\n    [left, bottom],\n    [left, top],\n    [right, top],\n    [right, bottom],\n  ];\n\n  // Find first (starting) corner with fallback to 'bottom'\n  let borders = [\"bottom\", \"left\", \"top\", \"right\"];\n  let startCorner = borders.indexOf(borderSkipped, 0);\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  }\n\n  // Draw rectangle from 'startCorner'\n  let corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (let i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    nextCornerId = i + 1;\n    if (nextCornerId == 4) {\n      nextCornerId = 0;\n    }\n\n    nextCorner = cornerAt(nextCornerId);\n\n    width = corners[2][0] - corners[1][0];\n    height = corners[0][1] - corners[1][1];\n    x = corners[1][0];\n    y = corners[1][1];\n\n    var radius = cornerRadius;\n    // Fix radius being too large\n    if (radius > Math.abs(height) / 2) {\n      radius = Math.floor(Math.abs(height) / 2);\n    }\n    if (radius > Math.abs(width) / 2) {\n      radius = Math.floor(Math.abs(width) / 2);\n    }\n\n    if (height < 0) {\n      // Negative values in a standard bar chart\n      x_tl = x;\n      x_tr = x + width;\n      y_tl = y + height;\n      y_tr = y + height;\n\n      x_bl = x;\n      x_br = x + width;\n      y_bl = y;\n      y_br = y;\n\n      // Draw\n      ctx.moveTo(x_bl + radius, y_bl);\n      ctx.lineTo(x_br - radius, y_br);\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n      ctx.lineTo(x_tr, y_tr + radius);\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n      ctx.lineTo(x_tl + radius, y_tl);\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n      ctx.lineTo(x_bl, y_bl - radius);\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n    } else if (width < 0) {\n      // Negative values in a horizontal bar chart\n      x_tl = x + width;\n      x_tr = x;\n      y_tl = y;\n      y_tr = y;\n\n      x_bl = x + width;\n      x_br = x;\n      y_bl = y + height;\n      y_br = y + height;\n\n      // Draw\n      ctx.moveTo(x_bl + radius, y_bl);\n      ctx.lineTo(x_br - radius, y_br);\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n      ctx.lineTo(x_tr, y_tr + radius);\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n      ctx.lineTo(x_tl + radius, y_tl);\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n      ctx.lineTo(x_bl, y_bl - radius);\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n    } else {\n      // Positive Value\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n  }\n\n  ctx.fill();\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};\n","import { useSelector } from \"react-redux\";\n\n/**\n * @typedef {import(\"../store/initialState\").DefaultState} DefaultStateType\n * @typedef {import(\"../store/initialState\").DefaultViewsObject} DefaultViewsObject\n */\n\n/**\n * Select Redux store views data.\n *\n * @returns {DefaultViewsObject} Views object from redux store.\n */\nconst useStoreViewsSelector = () => {\n  /**\n   * Select store views data.\n   *\n   * @param {DefaultStateType} state Application store data.\n   * @returns {DefaultViewsObject} Store views data.\n   */\n  const selectStoreViews = (state) => state.views;\n\n  return useSelector(selectStoreViews);\n};\n\nexport default useStoreViewsSelector;\n","import React from \"react\";\nimport useStoreViewsSelector from \"../../../hooks/useStoreViewsSelector\";\nimport Profile from \"../../../components/Provider/Profile\";\n\nconst CopyTradersProfile = () => {\n  const storeViews = useStoreViewsSelector();\n\n  return <Profile provider={storeViews.provider} />;\n};\n\nexport default CopyTradersProfile;\n"],"names":["propsEqual","prevProps","nextProps","data","options","MemoizedBar","React","Bar","MemoizedHorizontalBar","HorizontalBar","props","values","labels","horizontal","tooltipFormat","imageUrls","adjustHeightToContent","customOptions","useChartTooltip","chartRef","pointHoverRef","tooltipData","showTooltip","showTooltipCallback","useCallback","map","datasets","barThickness","maxBarThickness","backgroundColor","v","yAxes","ticks","fontColor","fontSize","padding","gridLines","color","display","drawBorder","zeroLineColor","xAxes","imagesElements","setImages","images","imageUrl","image","Image","src","responsive","maintainAspectRatio","legend","scales","layout","left","right","top","bottom","cornerRadius","tooltips","enabled","custom","animation","duration","hover","intersect","mode","animationDuration","plugins","legendImages","id","afterDraw","chart","isHorizontal","ctx","xAxis","yAxis","drawImage","index","naturalWidth","LogoIcon","y","getPixelForTick","size","x","i","complete","onload","length","Object","assign","BarComponent","height","BAR_GAP","Box","className","style","TooltipChart","showPointHover","ref","Chart","elements","Rectangle","prototype","draw","borderSkipped","signX","signY","this","_chart","vm","_view","borderWidth","config","base","width","barSize","Math","min","abs","halfStroke","borderLeft","borderRight","borderTop","borderBottom","beginPath","fillStyle","strokeStyle","borderColor","lineWidth","corners","startCorner","indexOf","cornerAt","corner","moveTo","radius","nextCornerId","nextCorner","floor","x_tl","x_tr","y_tl","y_tr","x_bl","x_br","y_bl","y_br","lineTo","quadraticCurveTo","fill","stroke","useSelector","state","views","storeViews","useStoreViewsSelector","provider"],"sourceRoot":""}