{"version":3,"file":"component---src-pages-login-index-js-1eef0428ba4cfa7484aa.js","mappings":"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","sources":["webpack://zignaly-webapp/./src/components/Forms/ForgotPasswordForm/ForgotPasswordForm.js","webpack://zignaly-webapp/./src/components/Forms/LoginForm/LoginForm.js","webpack://zignaly-webapp/./src/pages/login/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ForgotPasswordForm.scss\";\nimport { Box, TextField, Typography } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport { useForm } from \"react-hook-form\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport { useDispatch } from \"react-redux\";\nimport { showErrorAlert, showSuccessAlert } from \"../../../store/actions/ui\";\nimport { FormattedMessage } from \"react-intl\";\nimport { emailRegex } from \"utils/validators\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\n\nconst ForgotPasswordForm = () => {\n  const [loading, setLoading] = useState(false);\n  const { errors, handleSubmit, register } = useForm();\n  const dispatch = useDispatch();\n  const { executeRecaptcha } = useGoogleReCaptcha();\n  // const captchaFallback = useRef(null);\n\n  /**\n   * @typedef {Object} FormData\n   * @property {string} email\n   * @property {string} [gRecaptchaResponse] Captcha token fallback\n   */\n\n  /**\n   * Function to submit form.\n   *\n   * @param {FormData} data Form data.\n   * @returns {Promise<void>} Promise.\n   */\n  const onSubmit = async (data) => {\n    setLoading(true);\n    let gRecaptchaResponse = data.gRecaptchaResponse || \"\";\n    let c = 2;\n    if (process.env.NODE_ENV === \"production\" && !gRecaptchaResponse) {\n      gRecaptchaResponse = await executeRecaptcha(\"forgotPassword\");\n      c = 3;\n    }\n    const payload = {\n      email: data.email,\n      array: true,\n      gRecaptchaResponse,\n      c,\n    };\n    tradeApi\n      .forgotPasswordStep1(payload)\n      .then(() => {\n        dispatch(\n          dispatch(\n            showSuccessAlert(\"alert.forgotpassword.step1.title\", \"alert.forgotpassword.step1.body\"),\n          ),\n        );\n      })\n      .catch((e) => {\n        // if (e.code === 76) {\n        //   // Use old captcha as fallback\n        //   captchaFallback.current = (/** @type {string} */ captcha) =>\n        //     onSubmit({ ...data, gRecaptchaResponse: captcha });\n        // } else {\n        dispatch(showErrorAlert(e));\n        // }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  /**\n   * Handle submit buttton click.\n   *\n   * @type {React.MouseEventHandler} handleClickSubmit\n   * @returns {void}\n   */\n  const handleSubmitClick = () => {\n    handleSubmit(onSubmit);\n  };\n\n  return (\n    <form method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n      <Box\n        alignItems=\"center\"\n        className=\"forgotPasswordForm\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h3\">\n          <FormattedMessage id=\"forgotPassword.title\" />\n        </Typography>\n        <Box\n          alignItems=\"start\"\n          className=\"inputBox\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"start\"\n        >\n          <label className=\"customLabel\">\n            <FormattedMessage id=\"forgotPassword.subtitle\" />\n          </label>\n          <TextField\n            className=\"customInput\"\n            error={errors.email}\n            fullWidth\n            inputRef={register({\n              required: true,\n              pattern: emailRegex,\n            })}\n            name=\"email\"\n            type=\"email\"\n            variant=\"outlined\"\n          />\n          {errors.email && (\n            <span className=\"errorText\">\n              <FormattedMessage id=\"security.email.error.invalid\" />\n            </span>\n          )}\n        </Box>\n\n        <Box className=\"inputBox\">\n          <CustomButton\n            className={\"full submitButton\"}\n            loading={loading}\n            onClick={handleSubmitClick}\n            type=\"submit\"\n          >\n            <FormattedMessage id=\"action.recover\" />\n          </CustomButton>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nexport default ForgotPasswordForm;\n","import React, { useState, useRef } from \"react\";\nimport \"./LoginForm.scss\";\nimport { Box, TextField } from \"@material-ui/core\";\nimport CustomButton from \"../../CustomButton/CustomButton\";\nimport Modal from \"../../Modal\";\nimport ForgotPasswordForm from \"../ForgotPasswordForm\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { startTradeApiSession } from \"../../../store/actions/session\";\nimport PasswordInput from \"../../Passwords/PasswordInput\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport TwoFAForm from \"../../../components/Forms/TwoFAForm\";\nimport { showErrorAlert } from \"../../../store/actions/ui\";\nimport tradeApi from \"../../../services/tradeApiClient\";\nimport useHasMounted from \"../../../hooks/useHasMounted\";\nimport { emailRegex } from \"utils/validators\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\nimport CaptchaTerms from \"components/Captcha/CaptchaTerms\";\nimport VerifyEmailForm from \"../VerifyEmailForm\";\n// import Captcha from \"../../Captcha\";\n\n/**\n * @typedef {import(\"../../../store/initialState\").DefaultState} DefaultStateType\n * @typedef {import(\"../../../store/initialState\").DefaultStateSession} StateSessionType\n * @typedef {import(\"../../../services/tradeApiClient.types\").UserEntity} UserEntity\n * @typedef {import(\"../../../services/tradeApiClient.types\").LoginResponse} LoginResponse\n *\n */\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [forgotModal, showForgotModal] = useState(false);\n  const [verifyEmailModal, showVerifyEmailModal] = useState(false);\n  const [twoFAModal, showTwoFAModal] = useState(false);\n  const [loginResponse, setLoginResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const intl = useIntl();\n  const { handleSubmit, errors, register } = useForm({\n    mode: \"onBlur\",\n    reValidateMode: \"onChange\",\n  });\n  const { executeRecaptcha } = useGoogleReCaptcha();\n  const captchaFallback = useRef(null);\n  const isCheckly =\n    typeof window !== \"undefined\" && window.navigator.userAgent.toLowerCase().includes(\"checkly\");\n\n  const hasMounted = useHasMounted();\n  if (!hasMounted) {\n    // Don't render form statically\n    return null;\n  }\n\n  /**\n   *\n   * @param {LoginResponse} response User login response.\n   * @returns {void} None.\n   */\n  const check2FA = (response) => {\n    if (response.emailUnconfirmed) {\n      showVerifyEmailModal(true);\n    } else if (response.ask2FA || response.isUnknownDevice || response.disabled) {\n      showTwoFAModal(true);\n      setLoading(false);\n    } else {\n      dispatch(startTradeApiSession(response, \"login\"));\n    }\n  };\n\n  const onSuccess = () => {\n    dispatch(startTradeApiSession(loginResponse, \"login\"));\n  };\n\n  /**\n   * @typedef {Object} LoginFormSubmission\n   * @property {string} email\n   * @property {string} password\n   * @property {string} [gRecaptchaResponse] Captcha token fallback\n   */\n\n  /**\n   * Process data submitted in the login form.\n   *\n   * @param {LoginFormSubmission} data Submission data.\n   * @returns {Promise<Void>} None.\n   */\n  const onSubmit = async (data) => {\n    setLoading(true);\n    let gRecaptchaResponse = data.gRecaptchaResponse || \"\";\n    let c = 2;\n    if (!isCheckly && process.env.NODE_ENV === \"production\" && !gRecaptchaResponse) {\n      gRecaptchaResponse = await executeRecaptcha(\"login\");\n      c = 3;\n    }\n    tradeApi\n      .userLogin({ ...data, gRecaptchaResponse, c })\n      .then((response) => {\n        setLoginResponse(response);\n        check2FA(response);\n        captchaFallback.current = null;\n      })\n      .catch((e) => {\n        // if (e.code === 76) {\n        //   // Use old captcha as fallback\n        //   captchaFallback.current = (/** @type {string} */ captcha) =>\n        //     onSubmit({ ...data, gRecaptchaResponse: captcha });\n        // } else {\n        dispatch(showErrorAlert(e));\n        // }\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <Modal\n        onClose={() => showForgotModal(false)}\n        persist={false}\n        size=\"small\"\n        state={forgotModal}\n      >\n        <ForgotPasswordForm />\n      </Modal>\n      <Modal onClose={() => showTwoFAModal(false)} persist={false} size=\"small\" state={twoFAModal}>\n        <TwoFAForm loginData={loginResponse} onComplete={onSuccess} />\n      </Modal>\n      <Modal\n        onClose={() => {}}\n        persist={true}\n        showCloseIcon={false}\n        size=\"small\"\n        state={verifyEmailModal}\n      >\n        <VerifyEmailForm onComplete={onSuccess} token={loginResponse?.token} />\n      </Modal>\n\n      <form id=\"loginForm\" method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n        <Box\n          alignItems=\"center\"\n          className=\"loginForm\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n        >\n          <Box\n            alignItems=\"start\"\n            className=\"inputBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"start\"\n          >\n            <label className=\"customLabel\">\n              <FormattedMessage id=\"security.email\" />\n            </label>\n            <TextField\n              className=\"customInput\"\n              error={!!errors.email}\n              fullWidth\n              inputRef={register({\n                required: intl.formatMessage({ id: \"security.email.error.empty\" }),\n                pattern: {\n                  value: emailRegex,\n                  message: intl.formatMessage({ id: \"security.email.error.invalid\" }),\n                },\n              })}\n              name=\"email\"\n              type=\"email\"\n              variant=\"outlined\"\n            />\n            {errors.email && <span className=\"errorText\">{errors.email.message}</span>}\n          </Box>\n          <Box\n            alignItems=\"start\"\n            className=\"inputBox\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"start\"\n          >\n            <PasswordInput\n              error={!!errors.password}\n              inputRef={register({\n                required: intl.formatMessage({ id: \"security.password.error.empty\" }),\n              })}\n              label={<FormattedMessage id={\"security.password\"} />}\n              name=\"password\"\n            />\n            {errors.password && <span className=\"errorText\">{errors.password.message}</span>}\n          </Box>\n          {/* <Captcha onSuccess={captchaFallback.current} /> */}\n          <Box className=\"inputBox\">\n            <CustomButton\n              className={\"full submitButton\"}\n              form=\"loginForm\"\n              loading={loading}\n              type=\"submit\"\n            >\n              <FormattedMessage id=\"action.login\" />\n            </CustomButton>\n          </Box>\n          <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n            <span className=\"link\" onClick={() => showForgotModal(true)}>\n              <FormattedMessage id=\"action.forgot\" />\n            </span>\n          </Box>\n        </Box>\n      </form>\n      <CaptchaTerms />\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport LoginTabs from \"../../components/Login/LoginTabs\";\nimport { Helmet } from \"react-helmet\";\nimport { useIntl } from \"react-intl\";\nimport LoginForm from \"../../components/Forms/LoginForm\";\nimport Login from \"../../components/Login/Login\";\nimport useRedirectUponSessionValid from \"hooks/useRedirectUponSessionValid\";\nimport useHasMounted from \"hooks/useHasMounted\";\n\nconst LoginPage = () => {\n  const intl = useIntl();\n  useRedirectUponSessionValid();\n\n  const hasMounted = useHasMounted();\n  if (!hasMounted) {\n    // Don't render statically due to split test\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {`${intl.formatMessage({\n            id: \"login.title\",\n          })} | ${intl.formatMessage({ id: \"product\" })}`}\n        </title>\n      </Helmet>\n      <Login>\n        <LoginTabs>\n          <LoginForm />\n        </LoginTabs>\n      </Login>\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["useState","loading","setLoading","useForm","errors","handleSubmit","register","dispatch","useDispatch","executeRecaptcha","useGoogleReCaptcha","onSubmit","data","gRecaptchaResponse","c","payload","email","array","tradeApi","then","showSuccessAlert","catch","e","showErrorAlert","finally","method","Box","alignItems","className","display","flexDirection","justifyContent","Typography","variant","id","TextField","error","fullWidth","inputRef","required","pattern","emailRegex","name","type","CustomButton","onClick","forgotModal","showForgotModal","verifyEmailModal","showVerifyEmailModal","twoFAModal","showTwoFAModal","loginResponse","setLoginResponse","intl","useIntl","mode","reValidateMode","captchaFallback","useRef","isCheckly","window","navigator","userAgent","toLowerCase","includes","useHasMounted","check2FA","response","emailUnconfirmed","ask2FA","isUnknownDevice","disabled","startTradeApiSession","onSuccess","current","Modal","onClose","persist","size","state","TwoFAForm","loginData","onComplete","showCloseIcon","VerifyEmailForm","token","formatMessage","value","message","PasswordInput","password","label","form","CaptchaTerms","useRedirectUponSessionValid","Helmet","Login","LoginTabs"],"sourceRoot":""}